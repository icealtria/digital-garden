{"createdTime":1733329073255,"shownInTree":["computer/computer-architecture/big-endian-and-little-endian.html","computer/computer-architecture/computer-architecture-(machine-structures).html","computer/computer-architecture/hex-and-decimal.html","computer/computer-architecture/整数表示.html","computer/computer-architecture/补码.html","computer/computer-networking/anycast.html","computer/computer-networking/arp.html","computer/computer-networking/arq.html","computer/computer-networking/bridge.html","computer/computer-networking/cidr.html","computer/computer-networking/computer-networking.html","computer/computer-networking/cs144.html","computer/computer-networking/cs144-lab0.html","computer/computer-networking/cs144-lab1.html","computer/computer-networking/encapsulation.html","computer/computer-networking/etag.html","computer/computer-networking/forwarding-information-base.html","computer/computer-networking/ice.html","computer/computer-networking/internet-protocol.html","computer/computer-networking/ipsec.html","computer/computer-networking/ipv4.html","computer/computer-networking/longest-prefix-match.html","computer/computer-networking/mtu.html","computer/computer-networking/packet.html","computer/computer-networking/packet-switching.html","computer/computer-networking/ptr-record.html","computer/computer-networking/reliable-byte-stream.html","computer/computer-networking/tcp.html","computer/computer-networking/the-4-layer-internet-model.html","computer/computer-networking/tun-and-tap.html","computer/computer-networking/udp.html","computer/computer-networking/underline-in-c++.html","computer/computer-networking/window-sizes.html","computer/computer-networking/三次握手.html","computer/computer-networking/关闭连接.html","computer/computer-networking/多播.html","computer/computer-networking/子网.html","computer/computer-networking/广播.html","computer/computer-networking/网络掩码.html","computer/cs61a/202204231534.html","computer/cs61a/generators.html","computer/cs61a/iterable-uses.html","computer/cs61a/pure-functions-&-non-pure-functions.html","computer/cs61a/trees-&-tree-mutation.html","computer/data-structure/a-star.html","computer/data-structure/bellman-ford.html","computer/data-structure/breadth-first-search.html","computer/data-structure/cut-property.html","computer/data-structure/data-structure.html","computer/data-structure/depth-first-traversais.html","computer/data-structure/depth-first-traversal.html","computer/data-structure/determain-graph-has-cycle.html","computer/data-structure/dijkstra.html","computer/data-structure/dynamic-programming.html","computer/data-structure/graph.html","computer/data-structure/graph-problems.html","computer/data-structure/heap.html","computer/data-structure/kruskal's-algorithm.html","computer/data-structure/minimum-spanning-trees.html","computer/data-structure/prim's-algorithm.html","computer/data-structure/priority-queue.html","computer/data-structure/red-black-trees.html","computer/data-structure/shortest-paths.html","computer/data-structure/spanning-trees.html","computer/data-structure/tree-traversals.html","computer/data-structure/tries.html","computer/data-structure/when-to-use-dp.html","computer/database/cross-join.html","computer/database/database.html","computer/database/having-&-where.html","computer/database/index-db.html","computer/database/sql-常见错误.html","computer/database/views.html","computer/database/外联结（outer-join）.html","computer/database/联结（join）.html","computer/database/集合运算.html","computer/graphics/栅格化.html","computer/graphics/栅格图像.html","computer/graphics/矢量图像.html","computer/graphics/矢量图形.html","computer/programming/rust/attribute-like-macros.html","computer/programming/rust/declarative-macro.html","computer/programming/rust/derive-macro.html","computer/programming/rust/function-like-macros.html","computer/programming/rust/lifetime-annotations-in-method-definitions.html","computer/programming/rust/lifetime-elision.html","computer/programming/rust/litetime.html","computer/programming/rust/procedural-macros.html","computer/programming/rust/rust.html","computer/programming/rust/rust-closures.html","computer/programming/rust/rust-oop.html","computer/programming/rust/rust-pattern-matching.html","computer/programming/rust/smart-point.html","computer/programming/rust/static-lifetime.html","computer/programming/rust/unsafe-rust.html","computer/programming/elixir.html","computer/web-applications/cascading-style-sheets.html","computer/web-applications/debugging-node-applications.html","computer/web-applications/debugging-react-applications.html","computer/web-applications/document-object-model.html","computer/web-applications/graphql.html","computer/web-applications/http-get.html","computer/web-applications/hypertext-markup-language.html","computer/web-applications/javascript.html","computer/web-applications/javascript-async.html","computer/web-applications/mongodb.html","computer/web-applications/node.js.html","computer/web-applications/promise.html","computer/web-applications/react-hooks.html","computer/web-applications/react.js.html","computer/web-applications/rest.html","computer/web-applications/server-side-session.html","computer/web-applications/single-page-applications.html","computer/web-applications/spring-web.html","computer/web-applications/token-authentication.html","computer/web-applications/universal-resource-locator.html","computer/web-applications/useeffect.html","computer/web-applications/usestate.html","computer/web-applications/web-applications.html","computer/abi.html","computer/bus.html","computer/git.html","computer/git-sha1.html","computer/hashing.html","computer/krita.html","computer/linux-共享库.html","computer/logo.html","computer/shell.html","computer/thread-pool.html","computer/字符.html","computer/整数运算.html","dev/django/django.html","dev/django/django-分页.html","dev/django/django-初始化自带数据.html","dev/web/server-sent-events-(sse)-和-websockets.html","dev/web/zod.html","dev/grpc.html","finance/ppp.html","finance/利差交易.html","finance/国际收支、双顺差与货币升值.html","finance/影响外汇价格的因素.html","finance/通货膨胀.html","linux/android.html","linux/arch.html","linux/docker.html","linux/git.html","linux/shell.html","linux/zsh-disable-history.html","linux/打包.html","linux/添加用户.html","linux/端口占用.html","uncategorized/google-地区.html","uncategorized/telegram-avatar.html","uncategorized/zed-用-ollama.html","uncategorized/什么是金丝雀安全声明？-cloudflare.html","uncategorized/写作压力.html","uncategorized/小鹤双拼-on-windows.html","uncategorized/清除-powershell-历史.html","翻墙/clash/index.html","翻墙/clash/dialer-proxy.html","翻墙/clash/warp-ip-range.html","翻墙/clash/使用-clash-meta-+-warp-增强使用机场时的隐私.html","翻墙/clash/链式代理.html","翻墙/warp.html","index.html"],"attachments":["site-lib/scripts/graph-wasm.wasm","site-lib/fonts/94f2f163d4b698242fef.otf","site-lib/fonts/72505e6a122c6acd5471.woff2","site-lib/fonts/2d5198822ab091ce4305.woff2","site-lib/fonts/c8ba52b05a9ef10f4758.woff2","site-lib/fonts/cb10ffd7684cd9836a05.woff2","site-lib/fonts/b5f0f109bc88052d4000.woff2","site-lib/fonts/cbe0ae49c52c920fd563.woff2","site-lib/fonts/535a6cf662596b3bd6a6.woff2","site-lib/fonts/70cc7ff27245e82ad414.ttf","site-lib/fonts/454577c22304619db035.ttf","site-lib/fonts/52ac8f3034507f1d9e53.ttf","site-lib/fonts/05b618077343fbbd92b7.ttf","site-lib/fonts/4bb6ac751d1c5478ff3a.woff2","site-lib/media/874d8b8e340f75575caa.svg","site-lib/media/3d6c1bdc4d87cde4de67.svg","site-lib/fonts/mathjax_zero.woff","site-lib/fonts/mathjax_main-regular.woff","site-lib/fonts/mathjax_main-bold.woff","site-lib/fonts/mathjax_math-italic.woff","site-lib/fonts/mathjax_main-italic.woff","site-lib/fonts/mathjax_math-bolditalic.woff","site-lib/fonts/mathjax_size1-regular.woff","site-lib/fonts/mathjax_size2-regular.woff","site-lib/fonts/mathjax_size3-regular.woff","site-lib/fonts/mathjax_size4-regular.woff","site-lib/fonts/mathjax_ams-regular.woff","site-lib/fonts/mathjax_calligraphic-regular.woff","site-lib/fonts/mathjax_calligraphic-bold.woff","site-lib/fonts/mathjax_fraktur-regular.woff","site-lib/fonts/mathjax_fraktur-bold.woff","site-lib/fonts/mathjax_sansserif-regular.woff","site-lib/fonts/mathjax_sansserif-bold.woff","site-lib/fonts/mathjax_sansserif-italic.woff","site-lib/fonts/mathjax_script-regular.woff","site-lib/fonts/mathjax_typewriter-regular.woff","site-lib/fonts/mathjax_vector-regular.woff","site-lib/fonts/mathjax_vector-bold.woff","site-lib/html/file-tree-content.html","site-lib/scripts/webpage.js","site-lib/scripts/graph-wasm.js","site-lib/scripts/graph-render-worker.js","site-lib/media/favicon.png","site-lib/styles/obsidian.css","site-lib/styles/global-variable-styles.css","site-lib/styles/main-styles.css","assets/2023-03-17_17-11.webp","assets/pasted-image-20240528170902.png","assets/2023-03-17_16-12.webp","assets/pasted-image-20240527170802.png","assets/image/hex-and-decimal-1701246586199.jpeg","assets/image/spring-web-1685289945837.jpeg","assets/image/udp-1679050115511.jpeg","assets/image/udp-1679051130778.jpeg","assets/image/internet-protocol-1677847475053.jpeg","assets/image/tun-tap-1678176253048.jpeg","assets/image/arp-1678698919522.jpeg","assets/image/cs144-lab1-1677946921891.jpeg","assets/image/encapsulation-(networking)-1677852705096.jpeg","assets/image/encapsulation-1677852825322.jpeg","assets/image/encapsulation-1677853941070.jpeg","assets/image/the-4-layer-internet-model-1677839765520.jpeg","assets/image/the-4-layer-internet-model-1677841182979.jpeg","assets/image/the-4-layer-internet-model-1677841972147.jpeg","site-lib/rss.xml"],"allFiles":["finance/ppp.html","finance/影响外汇价格的因素.html","computer/web-applications/javascript-async.html","computer/computer-networking/packet-switching.html","index.html","uncategorized/什么是金丝雀安全声明？-cloudflare.html","uncategorized/小鹤双拼-on-windows.html","uncategorized/清除-powershell-历史.html","翻墙/clash/index.html","翻墙/clash/dialer-proxy.html","翻墙/clash/链式代理.html","翻墙/warp.html","翻墙/clash/warp-ip-range.html","翻墙/clash/使用-clash-meta-+-warp-增强使用机场时的隐私.html","uncategorized/写作压力.html","uncategorized/telegram-avatar.html","uncategorized/google-地区.html","finance/利差交易.html","finance/国际收支、双顺差与货币升值.html","finance/通货膨胀.html","linux/添加用户.html","computer/logo.html","linux/端口占用.html","dev/web/zod.html","computer/computer-networking/网络掩码.html","computer/computer-networking/anycast.html","computer/computer-networking/ipsec.html","computer/computer-networking/多播.html","computer/computer-networking/tcp.html","computer/computer-networking/关闭连接.html","computer/computer-networking/三次握手.html","computer/computer-networking/window-sizes.html","computer/computer-networking/ptr-record.html","computer/computer-networking/广播.html","computer/computer-networking/子网.html","computer/database/database.html","computer/database/cross-join.html","computer/database/集合运算.html","computer/database/外联结（outer-join）.html","computer/database/联结（join）.html","computer/database/having-&-where.html","computer/database/sql-常见错误.html","computer/database/views.html","uncategorized/zed-用-ollama.html","linux/打包.html","linux/arch.html","dev/django/django.html","dev/web/server-sent-events-(sse)-和-websockets.html","computer/linux-共享库.html","computer/abi.html","computer/bus.html","dev/grpc.html","computer/整数运算.html","computer/computer-architecture/整数表示.html","computer/computer-architecture/补码.html","computer/computer-architecture/hex-and-decimal.html","computer/programming/elixir.html","computer/cs61a/202204231534.html","linux/zsh-disable-history.html","computer/database/index-db.html","dev/django/django-初始化自带数据.html","dev/django/django-分页.html","computer/web-applications/spring-web.html","computer/programming/rust/smart-point.html","computer/computer-networking/udp.html","computer/computer-networking/internet-protocol.html","computer/computer-networking/ice.html","computer/computer-networking/tun-and-tap.html","computer/computer-networking/arp.html","computer/computer-networking/cidr.html","computer/computer-networking/longest-prefix-match.html","computer/computer-networking/forwarding-information-base.html","computer/computer-architecture/big-endian-and-little-endian.html","computer/computer-networking/mtu.html","computer/computer-networking/bridge.html","computer/computer-networking/underline-in-c++.html","computer/computer-networking/cs144-lab1.html","computer/computer-networking/ipv4.html","computer/computer-networking/computer-networking.html","computer/computer-networking/encapsulation.html","computer/data-structure/bellman-ford.html","computer/programming/rust/procedural-macros.html","computer/computer-networking/the-4-layer-internet-model.html","computer/computer-networking/packet.html","computer/computer-networking/cs144.html","computer/computer-networking/cs144-lab0.html","computer/computer-networking/arq.html","computer/computer-networking/reliable-byte-stream.html","computer/computer-networking/etag.html","computer/computer-architecture/computer-architecture-(machine-structures).html","computer/programming/rust/rust-closures.html","computer/programming/rust/litetime.html","computer/programming/rust/static-lifetime.html","computer/programming/rust/lifetime-annotations-in-method-definitions.html","computer/programming/rust/lifetime-elision.html","computer/thread-pool.html","computer/programming/rust/function-like-macros.html","computer/programming/rust/attribute-like-macros.html","computer/programming/rust/derive-macro.html","computer/programming/rust/declarative-macro.html","computer/programming/rust/unsafe-rust.html","computer/programming/rust/rust.html","computer/programming/rust/rust-pattern-matching.html","computer/programming/rust/rust-oop.html","computer/data-structure/data-structure.html","computer/data-structure/when-to-use-dp.html","computer/data-structure/dynamic-programming.html","computer/data-structure/dijkstra.html","computer/data-structure/depth-first-traversais.html","computer/data-structure/tries.html","computer/web-applications/server-side-session.html","computer/web-applications/token-authentication.html","computer/web-applications/web-applications.html","computer/web-applications/promise.html","computer/web-applications/javascript.html","computer/web-applications/mongodb.html","computer/web-applications/node.js.html","computer/web-applications/debugging-node-applications.html","computer/web-applications/http-get.html","computer/web-applications/rest.html","computer/web-applications/react-hooks.html","computer/web-applications/useeffect.html","computer/web-applications/react.js.html","computer/web-applications/debugging-react-applications.html","computer/web-applications/usestate.html","computer/web-applications/graphql.html","computer/web-applications/single-page-applications.html","computer/web-applications/cascading-style-sheets.html","computer/web-applications/document-object-model.html","computer/web-applications/universal-resource-locator.html","computer/web-applications/hypertext-markup-language.html","computer/data-structure/a-star.html","computer/data-structure/depth-first-traversal.html","computer/data-structure/graph.html","computer/data-structure/graph-problems.html","computer/data-structure/prim's-algorithm.html","computer/data-structure/shortest-paths.html","computer/data-structure/minimum-spanning-trees.html","computer/data-structure/kruskal's-algorithm.html","computer/cs61a/generators.html","computer/data-structure/cut-property.html","computer/data-structure/spanning-trees.html","computer/data-structure/red-black-trees.html","computer/data-structure/determain-graph-has-cycle.html","computer/hashing.html","computer/data-structure/priority-queue.html","computer/data-structure/breadth-first-search.html","computer/data-structure/tree-traversals.html","computer/cs61a/trees-&-tree-mutation.html","computer/data-structure/heap.html","computer/krita.html","computer/graphics/矢量图像.html","computer/graphics/栅格图像.html","computer/graphics/栅格化.html","computer/graphics/矢量图形.html","computer/git-sha1.html","computer/git.html","computer/cs61a/iterable-uses.html","computer/cs61a/pure-functions-&-non-pure-functions.html","computer/shell.html","computer/字符.html","linux/android.html","linux/docker.html","linux/git.html","linux/shell.html","site-lib/scripts/graph-wasm.wasm","site-lib/fonts/94f2f163d4b698242fef.otf","site-lib/fonts/72505e6a122c6acd5471.woff2","site-lib/fonts/2d5198822ab091ce4305.woff2","site-lib/fonts/c8ba52b05a9ef10f4758.woff2","site-lib/fonts/cb10ffd7684cd9836a05.woff2","site-lib/fonts/b5f0f109bc88052d4000.woff2","site-lib/fonts/cbe0ae49c52c920fd563.woff2","site-lib/fonts/535a6cf662596b3bd6a6.woff2","site-lib/fonts/70cc7ff27245e82ad414.ttf","site-lib/fonts/454577c22304619db035.ttf","site-lib/fonts/52ac8f3034507f1d9e53.ttf","site-lib/fonts/05b618077343fbbd92b7.ttf","site-lib/fonts/4bb6ac751d1c5478ff3a.woff2","site-lib/media/874d8b8e340f75575caa.svg","site-lib/media/3d6c1bdc4d87cde4de67.svg","site-lib/fonts/mathjax_zero.woff","site-lib/fonts/mathjax_main-regular.woff","site-lib/fonts/mathjax_main-bold.woff","site-lib/fonts/mathjax_math-italic.woff","site-lib/fonts/mathjax_main-italic.woff","site-lib/fonts/mathjax_math-bolditalic.woff","site-lib/fonts/mathjax_size1-regular.woff","site-lib/fonts/mathjax_size2-regular.woff","site-lib/fonts/mathjax_size3-regular.woff","site-lib/fonts/mathjax_size4-regular.woff","site-lib/fonts/mathjax_ams-regular.woff","site-lib/fonts/mathjax_calligraphic-regular.woff","site-lib/fonts/mathjax_calligraphic-bold.woff","site-lib/fonts/mathjax_fraktur-regular.woff","site-lib/fonts/mathjax_fraktur-bold.woff","site-lib/fonts/mathjax_sansserif-regular.woff","site-lib/fonts/mathjax_sansserif-bold.woff","site-lib/fonts/mathjax_sansserif-italic.woff","site-lib/fonts/mathjax_script-regular.woff","site-lib/fonts/mathjax_typewriter-regular.woff","site-lib/fonts/mathjax_vector-regular.woff","site-lib/fonts/mathjax_vector-bold.woff","site-lib/html/file-tree-content.html","site-lib/scripts/webpage.js","site-lib/scripts/graph-wasm.js","site-lib/scripts/graph-render-worker.js","site-lib/media/favicon.png","site-lib/styles/obsidian.css","site-lib/styles/global-variable-styles.css","site-lib/styles/main-styles.css"],"webpages":{"computer/computer-architecture/big-endian-and-little-endian.html":{"title":"Big Endian and Little Endian","icon":"","description":"All computers do not store the bytes that comprise a multi-byte value in the same order. Consider a 16-bit internet that is made up of 2 bytes. Two ways to store this value −\nLittle Endian − In this scheme, low-order byte is stored on the starting address (A) and high-order byte is stored on the next address (A + 1). make most sense from an addressing/computetational standpoint Big Endian − In this scheme, high-order byte is stored on the starting address (A) and low-order byte is stored on the next address (A + 1). make most sense to a human reader ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/computer-architecture/big-endian-and-little-endian.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741666,"modifiedTime":1678521506000,"sourceSize":583,"sourcePath":"Computer/Computer Architecture/Big Endian and Little Endian.md","exportPath":"computer/computer-architecture/big-endian-and-little-endian.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/computer-architecture/computer-architecture-(machine-structures).html":{"title":"Computer Architecture (Machine Structures)","icon":"","description":"\nKnow the tools of the trade – computers! “Computers” come in all shapes and sizes\nComputing achieved in many different ways nowadays Know when performance matters –Ex: taking advantage of parallelism Understand the differences between programming languages under the hood\nDesign large systems – abstraction in hardware\nSecurity\nDesign methodology – limitations and tradeoffs Abstraction <img src=\"https://i.imgur.com/0fHF2mQ.png\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\">\nTechnology Trends\n<br>Principle of Locality/Memory Hierarchy <img src=\"https://i.imgur.com/6PPSZR7.png\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\">\n<br>Parallelism <img src=\"https://i.imgur.com/0Iu6E6o.png\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\">\nPerformance Measurement &amp; Improvement\n<br>Dependability via Redundancy <img src=\"https://i.imgur.com/h2oYnQG.png\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\">\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Six Great Ideas in Computer Architecture","level":1,"id":"Six_Great_Ideas_in_Computer_Architecture_0"}],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/computer-architecture/computer-architecture-(machine-structures).html","pathToRoot":"../..","attachments":[],"createdTime":1717430741714,"modifiedTime":1677743425518,"sourceSize":768,"sourcePath":"Computer/Computer Architecture/Computer Architecture (Machine Structures).md","exportPath":"computer/computer-architecture/computer-architecture-(machine-structures).html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/computer-architecture/hex-and-decimal.html":{"title":"Hex and Decimal","icon":"","description":" i 余数\nj 商 = 0x800<img alt=\"Hex and Decimal-1701246586199.jpeg\" src=\"https://rinodg.pages.dev/assets/image/hex-and-decimal-1701246586199.jpeg\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"例子","level":2,"id":"例子_0"},{"heading":"Convert","level":1,"id":"Convert_0"}],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/computer-architecture/hex-and-decimal.html","pathToRoot":"../..","attachments":["assets/image/hex-and-decimal-1701246586199.jpeg"],"createdTime":1717430741658,"modifiedTime":1701246625000,"sourceSize":278,"sourcePath":"Computer/Computer Architecture/Hex and Decimal.md","exportPath":"computer/computer-architecture/hex-and-decimal.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/computer-architecture/整数表示.html":{"title":"整数表示","icon":"","description":" 无符号整数（Unsigned Integer）： 无符号整数只包含非负整数，不包括负数或零。\n在计算机中，无符号整数通常用二进制表示，可以直接对应非负的十进制整数。\n例如，8位无符号整数的范围是0到255（11111111二进制为255）。 有符号整数（Signed Integer）： 有符号整数包含正数、负数和零。\n通常使用其中一位来表示符号，而其他位表示数值。常见的表示方式有原码、反码和补码。 补码（Two's Complement）： <a data-href=\"补码\" href=\"https://rinodg.pages.dev/computer/computer-architecture/补码.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">补码</a>是计算机中表示有符号整数的常用方式。\n正数的补码与原码相同，负数的补码是其绝对值的二进制表示按位取反后加1。\n补码有一个优势，即加法和减法可以在不考虑符号位的情况下使用相同的硬件电路进行，简化了运算过程。 转换 扩展不会又精度损失\n缩小会对大的做取模运算 <br><a data-href=\"整数运算\" href=\"https://rinodg.pages.dev/computer/整数运算.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">整数运算</a>","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":["computer/computer-architecture/补码.html#_0","computer/整数运算.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/computer-architecture/整数表示.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741636,"modifiedTime":1701658013000,"sourceSize":1040,"sourcePath":"Computer/Computer Architecture/整数表示.md","exportPath":"computer/computer-architecture/整数表示.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/computer-architecture/补码.html":{"title":"补码","icon":"","description":"ChatGPT补码是一种用于在计算机中表示有符号整数的方式，其工作原理如下：\n正数的表示： 对于正整数，补码与二进制原码相同。\n例如，十进制数+5的二进制原码是00000101，它的补码也是00000101。 负数的表示： 对于负整数，补码的表示稍显复杂。\n负数的补码是其绝对值的二进制表示按位取反后加1。\n例如，十进制数-5的绝对值是5，其二进制表示是00000101，取反后得到11111010，然后再加1得到补码为11111011。\n最小的数为 1000000\n所有二进制数是1，表示 -1 加法操作： 补码的一个关键特性是，在加法运算中，无需特别处理符号位。正数和负数的加法使用相同的硬件电路。\n溢出时，溢出的位被丢弃，不会影响结果的正确性。 减法操作： 通过将减法转化为加法，补码简化了计算机中的减法运算。\n减法可以通过将减数的补码加到被减数的补码，再处理可能的溢出得到正确结果。 ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/computer-architecture/补码.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741884,"modifiedTime":1701253576000,"sourceSize":1153,"sourcePath":"Computer/Computer Architecture/补码.md","exportPath":"computer/computer-architecture/补码.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/computer-networking/anycast.html":{"title":"Anycast","icon":"","description":"Anycast 是另一种用于在计算机网络中发送数据的通信方法，与<a data-href=\"多播\" href=\"https://rinodg.pages.dev/computer/computer-networking/多播.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">多播</a>（Multicast）和<a data-href=\"广播\" href=\"https://rinodg.pages.dev/computer/computer-networking/广播.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">广播</a>（Broadcast）不同。以下是 Anycast 的详细解释及其与<a data-href=\"多播\" href=\"https://rinodg.pages.dev/computer/computer-networking/多播.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">多播</a>和<a data-href=\"广播\" href=\"https://rinodg.pages.dev/computer/computer-networking/广播.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">广播</a>的比较：\nAnycast发送范围：Anycast 是将数据包发送到多个可能的接收者中的一个，通常是离发送者最近的一个。它依赖于网络路由来决定哪个接收者将实际接收到数据包。目标：Anycast 的目标是一组设备中最优的一个接收者。多个设备共享一个 Anycast 地址，但只有一个设备会接收到每个数据包。使用场景：Anycast 常用于提高服务的可用性和性能，例如内容分发网络（CDN）、DNS 服务和负载均衡。它可以将用户请求引导到最近或最优的服务器节点。效率：Anycast 提高了网络服务的效率和可靠性，因为它可以自动将流量分配到最优的服务器，减少延迟并提高容错能力。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":["computer/computer-networking/多播.html#_0","computer/computer-networking/广播.html#_0","computer/computer-networking/多播.html#_0","computer/computer-networking/广播.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/computer-networking/anycast.html","pathToRoot":"../..","attachments":[],"createdTime":1717430740966,"modifiedTime":1717774862385,"sourceSize":961,"sourcePath":"Computer/Computer Networking/Anycast.md","exportPath":"computer/computer-networking/anycast.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/computer-networking/arp.html":{"title":"ARP","icon":"","description":"ARP（Address Resolution Protocol，地址解析协议）是用来将IP地址解析为MAC地址的协议。主机或三层网络设备上会维护一张ARP表，用于存储IP地址和MAC地址的映射关系，一般ARP表项包括动态ARP表项和静态ARP表项。<img alt=\"ARP-1678698919522.jpeg\" src=\"https://rinodg.pages.dev/assets/image/arp-1678698919522.jpeg\" target=\"_self\">\nARP协议是通过报文进行工作的，是一个独立的三层协议。当主机A要向主机B发送信息时，它首先查看自己的ARP缓存表，确定其中是否包含有主机B对应的ARP表项。如果找到了对应的MAC地址，则主机A直接利用ARP表中的MAC地址，对IP数据包进行帧封装，并将数据包发送给主机B。如果主机A在ARP表中找不到对应的MAC地址，则将缓存该数据报文，然后以广播方式发送一个ARP请求报文。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/computer-networking/arp.html","pathToRoot":"../..","attachments":["assets/image/arp-1678698919522.jpeg"],"createdTime":1717430741760,"modifiedTime":1678716088000,"sourceSize":792,"sourcePath":"Computer/Computer Networking/ARP.md","exportPath":"computer/computer-networking/arp.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/computer-networking/arq.html":{"title":"ARQ","icon":"","description":"自动重传请求（Automatic Repeat-reQuest，ARQ）是OSI模型中数据链路层和传输层的错误纠正协议之一。它通过使用确认和超时这两个机制，在不可靠服务的基础上实现可靠的信息传输。如果发送方在发送后一段时间之内没有收到确认帧，它通常会重新发送。ARQ可能包括停止等待ARQ协议和连续ARQ协议，错误检测（Error Detection）、正面确认（Positive Acknowledgment）、超时重传（Retransmission after Timeout）和 负面确认及重传（Negative Acknowledgment and Retransmission）等机制。停止并等待协议的工作原理如下：\n发送点对接收点发送数据包，然后等待接收点回复ACK并且开始计时。\n在等待过程中，发送点停止发送新的数据包。\n当数据包没有成功被接收点接收时候，接收点不会发送ACK。这样发送点在等待一定时间后，重新发送数据包。\n反复以上步骤直到收到从接收点发送的ACK。\n发送点的等待时间应当至少大于传输点数据包发送时间（数据包容量除以发送点传输速度），接收点ACK接收时间（ACK容量除以接收点传输速度），数据在连接上的传送时间，接收点检验接收数据是否正确的时间之和。在实际应用当中，等待时间是这个和的2到3倍。这个协议的缺点是较长的等待时间导致低的数据传输速度。在低速传输时，对连接频道的利用率比较好，但是在高速传输时，频道的利用率会显著下降。为了克服停止并等待ARQ协议长时间等待ACK的缺点。这个协议会连续发送一组数据包，然后再等待这些数据包的ACK。\n接收点丢弃从第一个没有收到的数据包开始的所有数据包。\n发送点收到NACK后，从NACK中指明的数据包开始重新发送。 发送点连续发送数据包但对每个数据包都设有个一个计时器。\n当在一定时间内没有收到某个数据包的ACK时，发送点只重新发送那个没有ACK的数据包。\nARQ协议对错误纠正的方法是：\n丢弃已经接收的含有错误的数据包。\n向发送点请求重新发送数据包。\nUMTS的ARQ机制是在<a data-tooltip-position=\"top\" aria-label=\"https://zh.wikipedia.org/wiki/%E5%9F%BA%E5%9C%B0%E5%8F%B0%E6%8E%A7%E5%88%B6%E7%AB%99\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" title=\"基地台控制站\" href=\"https://zh.wikipedia.org/wiki/%E5%9F%BA%E5%9C%B0%E5%8F%B0%E6%8E%A7%E5%88%B6%E7%AB%99\" target=\"_self\">基地台控制站</a>（Radio Network Controller，<a data-tooltip-position=\"top\" aria-label=\"https://zh.wikipedia.org/wiki/RNC\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" title=\"RNC\" href=\"https://zh.wikipedia.org/wiki/RNC\" target=\"_self\">RNC</a>），使用安置在协议数据单元（Protocol Data Unit，<a data-tooltip-position=\"top\" aria-label=\"https://zh.wikipedia.org/wiki/PDU\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" title=\"PDU\" href=\"https://zh.wikipedia.org/wiki/PDU\" target=\"_self\">PDU</a>）前的序号来作为是否有封包丢失的依据，有不少的延迟时间。<br>ARQ协议的优点是它非常的简单。因而被广泛的应用在<a data-tooltip-position=\"top\" aria-label=\"https://zh.wikipedia.org/wiki/%E5%88%86%E7%BB%84%E4%BA%A4%E6%8D%A2\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" title=\"分组交换\" href=\"https://zh.wikipedia.org/wiki/%E5%88%86%E7%BB%84%E4%BA%A4%E6%8D%A2\" target=\"_self\">分组交换</a>网络中。ARQ协议的缺点是需要接收方发送ACK，这样增加了网络的负担也影响了传输速度。重复发送数据包来纠正错误的方法也严重的影响了它的传输速度。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"停止并等待ARQ协议（stop-and-wait)","level":2,"id":"停止并等待ARQ协议（stop-and-wait)_0"},{"heading":"连续ARQ协议（Continuous ARQ）","level":2,"id":"连续ARQ协议（Continuous_ARQ）_0"},{"heading":"回退N重传(Go-Back-N)\\","level":3,"id":"回退N重传(Go-Back-N)\\_0"},{"heading":"选择重传(Selective Repeat)","level":3,"id":"选择重传(Selective_Repeat)_0"},{"heading":"方法","level":2,"id":"方法_0"},{"heading":"应用","level":2,"id":"应用_0"},{"heading":"优点和缺点","level":2,"id":"优点和缺点_0"}],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/computer-networking/arq.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741651,"modifiedTime":1677833605679,"sourceSize":3222,"sourcePath":"Computer/Computer Networking/ARQ.md","exportPath":"computer/computer-networking/arq.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/computer-networking/bridge.html":{"title":"bridge","icon":"","description":"将虚拟网卡和物理网卡连接到一个虚拟交换机上，使它们可以在同一个网络层次上通信。\n使虚拟网卡和物理网卡有相同的MAC地址，支持MAC层广播。\n使虚拟网卡和物理网卡互相独立的IP，物理网卡监听这些IP。使用虚拟机软件，如VirtualBox，需要让虚拟机和主机在同一个网络层次上通信。\n使用虚拟化桌面，需要让虚拟机和主机互相独立的IP。\n使用Linux网络适配器，需要让虚拟网卡和物理网卡相互可以ping通。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/computer-networking/bridge.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741314,"modifiedTime":1678465106000,"sourceSize":538,"sourcePath":"Computer/Computer Networking/bridge.md","exportPath":"computer/computer-networking/bridge.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/computer-networking/cidr.html":{"title":"CIDR","icon":"","description":"","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/computer-networking/cidr.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741819,"modifiedTime":1678695032000,"sourceSize":0,"sourcePath":"Computer/Computer Networking/CIDR.md","exportPath":"computer/computer-networking/cidr.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/computer-networking/computer-networking.html":{"title":"Computer Networking","icon":"","description":"<a data-href=\"Internet Protocol\" href=\"https://rinodg.pages.dev/computer/computer-networking/internet-protocol.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Internet Protocol</a><br>\n<a data-href=\"TCP\" href=\"https://rinodg.pages.dev/computer/computer-networking/tcp.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">TCP</a><br>\n<a data-href=\"Packet Switching\" href=\"https://rinodg.pages.dev/computer/computer-networking/packet-switching.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Packet Switching</a><br>learned to <a data-href=\"Encapsulation\" href=\"https://rinodg.pages.dev/computer/computer-networking/encapsulation.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Encapsulation</a>","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":["computer/computer-networking/internet-protocol.html#_0","computer/computer-networking/tcp.html#_0","computer/computer-networking/packet-switching.html#_0","computer/computer-networking/encapsulation.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/computer-networking/computer-networking.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741705,"modifiedTime":1677854243014,"sourceSize":80,"sourcePath":"Computer/Computer Networking/Computer Networking.md","exportPath":"computer/computer-networking/computer-networking.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/computer-networking/cs144.html":{"title":"CS144","icon":"","description":"","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/computer-networking/cs144.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741677,"modifiedTime":1677839211437,"sourceSize":0,"sourcePath":"Computer/Computer Networking/CS144.md","exportPath":"computer/computer-networking/cs144.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/computer-networking/cs144-lab0.html":{"title":"cs144 lab0","icon":"","description":"\nIn one terminal window, run netcat -v -l -p 9090 on your VM. You should see:\nuser@computer:~$ netcat -v -l -p 9090\nListening on [0.0.0.0] (family 0, port 9090) Leave netcat running. In another terminal window, run telnet localhost 9090 (also on your VM).\nIf all goes well, the netcat will have printed something like “Connection from localhost 53500 received!”.\nWhen telnet is closed, netcat will also be closed.A receiver and a sender, which can be used to chat .In reality, however, the Internet doesn’t provide a service of reliable byte-streams. Instead, the only thing the Internet really does is to give its “best effort” to deliver short pieces of data, called Internet datagrams, to their destination. Each datagram contains some metadata (headers) that specifies things like the source and destination addresses—what computer it came from, and what computer it’s headed towards—as well as some payload data (up to about 1,500 bytes) to be delivered to the destination computer.\n路由器中的 1492??Although the network tries to deliver every datagram, in practice datagrams can be (1) lost, (2) delivered out of order, (3) delivered with the contents altered, or even (4) duplicated and delivered more than once. It’s normally the job of the operating systems on either end of the connection to turn “best-effort datagrams” (the abstraction the Internet provides) into “<a data-href=\"reliable byte stream\" href=\"https://rinodg.pages.dev/computer/computer-networking/reliable-byte-stream.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">reliable byte stream</a>s” (the abstraction that applications usually want)","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":["computer/computer-networking/reliable-byte-stream.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/computer-networking/cs144-lab0.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741843,"modifiedTime":1677834099442,"sourceSize":1518,"sourcePath":"Computer/Computer Networking/cs144 lab0.md","exportPath":"computer/computer-networking/cs144-lab0.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/computer-networking/cs144-lab1.html":{"title":"CS144 lab1","icon":"","description":"StreamReassembler我为什么要这样做？在不同的不太可靠的服务之上提供服务或抽象是网络中许多有趣问题的原因。在过去的 40 年里，研究人员和从业者已经弄清楚了如何通过 Internet 传递各种信息——消息和电子邮件、超链接文档、搜索引擎、声音和视频、虚拟世界、协作文件共享、数字货币。 TCP 自身的作用，即使用不可靠的数据报提供一对可靠的字节流，就是这方面的经典示例之一。一个合理的观点是，TCP 实现算作地球上使用最广泛的非平凡计算机程序。实验室作业将要求您以模块化方式构建 TCP 实现。还记得您刚刚在 Lab 0 中实现的 ByteStream 吗？在接下来的四个实验中，您将最终通过网络传送其中两个：一个“出站”字节流，用于本地应用程序写入套接字并且您的 TCP 将发送给对等点的数据，以及一个“入站” ByteStream 用于来自对等点的数据，将由本地应用程序读取。图 1 显示了各个部分如何组合在一起The TCP sender is dividing its byte stream up into short segments (substrings no more than about 1,460 bytes apiece) so that they each fit inside a datagram. But the network might reorder these datagrams, or drop them, or deliver them more than once. The receiver must reassemble the segments into the contiguous stream of bytes that they started out as在本实验中，您将编写负责此重组的数据结构：StreamReassembler。它将接收子字符串，由字节字符串和较大流中该字符串的第一个字节的索引组成。流的每个字节都有自己唯一的索引，Each byte of the stream has its own unique index，从零开始向上计数。 StreamReassembler 将拥有一个用于输出的 ByteStream：一旦重组器知道流的下一个字节，它就会将其写入 ByteStream。所有者可以随时访问和读取 ByteStream。\n<img alt=\"CS144 lab1-1677946921891.jpeg\" src=\"https://rinodg.pages.dev/assets/image/cs144-lab1-1677946921891.jpeg\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/computer-networking/cs144-lab1.html","pathToRoot":"../..","attachments":["assets/image/cs144-lab1-1677946921891.jpeg"],"createdTime":1717430741049,"modifiedTime":1677946927250,"sourceSize":1985,"sourcePath":"Computer/Computer Networking/CS144 lab1.md","exportPath":"computer/computer-networking/cs144-lab1.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/computer-networking/encapsulation.html":{"title":"Encapsulation","icon":"","description":"<img alt=\"Encapsulation (networking)-1677852705096.jpeg\" src=\"https://rinodg.pages.dev/assets/image/encapsulation-(networking)-1677852705096.jpeg\" target=\"_self\">\n在计算机网络中，封装是一种设计模块化通信协议的方法，其中通过包含或信息隐藏在更高级别的对象中，将网络中逻辑上分离的功能从其底层结构中抽象出来。换句话说，封装“从更高层获取信息并向其添加标头，将更高层信息视为数据”。<br>\n<img alt=\"Encapsulation-1677852825322.jpeg\" src=\"https://rinodg.pages.dev/assets/image/encapsulation-1677852825322.jpeg\" target=\"_self\">\nin hardware, first bit on right<br><img alt=\"Encapsulation-1677853941070.jpeg\" src=\"https://rinodg.pages.dev/assets/image/encapsulation-1677853941070.jpeg\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/computer-networking/encapsulation.html","pathToRoot":"../..","attachments":["assets/image/encapsulation-(networking)-1677852705096.jpeg","assets/image/encapsulation-1677852825322.jpeg","assets/image/encapsulation-1677853941070.jpeg"],"createdTime":1717430741826,"modifiedTime":1677853941888,"sourceSize":482,"sourcePath":"Computer/Computer Networking/Encapsulation.md","exportPath":"computer/computer-networking/encapsulation.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/computer-networking/etag.html":{"title":"ETag","icon":"","description":"ETag或实体标签（entity tag）是万维网协议HTTP的一部分。ETag是HTTP协议提供的若干机制中的一种Web缓存验证机制，并且允许客户端进行缓存协商。这就使得缓存变得更加高效，而且节省带宽。如果资源的内容没有发生改变，Web服务器就不需要发送一个完整的响应。ETag也可用于乐观并发控制，作为一种防止资源同步更新而相互覆盖的方法。ETag是一个不透明的标识符，由Web服务器根据URL上的资源的特定版本而指定。如果那个URL上的资源内容改变，一个新的不一样的ETag就会被分配。用这种方法使用ETag即类似于指纹，并且他们能够被快速地被比较，以确定两个版本的资源是否相同。ETag的比较只对同一个URL有意义——不同URL上的资源的ETag值可能相同也可能不同，从他们的ETag的比较中无从推断。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/computer-networking/etag.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741761,"modifiedTime":1677832424230,"sourceSize":920,"sourcePath":"Computer/Computer Networking/ETag.md","exportPath":"computer/computer-networking/etag.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/computer-networking/forwarding-information-base.html":{"title":"Forwarding information base","icon":"","description":"转发信息库 (forwarding information base, FIB)，也称为转发表或 MAC 表，最常用于网络桥接、路由和类似功能，以找到输入接口应将数据包转发到的正确输出网卡。它是一个将 MAC 地址映射到端口的动态表。它是将网络交换机与集线器分开的基本机制。内容可寻址存储器(CAM) 通常用于高效地实现 FIB，因此有时也称为 CAM 表。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/computer-networking/forwarding-information-base.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741105,"modifiedTime":1678693969000,"sourceSize":419,"sourcePath":"Computer/Computer Networking/Forwarding information base.md","exportPath":"computer/computer-networking/forwarding-information-base.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/computer-networking/ice.html":{"title":"ICE","icon":"","description":"交互式连接创建（Interactive Connectivity Establishment），一种综合性的NAT穿越的技术。交互式连接创建是由IETF的MMUSIC工作组开发出来的一种framework，可集成各种NAT穿透技术，如STUN、TURN（Traversal Using Relay NAT，中继NAT实现的穿透）、RSIP（Realm Specific IP，特定域IP）等。该framework可以让SIP的客户端利用各种NAT穿透方式打穿远程的防火墙。 <a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Protocols\" target=\"_self\">https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Protocols</a> ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/computer-networking/ice.html","pathToRoot":"../..","attachments":[],"createdTime":1717430740971,"modifiedTime":1678802024000,"sourceSize":510,"sourcePath":"Computer/Computer Networking/ICE.md","exportPath":"computer/computer-networking/ice.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/computer-networking/internet-protocol.html":{"title":"Internet Protocol","icon":"","description":"<img alt=\"Internet Protocol-1677847475053.jpeg\" src=\"https://rinodg.pages.dev/assets/image/internet-protocol-1677847475053.jpeg\" target=\"_self\"> <a data-href=\"IPv4\" href=\"https://rinodg.pages.dev/computer/computer-networking/ipv4.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">IPv4</a>\nWe must use the Internet Protocol(IP)\nIP makes a best-effort attempt to deliver our datagrams to the other end. But it makes no promises.\nIP datagrams can get lost, can be delivered out of order, and can be corrupted. There are no guarantees.\nIP service is so simple\nsimple dumb and minimal Faster, more streamlined and lower cost to build and maintain. the end-to-end principle Where possible, implement features in the end hosts. <br>Tries to prevent <a data-href=\"packet\" href=\"https://rinodg.pages.dev/computer/computer-networking/packet.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">packet</a> looping forever.(TTL)\n<br>Will fragment <a data-href=\"packet\" href=\"https://rinodg.pages.dev/computer/computer-networking/packet.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">packet</a> if they too long.(<a data-href=\"MTU\" href=\"https://rinodg.pages.dev/computer/computer-networking/mtu.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">MTU</a>)\nUses a header checksum to reduce chances of delivering datagram to wrong destination\nAllows for new versions of IP(v4 and v6)\nAllows fro new options to be added to header\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Model","level":2,"id":"Model_0"}],"links":["computer/computer-networking/ipv4.html#_0","computer/computer-networking/packet.html#_0","computer/computer-networking/packet.html#_0","computer/computer-networking/mtu.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/computer-networking/internet-protocol.html","pathToRoot":"../..","attachments":["assets/image/internet-protocol-1677847475053.jpeg"],"createdTime":1717430741843,"modifiedTime":1678802036000,"sourceSize":797,"sourcePath":"Computer/Computer Networking/Internet Protocol.md","exportPath":"computer/computer-networking/internet-protocol.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/computer-networking/ipsec.html":{"title":"IPsec","icon":"","description":"IPsec（Internet Protocol Security）是一套用于确保通过互联网协议（IP）进行通信的网络安全协议。它通过加密和认证机制来保护数据的机密性、完整性和真实性，从而确保数据在网络上传输时的安全。IPsec 是一种通用的安全协议，广泛应用于虚拟专用网络（VPN）和其他需要安全通信的网络服务。\n数据加密：通过加密确保数据的机密性，使得未经授权的用户无法读取数据。\n数据完整性：通过哈希函数确保数据在传输过程中没有被篡改。\n数据认证：验证数据发送者的身份，确保数据来自合法的发送者。\n防重放攻击：通过序列号和时间戳防止数据包被截获并重发。\nIPsec 由两部分组成：安全协议和密钥管理协议。\nAH（Authentication Header）： 提供数据完整性和认证，但不提供加密。\n确保数据未被篡改，并验证数据的来源。 ESP（Encapsulating Security Payload）： 提供数据加密、数据完整性和认证。\n比 AH 更常用，因为它提供更全面的安全功能。 IKE（Internet Key Exchange）： 用于在通信双方之间建立和管理安全关联（SA）。\n负责生成和交换密钥，并协商加密和认证算法。 IPsec 可以在两种模式下工作：传输模式和隧道模式。 传输模式（Transport Mode）： 仅对 IP 数据包的有效负载进行加密和认证。\n通常用于终端到终端的通信，如主机到主机之间的通信。 隧道模式（Tunnel Mode）： 对整个 IP 数据包进行加密和认证，然后封装在一个新的 IP 数据包中。\n常用于网关到网关的通信，如两个网络之间的 VPN。 VPN（虚拟专用网络）：通过加密隧道在公共网络上建立安全的私有通信通道。\n远程访问：确保远程用户安全地访问企业内部网络。\n安全路由：保护路由器之间的通信，防止路由信息被篡改或窃取。\n企业网络安全：保护企业内部和外部网络的通信，防止数据泄露和攻击。\nIPsec 是一种强大的网络安全协议，通过提供加密、认证和完整性保护来确保数据在网络上传输时的安全。它广泛应用于各种需要安全通信的场景，尤其是在构建 VPN 和保护企业网络通信方面。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"IPsec 的主要功能","level":3,"id":"IPsec_的主要功能_0"},{"heading":"IPsec 的组成部分","level":3,"id":"IPsec_的组成部分_0"},{"heading":"安全协议","level":4,"id":"安全协议_0"},{"heading":"密钥管理协议","level":4,"id":"密钥管理协议_0"},{"heading":"IPsec 的工作模式","level":3,"id":"IPsec_的工作模式_0"},{"heading":"IPsec 的应用场景","level":3,"id":"IPsec_的应用场景_0"},{"heading":"总结","level":3,"id":"总结_0"}],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/computer-networking/ipsec.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741871,"modifiedTime":1717774749259,"sourceSize":2623,"sourcePath":"Computer/Computer Networking/IPsec.md","exportPath":"computer/computer-networking/ipsec.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/computer-networking/ipv4.html":{"title":"IPv4","icon":"","description":"<a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://zh.wikipedia.org/wiki/IPv4\" target=\"_self\">https://zh.wikipedia.org/wiki/IPv4</a>\n网络编码是一种通过中继节点对接收到的信息进行编码来达到提高多播网络容量的技术。Rudolf Ahlswede, Ning Cai, Shuo-Yen Robert Li, Raymond W. Yeung[1]在2000年首次提出网络编码的概念。<br><a data-href=\"网络掩码\" href=\"https://rinodg.pages.dev/computer/computer-networking/网络掩码.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">网络掩码</a>告诉你哪个 IP地址是同一网络中同一链路上的本地地址，","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":["computer/computer-networking/网络掩码.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/computer-networking/ipv4.html","pathToRoot":"../..","attachments":[],"createdTime":1717430740979,"modifiedTime":1677855113404,"sourceSize":360,"sourcePath":"Computer/Computer Networking/IPv4.md","exportPath":"computer/computer-networking/ipv4.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/computer-networking/longest-prefix-match.html":{"title":"Longest prefix match","icon":"","description":"Algorithm IP routers use to chose matching entry from <a data-tooltip-position=\"top\" aria-label=\"Forwarding information base\" data-href=\"Forwarding information base\" href=\"https://rinodg.pages.dev/computer/computer-networking/forwarding-information-base.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">forwarding table</a>\n<br>Forwarding table is a set of <a data-href=\"CIDR\" href=\"https://rinodg.pages.dev/computer/computer-networking/cidr.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">CIDR</a> entries An address might match multiple entries\nE.g. 171.33.0.1 matches both entries on right • Algorithm: use forwarding entry with the longest matching prefix Longest prefix match will chose link 5 for 171.33.0.1 ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":["computer/computer-networking/forwarding-information-base.html#_0","computer/computer-networking/cidr.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/computer-networking/longest-prefix-match.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741733,"modifiedTime":1678695031000,"sourceSize":372,"sourcePath":"Computer/Computer Networking/Longest prefix match.md","exportPath":"computer/computer-networking/longest-prefix-match.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/computer-networking/mtu.html":{"title":"MTU","icon":"","description":"","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/computer-networking/mtu.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741870,"modifiedTime":1678518643000,"sourceSize":0,"sourcePath":"Computer/Computer Networking/MTU.md","exportPath":"computer/computer-networking/mtu.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/computer-networking/packet.html":{"title":"packet","icon":"","description":"network layer packets are called datagrams hey consist of some data and a header containing the to and from addresses","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/computer-networking/packet.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741627,"modifiedTime":1677839444735,"sourceSize":118,"sourcePath":"Computer/Computer Networking/packet.md","exportPath":"computer/computer-networking/packet.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/computer-networking/packet-switching.html":{"title":"Packet Switching","icon":"","description":"在计算机网络和通讯中，分组交换（英语：<a data-href=\"packet\" href=\"https://rinodg.pages.dev/computer/computer-networking/packet.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">packet</a> switching）是一种相对于电路交换的通信范例，分组（又称消息、或消息碎片）在节点间单独路由，不需要在传输前先建立通信路径。分组交换是数据通信中一种新的且重要的概念，现在是世界上互联网通讯、数据和语音通信中最重要的基础。在此之前，数据通信是基于电路交换的想法，就像在传统的电话电路一样，在通话前先建立专有线路，通信双方要在电路的两端。分组交换技术是在1960年代末出现的，当时美国高级研究计划局（简称ARPA）为实现远程计算机之间的信息交换，资助建设一个试验性的网络，该网络被称为ARPANET。ARPANET的主要研究成果之一就是开发一种新的网络协议，在ARPANET网络上对话必须使用这种网络协议。该协议采用一种新的网络信息传输技术，这就是分组交换技术。分组是由一块用户数据和必要的地址和管理信息组成，保证网络能够将数据传递到目标。类似于从邮局发送的包裹上注明的地址一样,只有提供给网络这些信息，网络（邮局）才能把分组（包裹）往正确的地址传送。<br>分组通过最佳路径（取决于 <a data-tooltip-position=\"top\" aria-label=\"https://zh.wikipedia.org/w/index.php?title=%E8%B7%AF%E7%94%B1%E7%AE%97%E6%B3%95&amp;action=edit&amp;redlink=1\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" title=\"路由算法（页面不存在）\" href=\"https://zh.wikipedia.org/w/index.php?title=%E8%B7%AF%E7%94%B1%E7%AE%97%E6%B3%95&amp;action=edit&amp;redlink=1\" target=\"_self\">路由算法</a>）路由到目标。但并不是所有在相同两个主机之间传送的分组（即使是来自同一消息的那些分组）一定要沿着相同的路径传送。switches focus on doing just one thing forwarding packets quickly and efficientlyswitches don't have to worry about failures","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":["computer/computer-networking/packet.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/computer-networking/packet-switching.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741859,"modifiedTime":1732664748630,"sourceSize":1766,"sourcePath":"Computer/Computer Networking/Packet Switching.md","exportPath":"computer/computer-networking/packet-switching.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/computer-networking/ptr-record.html":{"title":"PTR Record","icon":"","description":"The Pointer Record\nThe Pointer (PTR) record allows you to perform a reverse lookup by accepting an IP address and returning its corresponding domain name. Listing 2-6 shows the reverse lookup for 8.8.4.4.$ dig 4.4.8.8.in-addr.arpa. ptr\n;QUESTION\n1 4.4.8.8.in-addr.arpa. IN PTR\n;ANSWER\n4.4.8.8.in-addr.arpa. 21599 IN PTR 2google-public-dns-b.google.com.\n-- snip --\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/computer-networking/ptr-record.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741687,"modifiedTime":1716883955706,"sourceSize":375,"sourcePath":"Computer/Computer Networking/PTR Record.md","exportPath":"computer/computer-networking/ptr-record.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/computer-networking/reliable-byte-stream.html":{"title":"reliable byte stream","icon":"","description":"A reliable byte stream is a common service paradigm in computer networking; it refers to a byte stream in which the bytes which emerge from the communication channel at the recipient are exactly the same, and in exactly the same order, as they were when the sender inserted them into the channel.可靠字节流是一种常见的计算机网络服务示例；它代表一个字节流，其中从通信频道内传给接收者的每个字节，都与发送者传进频道内的每个字节相同，并且顺序也相同（亦即没有任何资料重置或损失）。可靠字节流网络传输协议的一个经典示例是传输控制协议（TCP），互联网的其中一个重要基石。然而，可靠字节流并不是唯一的可靠传输协议示例；其他协议（像是SCTP）提供的是可靠信息流，其定义是里面的资料会被分成独立的小单位，用类似独立对象的概念提供给用户。对实做可靠字节流的传输协议，一般会使用一些并不可靠的低端传输，然后使用一些机制来提升可靠性。在提升可靠性上，<a data-href=\"ARQ\" href=\"https://rinodg.pages.dev/computer/computer-networking/arq.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">ARQ</a>协议扮演了一个非常重要的角色。所有的资料都以一个序号作认证，这是用来确保资料是以正确的顺序传给另一端的用户，以及用来检查失去的资料是哪些。接收者会在成功收到资料后回传一个确认通知（ACK）；如果没有在合理的回传时间内接收到确认通知，发送者的一个计时器会丢出超时信号，然后这个（我们认定已经失去的）资料会被重传。校验和（checksum）会在检查资料有否损毁时使用；在发送者传输任何资料区块时，会先计算好校验和，然后传给接收者用来确认。错误或者丧失的资料会回传给接收者，以让接收者稍候可以重传一份资料。任何多余的重复资料都会被丢弃。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"机制","level":1,"id":"机制_0"}],"links":["computer/computer-networking/arq.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/computer-networking/reliable-byte-stream.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741780,"modifiedTime":1677833478728,"sourceSize":1889,"sourcePath":"Computer/Computer Networking/reliable byte stream.md","exportPath":"computer/computer-networking/reliable-byte-stream.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/computer-networking/tcp.html":{"title":"TCP","icon":"","description":"The most common transport layer is TCP or the transmission control protocol.TCP's job is to make sure that the data sent by an application at one end of the internet is correctly differ delivered in the right order to the application at the other end of the internet.\nIf the network layers drop some datagrams TCP will transmit them multiple times.The two computers have to cooperate to make sure that each byte in the stream eventually gets delivered, in its proper place in line, to the stream socket on the other side. They also have to tell each other how much data they are prepared to accept from the other computer, and make sure not to send more than the other side is willing to accept. All this is done using an agreed-upon scheme that was set down in 1981, called the Transmission Control Protocol, or TCP.（或称三路握手，three-way handshake）过程创建一个连接。在连接创建过程中，很多参数要被初始化，例如序号被初始化以保证按序传输和连接的强壮性。TCP连接的正常创建\n一对终端同时初始化一个它们之间的连接是可能的。但通常是由一端（服务器端）打开一个套接字（socket）然后监听来自另一方（客户端）的连接，这就是通常所指的被动打开（passive open）。服务器端被被动打开以后，客户端就能开始创建主动打开（active open）。服务器端执行了listen函数后，就在服务器上创建起两个队列：SYN队列：存放完成了二次握手的结果。 队列长度由listen函数的参数backlog指定。\nACCEPT队列：存放完成了<a data-href=\"三次握手\" href=\"https://rinodg.pages.dev/computer/computer-networking/三次握手.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">三次握手</a>的结果。队列长度由listen函数的参数backlog指定。<br><img alt=\"2023-03-17_17-11.webp\" src=\"https://rinodg.pages.dev/assets/2023-03-17_17-11.webp\" target=\"_self\"><br>ref <a data-href=\"udp\" href=\"https://rinodg.pages.dev/computer/computer-networking/udp.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">udp</a><br><a data-href=\"Window Sizes\" href=\"https://rinodg.pages.dev/computer/computer-networking/window-sizes.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Window Sizes</a><br><a data-href=\"关闭连接\" href=\"https://rinodg.pages.dev/computer/computer-networking/关闭连接.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">关闭连接</a>","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"TCP用<a data-href=\"三次握手\" href=\"三次握手\" class=\"internal-link\" target=\"_blank\" rel=\"noopener nofollow\">三次握手</a>","level":2,"id":"TCP用[[三次握手]]_0"}],"links":["computer/computer-networking/三次握手.html#_0","computer/computer-networking/三次握手.html#_0","computer/computer-networking/udp.html#_0","computer/computer-networking/window-sizes.html#_0","computer/computer-networking/关闭连接.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/computer-networking/tcp.html","pathToRoot":"../..","attachments":["assets/2023-03-17_17-11.webp"],"createdTime":1717430741463,"modifiedTime":1717774712617,"sourceSize":1801,"sourcePath":"Computer/Computer Networking/TCP.md","exportPath":"computer/computer-networking/tcp.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/computer-networking/the-4-layer-internet-model.html":{"title":"the 4 layer internet model","icon":"","description":"<img alt=\"the 4 layer internet model-1677839765520.jpeg\" src=\"https://rinodg.pages.dev/assets/image/the-4-layer-internet-model-1677839765520.jpeg\" target=\"_self\"><br><img alt=\"the 4 layer internet model-1677841182979.jpeg\" src=\"https://rinodg.pages.dev/assets/image/the-4-layer-internet-model-1677841182979.jpeg\" target=\"_self\"><br><img alt=\"the 4 layer internet model-1677841972147.jpeg\" src=\"https://rinodg.pages.dev/assets/image/the-4-layer-internet-model-1677841972147.jpeg\" target=\"_self\">\n7-layer OSI Model has been replaced by four layer model.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/computer-networking/the-4-layer-internet-model.html","pathToRoot":"../..","attachments":["assets/image/the-4-layer-internet-model-1677839765520.jpeg","assets/image/the-4-layer-internet-model-1677841182979.jpeg","assets/image/the-4-layer-internet-model-1677841972147.jpeg"],"createdTime":1717430741657,"modifiedTime":1677841976019,"sourceSize":213,"sourcePath":"Computer/Computer Networking/the 4 layer internet model.md","exportPath":"computer/computer-networking/the-4-layer-internet-model.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/computer-networking/tun-and-tap.html":{"title":"TUN and TAP","icon":"","description":"In <a data-tooltip-position=\"top\" aria-label=\"https://en.wikipedia.org/wiki/Computer_networking\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" title=\"Computer networking\" href=\"https://en.wikipedia.org/wiki/Computer_networking\" target=\"_self\">computer networking</a>, TUN and TAP are <a data-tooltip-position=\"top\" aria-label=\"https://en.wikipedia.org/wiki/Kernel_(computer_science)\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" title=\"Kernel (computer science)\" href=\"https://en.wikipedia.org/wiki/Kernel_(computer_science)\" target=\"_self\">kernel</a> <a data-tooltip-position=\"top\" aria-label=\"https://en.wikipedia.org/wiki/Virtual_network\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" title=\"Virtual network\" href=\"https://en.wikipedia.org/wiki/Virtual_network\" target=\"_self\">virtual network</a> devices. Being network devices supported entirely in software, they differ from ordinary network devices which are backed by physical <a data-tooltip-position=\"top\" aria-label=\"https://en.wikipedia.org/wiki/Network_adapter\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" title=\"Network adapter\" href=\"https://en.wikipedia.org/wiki/Network_adapter\" target=\"_self\">network adapters</a>.<br><img alt=\"TUN TAP-1678176253048.jpeg\" src=\"https://rinodg.pages.dev/assets/image/tun-tap-1678176253048.jpeg\" target=\"_self\">TUN无法与物理网卡做bridge，也没有MAC地址，但是可以通过三层交换与物理网卡连通。<br>\nTAP可以与物理网卡做<a data-href=\"bridge\" href=\"https://rinodg.pages.dev/computer/computer-networking/bridge.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">bridge</a>，也有MAC地址，但是需要更多的资源和开销。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":["computer/computer-networking/bridge.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/computer-networking/tun-and-tap.html","pathToRoot":"../..","attachments":["assets/image/tun-tap-1678176253048.jpeg"],"createdTime":1717430741476,"modifiedTime":1678772056000,"sourceSize":763,"sourcePath":"Computer/Computer Networking/TUN and TAP.md","exportPath":"computer/computer-networking/tun-and-tap.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/computer-networking/udp.html":{"title":"udp","icon":"","description":"udp is an alternative transport layer that bundles up application data and hands it to the network layer for delivery to the other endhands it to the network layer for delivery to the other end. udp offers no delivery guarantees at all.<img alt=\"udp-1679050115511.jpeg\" src=\"https://rinodg.pages.dev/assets/image/udp-1679050115511.jpeg\" target=\"_self\"><br><img alt=\"udp-1679051130778.jpeg\" src=\"https://rinodg.pages.dev/assets/image/udp-1679051130778.jpeg\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/computer-networking/udp.html","pathToRoot":"../..","attachments":["assets/image/udp-1679050115511.jpeg","assets/image/udp-1679051130778.jpeg"],"createdTime":1717430741690,"modifiedTime":1679051136000,"sourceSize":296,"sourcePath":"Computer/Computer Networking/udp.md","exportPath":"computer/computer-networking/udp.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/computer-networking/underline-in-c++.html":{"title":"underline in c++","icon":"","description":"<a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.doc.ic.ac.uk/lab/cplus/c++.rules/chap5.html\" target=\"_self\">https://www.doc.ic.ac.uk/lab/cplus/c++.rules/chap5.html</a>\nThe use of two underscores ( _ ) in identifiers is reserved for the compiler's internal use according to the ANSI-C standard.\nUnderscores ( ) are often used in names of library functions (such as \"_main\" and \"_exit\"). In order to avoid collisions, do not begin an identifier with an underscore.\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/computer-networking/underline-in-c++.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741595,"modifiedTime":1677993028778,"sourceSize":358,"sourcePath":"Computer/Computer Networking/underline in c++.md","exportPath":"computer/computer-networking/underline-in-c++.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/computer-networking/window-sizes.html":{"title":"Window Sizes","icon":"","description":"发送方要知道接收方的 window 大小","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/computer-networking/window-sizes.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741655,"modifiedTime":1716887151883,"sourceSize":45,"sourcePath":"Computer/Computer Networking/Window Sizes.md","exportPath":"computer/computer-networking/window-sizes.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/computer-networking/三次握手.html":{"title":"三次握手","icon":"","description":"三次握手协议的过程：\n客户端（通过执行connect函数）向服务器端发送一个SYN包，请求一个主动打开。该包携带客户端为这个连接请求而设定的随机数A作为消息序列号。\n服务器端收到一个合法的SYN包后，把该包放入SYN队列中；回送一个SYN/ACK。ACK的确认码应为A+1，SYN/ACK包本身携带一个随机产生的序号B。\n客户端收到SYN/ACK包后，发送一个ACK包，该包的序号被设定为A+1，而ACK的确认码则为B+1。然后客户端的connect函数成功返回。当服务器端收到这个ACK包的时候，把请求帧从SYN队列中移出，放至ACCEPT队列中；这时accept函数如果处于阻塞状态，可以被唤醒，从ACCEPT队列中取出ACK包，重新创建一个新的用于双向通信的sockfd，并返回。\n<img alt=\"2023-03-17_16-12.webp\" src=\"https://rinodg.pages.dev/assets/2023-03-17_16-12.webp\" target=\"_self\">\n如果服务器端接到了客户端发的SYN后回了SYN-ACK后客户端掉线了，服务器端没有收到客户端回来的ACK，那么，这个连接处于一个中间状态，既没成功，也没失败。于是，服务器端如果在一定时间内没有收到的TCP会重发SYN-ACK。在Linux下，默认重试次数为5次，重试的间隔时间从1s开始每次都翻倍，5次的重试时间间隔为1s, 2s, 4s, 8s, 16s，总共31s，第5次发出后还要等32s才知道第5次也超时了，所以，总共需要 1s + 2s + 4s+ 8s+ 16s + 32s = 63s，TCP才会断开这个连接。使用三个TCP参数来调整行为：tcp_synack_retries 减少重试次数；tcp_max_syn_backlog，增大SYN连接数；tcp_abort_on_overflow决定超出能力时的行为。“三次握手”的目的是“为了防止已失效的连接(connect)请求报文段传送到了服务端，因而产生错误”，也即为了解决“网络中存在延迟的重复分组”问题。例如：client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client发出的一个新的连接请求。于是就向client发出确认报文段，同意创建连接。假设不采用“三次握手”，那么只要server发出确认，新的连接就创建了。由于现在client并没有发出创建连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经创建，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求创建连接","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/computer-networking/三次握手.html","pathToRoot":"../..","attachments":["assets/2023-03-17_16-12.webp"],"createdTime":1717430741546,"modifiedTime":1716887308939,"sourceSize":2795,"sourcePath":"Computer/Computer Networking/三次握手.md","exportPath":"computer/computer-networking/三次握手.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/computer-networking/关闭连接.html":{"title":"关闭连接","icon":"","description":"<img alt=\"Pasted image 20240528170902.png\" src=\"https://rinodg.pages.dev/assets/pasted-image-20240528170902.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/computer-networking/关闭连接.html","pathToRoot":"../..","attachments":["assets/pasted-image-20240528170902.png"],"createdTime":1717430740995,"modifiedTime":1716887344229,"sourceSize":37,"sourcePath":"Computer/Computer Networking/关闭连接.md","exportPath":"computer/computer-networking/关闭连接.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/computer-networking/多播.html":{"title":"多播","icon":"","description":"发送范围：多播是将数据包发送到一组特定的设备，而不是所有设备。这些设备订阅了一个特定的多播组，只有订阅了该组的设备才能接收到数据包。\n目标：多播的目标是一组设备，而不是所有设备。多播地址范围通常是<a data-href=\"IPv4\" href=\"https://rinodg.pages.dev/computer/computer-networking/ipv4.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">IPv4</a>的 224.0.0.0 到 239.255.255.255。\n使用场景：多播用于向多个接收者发送数据而不需要所有设备都接收的场景，如视频会议、实时流媒体传输等。<br>\n效率：相对于<a data-href=\"广播\" href=\"https://rinodg.pages.dev/computer/computer-networking/广播.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">广播</a>，多播的效率更高，因为只有需要的设备才接收到数据包，减少了网络负载。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":["computer/computer-networking/ipv4.html#_0","computer/computer-networking/广播.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/computer-networking/多播.html","pathToRoot":"../..","attachments":[],"createdTime":1717430740971,"modifiedTime":1717774732405,"sourceSize":615,"sourcePath":"Computer/Computer Networking/多播.md","exportPath":"computer/computer-networking/多播.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/computer-networking/子网.html":{"title":"子网","icon":"","description":"子网络或子网是IP网络的一个逻辑细分。将一个网络划分为两个或多个网络的做法称为子网。子网属于同一子网的计算机在其IP地址中使用相同的最重要的位组进行寻址。这导致IP地址在逻辑上被分为两个字段：网络号或路由前缀和其余字段或主机标识符。剩下的字段是一个特定主机或网络接口的标识符。对于IPv4，一个网络也可以用它的子网掩码或<a data-href=\"网络掩码\" href=\"https://rinodg.pages.dev/computer/computer-networking/网络掩码.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">网络掩码</a>来描述，它是一个位掩码，当它通过位和操作应用于网络中的任何IP地址时，就会产生路由前缀。子网掩码也像IP地址一样用点-十进制符号表示。例如，前缀198.51.100.0/24将有子网掩码255.255.255.0。<br><img alt=\"Pasted image 20240527170802.png\" src=\"https://rinodg.pages.dev/assets/pasted-image-20240527170802.png\" target=\"_self\">/24 指的是把前面24位作为 network id 后面是 host id","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":["computer/computer-networking/网络掩码.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/computer-networking/子网.html","pathToRoot":"../..","attachments":["assets/pasted-image-20240527170802.png"],"createdTime":1717430741847,"modifiedTime":1716800921735,"sourceSize":837,"sourcePath":"Computer/Computer Networking/子网.md","exportPath":"computer/computer-networking/子网.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/computer-networking/广播.html":{"title":"广播","icon":"","description":"<a data-href=\"多播\" href=\"https://rinodg.pages.dev/computer/computer-networking/多播.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">多播</a>（Multicast）和广播（Broadcast）是两种用于在计算机网络中发送数据的通信方法，它们的主要区别在于数据的接收范围和目标。以下是两者的详细区别：\n发送范围：\n广播是将数据包发送到网络中的所有设备。所有在同一子网内的设备都能接收到广播数据包。\n目标：广播的目标是所有设备。比如，地址为 255.255.255.255 的IPv4地址会将数据包发送到网络中所有设备。\n使用场景：广播通常用于需要通知所有设备的场景，如地址解析协议（ARP），用于解析IP地址到MAC地址。\n效率：由于所有设备都接收到数据包，所以效率较低，尤其在大型网络中，可能导致不必要的网络负载。\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":["computer/computer-networking/多播.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/computer-networking/广播.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741749,"modifiedTime":1716881200325,"sourceSize":775,"sourcePath":"Computer/Computer Networking/广播.md","exportPath":"computer/computer-networking/广播.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/computer-networking/网络掩码.html":{"title":"网络掩码","icon":"","description":"<a data-href=\"子网\" href=\"https://rinodg.pages.dev/computer/computer-networking/子网.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">子网</a>掩码是一个32位地址，用于屏蔽IP地址的一部分以区别网络标识和主机标识，并说明该IP地址是在局域网上，还是在远程网上。它只有一个作用，就是将某个IP地址划分成网络地址和主机地址两部分。某个小型公司有四个部门：行政、研发、营销、售后，每个部门各40台计算机接入公司局域网交换机，如果要在192.168.1.0网段为每个部门划分子网，子网掩码应该怎么设置，每个子网的地址范围分别是什么？192.168.1.0网段共256个地址，划分4个子网，每个子网需要64个地址；64是2的6次方，子网掩码应该以6个0结尾，剩下的用1补齐，由26个1和6个0组成，转换成十进制是255.255.255.192；每个子网共64个IP地址，掐头去尾后可用地址只有62个，第1个子网的可用IP地址范围是：192.168.1.1-62，第2个子网可用IP地址范围是192.168.1.65-126，第3个子网的可用IP地址范围是：192.168.1.129-190，第4个子网可用IP地址范围是192.168.1.193-254；该公司各部门计算机按照3中的IP地址范围进行设置，所有计算机的子网掩码都必须设置为255.255.255.192，设置完毕后各部门内的计算机能正常联网，不同部门间的计算机无法直接联通。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":["computer/computer-networking/子网.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/computer-networking/网络掩码.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741713,"modifiedTime":1717774872429,"sourceSize":1317,"sourcePath":"Computer/Computer Networking/网络掩码.md","exportPath":"computer/computer-networking/网络掩码.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/cs61a/202204231534.html":{"title":"202204231534","icon":"","description":"”<a data-tooltip-position=\"top\" aria-label=\"https://stackoverflow.com/questions/38636343/what-is-the-difference-between-execution-and-evaluation\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://stackoverflow.com/questions/38636343/what-is-the-difference-between-execution-and-evaluation\" target=\"_self\">c - What is the difference between execution and evaluation? - Stack Overflow</a>It's just a matter of linguistics. Expressions are evaluated, statements are executed. In both cases we can say that \"something gets done\", and I wouldn't worry too much about the difference.To clarify: roughly, a statement is a line of code, and an expression is what you can find between brackets in an if() or while(), or on the right side of an equal sign.For example, int x = 2 + 3; is a statement that declares a variable x and assigns to it the result of the expression 2 + 3, that is, 5. ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/cs61a/202204231534.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741854,"modifiedTime":1698490415812,"sourceSize":686,"sourcePath":"Computer/CS61A/202204231534.md","exportPath":"computer/cs61a/202204231534.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/cs61a/generators.html":{"title":"Generators","icon":"","description":"We can create our own custom iterators by writing a&nbsp;generator function, which returns a special type of iterator called a&nbsp;generator. Generator functions have&nbsp;yield&nbsp;statements within the body of the function instead of&nbsp;return&nbsp;statements. Calling a generator function will return a generator object and will&nbsp;not&nbsp;execute the body of the function.For example, let's consider the following generator function:def countdown(n): print(\"Beginning countdown!\") while n &gt;= 0: yield n n -= 1 print(\"Blastoff!\")\nCalling&nbsp;countdown(k)&nbsp;will return a generator object that counts down from&nbsp;k&nbsp;to 0. Since generators are iterators, we can call&nbsp;iter&nbsp;on the resulting object, which will simply return the same object. Note that the body is not executed at this point; nothing is printed and no numbers are outputted.&gt;&gt;&gt; c = countdown(5)\n&gt;&gt;&gt; c\n&lt;generator object countdown ...&gt;\n&gt;&gt;&gt; c is iter(c)\nTrue\nSo how is the counting done? Again, since generators are iterators, we call&nbsp;next&nbsp;on them to get the next element! The first time&nbsp;next&nbsp;is called, execution begins at the first line of the function body and continues until the&nbsp;yield&nbsp;statement is reached. The result of evaluating the expression in the&nbsp;yield&nbsp;statement is returned. The following interactive session continues from the one above.&gt;&gt;&gt; next(c)\nBeginning countdown!\n5\nUnlike functions we've seen before in this course, generator functions can remember their state. On any consecutive calls to&nbsp;next, execution picks up from the line after the&nbsp;yield&nbsp;statement that was previously executed. Like the first call to&nbsp;next, execution will continue until the next&nbsp;yield&nbsp;statement is reached. Note that because of this,&nbsp;Beginning countdown!&nbsp;doesn't get printed again.&gt;&gt;&gt; next(c)\n4\n&gt;&gt;&gt; next(c)\n3\nThe next 3 calls to&nbsp;next&nbsp;will continue to yield consecutive descending integers until 0. On the following call, a&nbsp;StopIteration&nbsp;error will be raised because there are no more values to yield (i.e. the end of the function body was reached before hitting a&nbsp;yield&nbsp;statement).&gt;&gt;&gt; next(c)\n2\n&gt;&gt;&gt; next(c)\n1\n&gt;&gt;&gt; next(c)\n0\n&gt;&gt;&gt; next(c)\nBlastoff!\nStopIteration\nSeparate calls to&nbsp;countdown&nbsp;will create distinct generator objects with their own state. Usually, generators shouldn't restart. If you'd like to reset the sequence, create another generator object by calling the generator function again.&gt;&gt;&gt; c1, c2 = countdown(5), countdown(5)\n&gt;&gt;&gt; c1 is c2\nFalse\n&gt;&gt;&gt; next(c1)\n5\n&gt;&gt;&gt; next(c2)\n5\nHere is a summary of the above: A&nbsp;generator function&nbsp;has a&nbsp;yield&nbsp;statement and returns a&nbsp;generator object. Calling the&nbsp;iter&nbsp;function on a generator object returns the same object without modifying its current state. The body of a generator function is not evaluated until&nbsp;next&nbsp;is called on a resulting generator object. Calling the&nbsp;next&nbsp;function on a generator object computes and returns the next object in its sequence. If the sequence is exhausted,&nbsp;StopIteration&nbsp;is raised. A generator \"remembers\" its state for the next&nbsp;next&nbsp;call. Therefore, the first&nbsp;next&nbsp;call works like this: Enter the function and run until the line with&nbsp;yield.\nReturn the value in the&nbsp;yield&nbsp;statement, but remember the state of the function for future&nbsp;next&nbsp;calls. And subsequent&nbsp;next&nbsp;calls work like this: Re-enter the function, start at&nbsp;the line after the&nbsp;yield&nbsp;statement that was previously executed, and run until the next&nbsp;yield&nbsp;statement.\nReturn the value in the&nbsp;yield&nbsp;statement, but remember the state of the function for future&nbsp;next&nbsp;calls. Calling a generator function returns a brand new generator object (like calling&nbsp;iter&nbsp;on an iterable object). A generator should not restart unless it's defined that way. To start over from the first element in a generator, just call the generator function again to create a new generator. Another useful tool for generators is the&nbsp;yield from&nbsp;statement.&nbsp;yield from&nbsp;will yield all values from an iterator or iterable.&gt;&gt;&gt; def gen_list(lst):\n... yield from lst\n...\n&gt;&gt;&gt; g = gen_list([1, 2, 3, 4])\n&gt;&gt;&gt; next(g)\n1\n&gt;&gt;&gt; next(g)\n2\n&gt;&gt;&gt; next(g)\n3\n&gt;&gt;&gt; next(g)\n4\n&gt;&gt;&gt; next(g)\nStopIteration\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/cs61a/generators.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741466,"modifiedTime":1670228912000,"sourceSize":4382,"sourcePath":"Computer/CS61A/Generators.md","exportPath":"computer/cs61a/generators.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/cs61a/iterable-uses.html":{"title":"Iterable Uses","icon":"","description":"We know that lists are one type of built-in iterable objects. You may have also encountered the&nbsp;range(start, end)&nbsp;function, which creates an iterable of ascending integers from start (inclusive) to end (exclusive).&gt;&gt;&gt; for x in range(2, 6):\n... print(x)\n...\n2\n3\n4\n5\nRanges are useful for many things, including performing some operations for a particular number of iterations or iterating through the indices of a list.There are also some built-in functions that take in iterables and return useful results:\nmap(f, iterable)&nbsp;- Creates an iterator over&nbsp;f(x)&nbsp;for&nbsp;x&nbsp;in&nbsp;iterable. In some cases, computing a list of the values in this iterable will give us the same result as [func(x)&nbsp;for&nbsp;x&nbsp;in&nbsp;iterable]. However, it's important to keep in mind that iterators can potentially have infinite values because they are evaluated lazily, while lists cannot have infinite elements.\nfilter(f, iterable)&nbsp;- Creates an iterator over&nbsp;x&nbsp;for each&nbsp;x&nbsp;in&nbsp;iterable&nbsp;if&nbsp;f(x)\nzip(iterables*)&nbsp;- Creates an iterator over co-indexed tuples with elements from each of the&nbsp;iterables\nreversed(iterable)&nbsp;- Creates an iterator over all the elements in the input iterable in reverse order\nlist(iterable)&nbsp;- Creates a list containing all the elements in the input&nbsp;iterable\ntuple(iterable)&nbsp;- Creates a tuple containing all the elements in the input&nbsp;iterable\nsorted(iterable)&nbsp;- Creates a sorted list containing all the elements in the input&nbsp;iterable\nreduce(f, iterable)&nbsp;- Must be imported with&nbsp;functools. Apply function of two arguments&nbsp;f&nbsp;cumulatively to the items of&nbsp;iterable, from left to right, so as to reduce the sequence to a single value.\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Iterable Uses","level":3,"id":"Iterable_Uses_1"}],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/cs61a/iterable-uses.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741616,"modifiedTime":1659354474000,"sourceSize":1760,"sourcePath":"Computer/CS61A/Iterable Uses.md","exportPath":"computer/cs61a/iterable-uses.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/cs61a/pure-functions-&-non-pure-functions.html":{"title":"Pure functions & Non-pure functions","icon":"","description":"<a data-tooltip-position=\"top\" aria-label=\"https://composingprograms.com/pages/12-elements-of-programming.html\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://composingprograms.com/pages/12-elements-of-programming.html\" target=\"_self\">1.2 Elements of Programming</a>\n- Pure functions. Functions have some input (their arguments) and return some output (the result of applying them). The built-in function\n- Non-pure functions. In addition to returning a value, applying a non-pure function can generate side effects, which make some change to the state of the interpreter or computer. A common side effect is to generate additional output beyond the return value, using the print function.Non-pure functionsNon-pure functions","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Pure functions &amp; Non-pure functions","level":1,"id":"Pure_functions_&_Non-pure_functions_0"}],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/cs61a/pure-functions-&-non-pure-functions.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741702,"modifiedTime":1659354269000,"sourceSize":571,"sourcePath":"Computer/CS61A/Pure functions & Non-pure functions.md","exportPath":"computer/cs61a/pure-functions-&-non-pure-functions.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/cs61a/trees-&-tree-mutation.html":{"title":"Trees & Tree Mutation","icon":"","description":"In computer science,&nbsp;trees&nbsp;are recursive data structures that are widely used in various settings and can be implemented in many ways. The diagram below is an example of a tree.Generally in computer science, you may see trees drawn \"upside-down\" like so. We say the&nbsp;root&nbsp;is the node where the tree begins to branch out at the top, and the&nbsp;leaves&nbsp;are the nodes where the tree ends at the bottom.Some terminology regarding trees:\nParent Node: A node that has at least one branch.\nChild Node: A node that has a parent. A child node can only have one parent.\nRoot: The top node of the tree. In our example, this is the&nbsp;1&nbsp;node.\nLabel: The value at a node. In our example, every node's label is an integer.\nLeaf: A node that has no branches. In our example, the&nbsp;4,&nbsp;5,&nbsp;6,&nbsp;2&nbsp;nodes are leaves.\nBranch: A subtree of the root. Trees have branches, which are trees themselves: this is why trees are&nbsp;recursive&nbsp;data structures.\nDepth: How far away a node is from the root. We define this as the number of edges between the root to the node. As there are no edges between the root and itself, the root has depth 0. In our example, the&nbsp;3&nbsp;node has depth 1 and the&nbsp;4&nbsp;node has depth 2.\nHeight: The depth of the lowest (furthest from the root) leaf. In our example, the&nbsp;4,&nbsp;5, and&nbsp;6&nbsp;nodes are all the lowest leaves with depth 2. Thus, the entire tree has height 2.\nIn computer science, there are many different types of trees, used for different purposes. Some vary in the number of branches each node has; others vary in the structure of the tree.A tree has a root value and a list of branches, where each branch is itself a tree.\nThe&nbsp;Tree&nbsp;constructor takes in a value&nbsp;label&nbsp;for the root, and an optional list of branches&nbsp;branches. If&nbsp;branches&nbsp;isn't given, the constructor uses the empty list&nbsp;[]&nbsp;as the default.\nTo get the label of a tree&nbsp;t, we access the instance attribute&nbsp;t.label.\nAccessing the instance attribute&nbsp;t.branches&nbsp;will give us a&nbsp;list of branches.\nWith this in mind, we can create the tree from earlier using our constructor:t = Tree(1, [Tree(3, [Tree(4), Tree(5), Tree(6)]), Tree(2)])\nImplementing trees as a class gives us another advantage: we can specify how we want them to be output by the interpreter by implementing the&nbsp;__repr__&nbsp;and&nbsp;__str__&nbsp;methods.Here is the&nbsp;__repr__&nbsp;method:def __repr__(self): if self.branches: branch_str = ', ' + repr(self.branches) else: branch_str = '' return 'Tree({0}{1})'.format(self.label, branch_str)\nWith this implementation of&nbsp;__repr__, a&nbsp;Tree&nbsp;instance is displayed as the exact constructor call that created it:&gt;&gt;&gt; t = Tree(4, [Tree(3), Tree(5, [Tree(6)]), Tree(7)])\n&gt;&gt;&gt; t\nTree(4, [Tree(3), Tree(5, [Tree(6)]), Tree(7)])\n&gt;&gt;&gt; t.branches\n[Tree(3), Tree(5, [Tree(6)]), Tree(7)]\n&gt;&gt;&gt; t.branches[0]\nTree(3)\n&gt;&gt;&gt; t.branches[1]\nTree(5, [Tree(6)])\nHere is the&nbsp;__str__&nbsp;method. You do not need to understand how this function is implemented.def __str__(self): def print_tree(t, indent=0): tree_str = ' ' * indent + str(t.label) + \"\\n\" for b in t.branches: tree_str += print_tree(b, indent + 1) return tree_str return print_tree(self).rstrip()\nWith this implementation of&nbsp;__str__, we can pretty-print a&nbsp;Tree&nbsp;to see both its contents and structure:&gt;&gt;&gt; t = Tree(4, [Tree(3), Tree(5, [Tree(6)]), Tree(7)])\n&gt;&gt;&gt; print(t)\n4 3 5 6 7\n&gt;&gt;&gt; print(t.branches[0])\n3\n&gt;&gt;&gt; print(t.branches[1])\n5 6\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Trees &amp; Tree Mutation","level":1,"id":"Trees_&_Tree_Mutation_0"},{"heading":"Trees / Tree Mutation","level":2,"id":"Trees_/_Tree_Mutation_0"}],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/cs61a/trees-&-tree-mutation.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741675,"modifiedTime":1669272470000,"sourceSize":3749,"sourcePath":"Computer/CS61A/Trees & Tree Mutation.md","exportPath":"computer/cs61a/trees-&-tree-mutation.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/data-structure/a-star.html":{"title":"A star","icon":"","description":"<img src=\"https://i.imgur.com/uSpiUb7.png\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\">\nHow do we get our estimate? Estimate is an arbitrary heuristic h(v, goal).\nheuristic: “using experience to learn and improve”\nDoesn’t have to be perfect! <br>A star vs <a data-href=\"Dijkstra\" href=\"https://rinodg.pages.dev/computer/data-structure/dijkstra.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Dijkstra</a><br>\n<a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"http://qiao.github.io/PathFinding.js/visual/\" target=\"_self\">http://qiao.github.io/PathFinding.js/visual/</a><br>Note, if edge weights are all equal (as here), <a data-href=\"Dijkstra\" href=\"https://rinodg.pages.dev/computer/data-structure/dijkstra.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Dijkstra</a>’s algorithm is just <a data-href=\"Breadth First Search\" href=\"https://rinodg.pages.dev/computer/data-structure/breadth-first-search.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Breadth First Search</a>.This is a good tool for understanding distinction between order in which nodes are visited by the algorithm vs. the order in which they appear on the shortest path.\n- Unless you’re really lucky, vastly more nodes are visited than exist on the shortest path.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":["computer/data-structure/dijkstra.html#_0","computer/data-structure/dijkstra.html#_0","computer/data-structure/breadth-first-search.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/data-structure/a-star.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741899,"modifiedTime":1670291894000,"sourceSize":649,"sourcePath":"Computer/Data Structure/A star.md","exportPath":"computer/data-structure/a-star.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/data-structure/bellman-ford.html":{"title":"Bellman-Ford","icon":"","description":"<a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://en.wikipedia.org/wiki/Bellman%E2%80%93Ford_algorithm\" target=\"_self\">https://en.wikipedia.org/wiki/Bellman%E2%80%93Ford_algorithm</a><br>\n<a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://zh.wikipedia.org/zh-tw/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95\" target=\"_self\">https://zh.wikipedia.org/zh-tw/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95</a>Bellman-Ford algorithm is a single-source shortest path algorithm, so when you have negative edge weight then it can detect negative cycles in a graph.The only difference between the two is that Bellman-Ford is also capable of handling negative weights whereas Dijkstra Algorithm can only handle positives.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/data-structure/bellman-ford.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741836,"modifiedTime":1677842128299,"sourceSize":442,"sourcePath":"Computer/Data Structure/Bellman-Ford.md","exportPath":"computer/data-structure/bellman-ford.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/data-structure/breadth-first-search.html":{"title":"Breadth First Search","icon":"","description":"\nInitialize a queue with a starting vertex s and mark that vertex. A queue is a list that has two operations: enqueue (a.k.a. addLast) and dequeue (a.k.a. removeFirst).\nLet’s call this the queue our fringe. Repeat until queue is empty: Remove vertex v from the front of the queue.\nFor each unmarked neighbor n of v: Mark n.\nSet edgeTo[n] = v (and/or distTo[n] = distTo[v] + 1).\nAdd n to end of queue. ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/data-structure/breadth-first-search.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741669,"modifiedTime":1669538306000,"sourceSize":477,"sourcePath":"Computer/Data Structure/Breadth First Search.md","exportPath":"computer/data-structure/breadth-first-search.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/data-structure/cut-property.html":{"title":"Cut Property","icon":"","description":"\n<img src=\"https://i.imgur.com/Bmd3YH3.png\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\">\nA cut is an assignment of a graph’s nodes to two non-empty sets.\nA crossing edge is an edge which connects a node from one set to a node from the other set.\nCut property: Given any cut, minimum weight crossing edge is in the MST. For rest of today, we’ll assume edge weights are unique. ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/data-structure/cut-property.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741701,"modifiedTime":1670225352000,"sourceSize":359,"sourcePath":"Computer/Data Structure/Cut Property.md","exportPath":"computer/data-structure/cut-property.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/data-structure/data-structure.html":{"title":"Data Structure","icon":"","description":"<a data-href=\"Disjoint Sets\" href=\"https://rinodg.pages.dev/.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Disjoint Sets</a><br><a data-href=\"BST\" href=\"https://rinodg.pages.dev/.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">BST</a><br>\n<a data-href=\"Trees &amp; Tree Mutation\" href=\"https://rinodg.pages.dev/computer/cs61a/trees-&amp;-tree-mutation.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Trees &amp; Tree Mutation</a><br>\n<a data-href=\"Red Black Trees\" href=\"https://rinodg.pages.dev/computer/data-structure/red-black-trees.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Red Black Trees</a><br>\n<a data-href=\"Tree Traversals\" href=\"https://rinodg.pages.dev/computer/data-structure/tree-traversals.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Tree Traversals</a><br><a data-href=\"Priority Queue\" href=\"https://rinodg.pages.dev/computer/data-structure/priority-queue.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Priority Queue</a><br><a data-href=\"dynamic programming\" href=\"https://rinodg.pages.dev/computer/data-structure/dynamic-programming.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">dynamic programming</a>","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Tree","level":1,"id":"Tree_0"},{"heading":"PQ","level":1,"id":"PQ_0"},{"heading":"<a data-href=\"Graph\" href=\"Graph\" class=\"internal-link\" target=\"_blank\" rel=\"noopener nofollow\">Graph</a>","level":1,"id":"[[Graph]]_0"},{"heading":"<a data-href=\"Tries\" href=\"Tries\" class=\"internal-link\" target=\"_blank\" rel=\"noopener nofollow\">Tries</a>","level":1,"id":"[[Tries]]_0"}],"links":[".html",".html","computer/cs61a/trees-&-tree-mutation.html#_0","computer/data-structure/red-black-trees.html#_0","computer/data-structure/tree-traversals.html#_0","computer/data-structure/priority-queue.html#_0","computer/data-structure/graph.html#_0","computer/data-structure/tries.html#_0","computer/data-structure/dynamic-programming.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/data-structure/data-structure.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741645,"modifiedTime":1677393158000,"sourceSize":175,"sourcePath":"Computer/Data Structure/Data Structure.md","exportPath":"computer/data-structure/data-structure.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/data-structure/depth-first-traversais.html":{"title":"Depth First TraversaIs","icon":"","description":"Preorder traversal: \"Visit\" a node, then traverse its children: DBACFEG\noften use to print directory list\n<img src=\"https://i.imgur.com/SMVJ7dq.png\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\">\nlnorder traversal: Traverse left child, visit, then traverse right child: ABCDEFGPostorder traversal; Traverseleft, traverse right, then visit: ACBEGFD\nPostorder Traversal for gathering file sizes.postOrder(BSTNode x) { if (x == null) return 0; int total = 0; for (BSTNode c : x.children()) total += postOrder(c) total += x.fileSize(); return total;\n} <br><img src=\"https://i.imgur.com/TY4c4Av.png\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/data-structure/depth-first-traversais.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741233,"modifiedTime":1673229416000,"sourceSize":579,"sourcePath":"Computer/Data Structure/Depth First TraversaIs.md","exportPath":"computer/data-structure/depth-first-traversais.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/data-structure/depth-first-traversal.html":{"title":"Depth-First Traversal","icon":"","description":"This idea of exploring a neighbor’s entire subgraph before moving on to the next neighbor is known as Depth First Traversal.<img src=\"https://i.imgur.com/HN3PWcs.png\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\">What we just did in DepthFirstPaths is called “DFS Preorder.”\nDFS Preorder: Action is before DFS calls to neighbors. Our action was setting edgeTo.\nExample: edgeTo[1] was set before\nDFS calls to neighbors 2 and 4. <br>One valid DFS preorder for this <a data-href=\"Graph\" href=\"https://rinodg.pages.dev/computer/data-structure/graph.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Graph</a>: 012543678 Equivalent to the order of dfs calls. Could also do actions in DFS Postorder.\nDFS Postorder: Action is after DFS calls to neighbors.\nExample: dfs(s): mark(s)\nFor each unmarked neighbor n of s, dfs(n)\nprint(s) Results for dfs(0) would be: 347685210\nEquivalent to the order of dfs returns.\n<br>So too are there many <a data-href=\"Graph\" href=\"https://rinodg.pages.dev/computer/data-structure/graph.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Graph</a> traversals, given some source:\nDFS Preorder: 012543678 (dfs calls).\nDFS Postorder: 347685210 (dfs returns).\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":["computer/data-structure/graph.html#_0","computer/data-structure/graph.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/data-structure/depth-first-traversal.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741720,"modifiedTime":1670291894000,"sourceSize":916,"sourcePath":"Computer/Data Structure/Depth-First Traversal.md","exportPath":"computer/data-structure/depth-first-traversal.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/data-structure/determain-graph-has-cycle.html":{"title":"Determain graph has cycle","icon":"","description":"<img src=\"https://i.imgur.com/u8Mb0as.jpeg\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\"> Approach 1: Do DFS from 0 (arbitrary vertex). Keep going until you see a marked vertex.\nPotential danger: 1 looks back at 0 and sees marked.\nSolution: Just don’t count the node you came from. Worst case runtime: O(V + E) -- do study guide problems to reinforce this. With some cleverness, can give a tighter bound of O(V). Approach 2: Use a WeightedQuickUnionUF object. For each edge, check if the two vertices are connected. If not, union them.\nIf so, there is a cycle. Worst case runtime: O(V + E α(V)) if we have path compression. <br>\nHere α(V) is the <a data-tooltip-position=\"top\" aria-label=\"https://en.wikipedia.org/wiki/Ackermann_function\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://en.wikipedia.org/wiki/Ackermann_function\" target=\"_self\">inverse Ackermann function</a> from <a data-tooltip-position=\"top\" aria-label=\"https://docs.google.com/presentation/d/1CG8k94aQBUHjJPuO5_9pkNml9NYYWY__a9ed_rFH1j0/edit#slide=id.g636c46f3c_01156\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://docs.google.com/presentation/d/1CG8k94aQBUHjJPuO5_9pkNml9NYYWY__a9ed_rFH1j0/edit#slide=id.g636c46f3c_01156\" target=\"_self\">Disjoint Sets</a>. ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/data-structure/determain-graph-has-cycle.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741193,"modifiedTime":1669965949000,"sourceSize":913,"sourcePath":"Computer/Data Structure/Determain graph has cycle.md","exportPath":"computer/data-structure/determain-graph-has-cycle.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/data-structure/dijkstra.html":{"title":"Dijkstra","icon":"","description":"用于解决有权图最短路径\n可以用于货币转换\nDijkstra's algorithm is not guaranteed to be correct for negative edges. It might work... but it isn't guaranteed to work.\nDijkstra 的算法不保证对负 Edge 是正确的。它可能有效……但不能保证有效。Observe that once a vertex is popped off the <a data-href=\"Priority Queue\" href=\"https://rinodg.pages.dev/computer/data-structure/priority-queue.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Priority Queue</a>, it is never re-added. Its distance is never re-updated. So, in other words, once a vertex is popped from the <a data-href=\"Priority Queue\" href=\"https://rinodg.pages.dev/computer/data-structure/priority-queue.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Priority Queue</a>, we&nbsp;know&nbsp;the true shortest distance to that vertex from the source.Dijkstra is however generally considered better in the absence of negative weight edges, as a typical binary heap priority queue implementation has time complexity A Fibonacci heap priority queue gives , while the Bellman-Ford algorithm has complexityDemo:<br>\n<a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://docs.google.com/presentation/d/1_bw2z1ggUkquPdhl7gwdVBoTaoJmaZdpkV6MoAgxlJc/pub?start=false&amp;loop=false&amp;delayms=3000\" target=\"_self\">https://docs.google.com/presentation/d/1_bw2z1ggUkquPdhl7gwdVBoTaoJmaZdpkV6MoAgxlJc/pub?start=false&amp;loop=false&amp;delayms=3000</a><br><a data-href=\"Bellman-Ford\" href=\"https://rinodg.pages.dev/computer/data-structure/bellman-ford.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Bellman-Ford</a><br>\n<a data-href=\"A star\" href=\"https://rinodg.pages.dev/computer/data-structure/a-star.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">A star</a>","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"ref","level":1,"id":"ref_0"}],"links":["computer/data-structure/priority-queue.html#_0","computer/data-structure/priority-queue.html#_0","computer/data-structure/bellman-ford.html#_0","computer/data-structure/a-star.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/data-structure/dijkstra.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741888,"modifiedTime":1674703046000,"sourceSize":1032,"sourcePath":"Computer/Data Structure/Dijkstra.md","exportPath":"computer/data-structure/dijkstra.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/data-structure/dynamic-programming.html":{"title":"dynamic programming","icon":"","description":"There are two ways to implement a DP algorithm:\nBottom-up, also known as tabulation.\nTop-down, also known as memoization.\n<a data-href=\"When to use DP\" href=\"https://rinodg.pages.dev/computer/data-structure/when-to-use-dp.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">When to use DP</a>Bottom-up is implemented with iteration and starts at the base cases. Let's use the Fibonacci sequence as an example again. The base cases for the Fibonacci sequence are and . With bottom-up, we would use these base cases to calculate , and then use that result to calculate , and so on all the way up to .// Pseudocode example for bottom-up F = array of length (n + 1)\nF[0] = 0\nF[1] = 1\nfor i from 2 to n: F[i] = F[i - 1] + F[i - 2] Top-down is implemented with recursion and made efficient with memoization. If we wanted to find the Fibonacci number , we try to compute this by finding and . This defines a recursive pattern that will continue on until we reach the base cases . The problem with just implementing it recursively is that there is a ton of unnecessary repeated computation. Take a look at the recursion tree if we were to find :<br><img src=\"https://leetcode.com/explore/featured/card/dynamic-programming/630/an-introduction-to-dynamic-programming/4035//../../../../Figures/DP1/C1A2_1.png\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\">Notice that we need to calculate F(2) three times. This might not seem like a big deal, but if we were to calculate F(6), this entire image would be only one child of the root. Imagine if we wanted to find F(100) - the amount of computation is exponential and will quickly explode. The solution to this is to memoize results.\nmemoizing a result means to store the result of a function call, usually in a hashmap or an array, so that when the same function call is made again, we can simply return the memoized result instead of recalculating the result.\nAfter we calculate F(2), let's store it somewhere (typically in a hashmap), so in the future, whenever we need to find F(2), we can just refer to the value we already calculated instead of having to go through the entire tree again. Below is an example of what the recursion tree for finding F(6) looks like with and without memoization:// Pseudocode example for top-down memo = hashmap\nFunction F(integer i): if i is 0 or 1: return i if i doesn't exist in memo: memo[i] = F(i - 1) + F(i - 2) return memo[i]\nAny DP algorithm can be implemented with either method, and there are reasons for choosing either over the other. However, each method has one main advantage that stands out:\nA bottom-up implementation's runtime is usually faster, as iteration does not have the overhead that recursion does.\nA top-down implementation is usually much easier to write. This is because with recursion, the ordering of subproblems does not matter, whereas with tabulation, we need to go through a logical ordering of solving subproblems. We'll be talking more about these two options throughout the card. For now, all you need to know is that top-down uses recursion, and bottom-up uses iteration.\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Bottom-up (Tabulation)","level":3,"id":"Bottom-up_(Tabulation)_0"},{"heading":"Top-down (Memoization)","level":3,"id":"Top-down_(Memoization)_0"},{"heading":"Which is better?","level":3,"id":"Which_is_better?_0"}],"links":["computer/data-structure/when-to-use-dp.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/data-structure/dynamic-programming.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741884,"modifiedTime":1677380387000,"sourceSize":3158,"sourcePath":"Computer/Data Structure/dynamic programming.md","exportPath":"computer/data-structure/dynamic-programming.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/data-structure/graph.html":{"title":"Graph","icon":"","description":"\nTrees and Hierarchical Relationships Trees are fantastic for representing strict hierarchical relationships. But not every relationship is hierarchical.\nExample: Paris Metro map. That is not a <a data-tooltip-position=\"top\" aria-label=\"Trees &amp; Tree Mutation\" data-href=\"Trees &amp; Tree Mutation\" href=\"https://rinodg.pages.dev/computer/cs61a/trees-&amp;-tree-mutation.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Tree</a>. that contains cycles A graph consists of: A set of nodes\nA set of zero or more edges, each of which connects two nodes all trees are graphs\n<br><a data-href=\"Graph Problems\" href=\"https://rinodg.pages.dev/computer/data-structure/graph-problems.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Graph Problems</a>\n<br><a data-href=\"Depth-First Traversal\" href=\"https://rinodg.pages.dev/computer/data-structure/depth-first-traversal.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Depth-First Traversal</a>\nBFS order: Act in order of distance from s. <br>BFS stands for “<a data-href=\"Breadth First Search\" href=\"https://rinodg.pages.dev/computer/data-structure/breadth-first-search.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Breadth First Search</a>”.\nAnalogous to “level order”. Search is wide, not deep.\n0 1 24 53 68 7 <br><a data-href=\"Breadth First Search\" href=\"https://rinodg.pages.dev/computer/data-structure/breadth-first-search.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Breadth First Search</a>\n在设计算法的时候，选择适合的 Graph API 非常重要\nDFS is worse for spindly graphs. Imagine a graph with 10000 nodes all spindly. We'll end up making 10000 recursive calls, which is bad for space.\nBFS is worse for \"bushy\" graphs, because our queue gets used a lot.\n<br>Find <a data-href=\"Shortest Paths\" href=\"https://rinodg.pages.dev/computer/data-structure/shortest-paths.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Shortest Paths</a><br><img src=\"https://i.imgur.com/xUVT7Jf.jpg\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\"><br><a data-href=\"Spanning Trees\" href=\"https://rinodg.pages.dev/computer/data-structure/spanning-trees.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Spanning Trees</a><br>\n<a data-href=\"Minimum Spanning Trees\" href=\"https://rinodg.pages.dev/computer/data-structure/minimum-spanning-trees.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Minimum Spanning Trees</a><br><img src=\"https://i.imgur.com/JLvANCf.png\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Graph Traversal","level":1,"id":"Graph_Traversal_0"},{"heading":"Efficient","level":2,"id":"Efficient_0"}],"links":["computer/cs61a/trees-&-tree-mutation.html#_0","computer/data-structure/graph-problems.html#_0","computer/data-structure/depth-first-traversal.html#_0","computer/data-structure/breadth-first-search.html#_0","computer/data-structure/breadth-first-search.html#_0","computer/data-structure/shortest-paths.html#_0","computer/data-structure/spanning-trees.html#_0","computer/data-structure/minimum-spanning-trees.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/data-structure/graph.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741108,"modifiedTime":1670291894000,"sourceSize":1147,"sourcePath":"Computer/Data Structure/Graph.md","exportPath":"computer/data-structure/graph.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/data-structure/graph-problems.html":{"title":"Graph Problems","icon":"","description":"\n<img title=\"Graph Queries\" src=\"https://i.imgur.com/ANZR2l0.png\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\">\n<br>Some well known <a data-href=\"Graph\" href=\"https://rinodg.pages.dev/computer/data-structure/graph.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Graph</a> problems and their common names:\ns-t Path. Is there a path between vertices s and t?\nConnectivity. Is the graph connected, i.e. is there a path between all vertices?\nBiconnectivity. Is there a vertex whose removal disconnects the graph?\nShortest s-t Path. What is the shortest path between vertices s and t?\nCycle Detection. Does the graph contain any cycles?\nEuler Tour. Is there a cycle that uses every edge exactly once?\nHamilton Tour. Is there a cycle that uses every vertex exactly once?\nPlanarity. Can you draw the graph on paper with no crossing edges?\nIsomorphism. Are two graphs isomorphic (the same graph in disguise)?\nDifficulty can be deceiving.\n<br>An efficient Euler tour algorithm O(# edges) was found as early as 1873 [<a data-tooltip-position=\"top\" aria-label=\"https://ethkim.github.io/TA/251/eulerian.pdf\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://ethkim.github.io/TA/251/eulerian.pdf\" target=\"_self\">Link</a>].\nDespite decades of intense study, no efficient algorithm for a Hamilton tour exists. Best algorithms are exponential time.\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":["computer/data-structure/graph.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/data-structure/graph-problems.html","pathToRoot":"../..","attachments":[],"createdTime":1717430740995,"modifiedTime":1670291894000,"sourceSize":1045,"sourcePath":"Computer/Data Structure/Graph Problems.md","exportPath":"computer/data-structure/graph-problems.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/data-structure/heap.html":{"title":"Heap","icon":"","description":"数据结构的 Heap 跟硬件的 Heap 不是一个意思The Tree implemented by array, parent =(k-1/2)","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/data-structure/heap.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741653,"modifiedTime":1669106332000,"sourceSize":107,"sourcePath":"Computer/Data Structure/Heap.md","exportPath":"computer/data-structure/heap.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/data-structure/kruskal's-algorithm.html":{"title":"Kruskal's Algorithm","icon":"","description":" Initially mark all edges gray. Consider edges in increasing order of weight. Add edge to MST (mark black) unless doing so creates a <a data-tooltip-position=\"top\" aria-label=\"Determain graph has cycle\" data-href=\"Determain graph has cycle\" href=\"https://rinodg.pages.dev/computer/data-structure/determain-graph-has-cycle.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">cycle</a>. Repeat until V-1 edges. <br>\nConceptual Kruskal’s Algorithm Demo (<a data-tooltip-position=\"top\" aria-label=\"https://docs.google.com/presentation/d/1RhRSYs9Jbc335P24p7vR-6PLXZUl-1EmeDtqieL9ad8/edit?usp=sharing\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://docs.google.com/presentation/d/1RhRSYs9Jbc335P24p7vR-6PLXZUl-1EmeDtqieL9ad8/edit?usp=sharing\" target=\"_self\">Link</a>) 按权重增加的顺序考虑边缘。添加到 MST 除非创建循环。\n<br><a data-href=\"weighted quick union\" href=\"https://rinodg.pages.dev/.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">weighted quick union</a> <br>\nRealistic Kruskal’s Algorithm Implementation Demo (<a data-tooltip-position=\"top\" aria-label=\"https://docs.google.com/presentation/d/1KpNiR7aLIEG9sm7HgX29nvf3yLD8_vdQEPa0ktQfuYc/edit?usp=sharing\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://docs.google.com/presentation/d/1KpNiR7aLIEG9sm7HgX29nvf3yLD8_vdQEPa0ktQfuYc/edit?usp=sharing\" target=\"_self\">Link</a>) 1. Sort all the edges from lightest to heaviest.\n2. Taking one edge at a time (in sorted order), add it to our MST under construction if doing so does not introduce a cycle.\n3. Repeat until there are {% math %}V-1{% endmath %} edges.\n<br>vs <a data-href=\"Prim's Algorithm\" href=\"https://rinodg.pages.dev/computer/data-structure/prim's-algorithm.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Prim's Algorithm</a>\n<br><a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.youtube.com/watch?v=vmWSnkBVvQ0\" target=\"_self\">https://www.youtube.com/watch?v=vmWSnkBVvQ0</a>\n如果有非唯一的权重 edges ，它可能生成同样的 Tree\n但总权重都是一样的\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":["computer/data-structure/determain-graph-has-cycle.html#_0",".html","computer/data-structure/prim's-algorithm.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/data-structure/kruskal's-algorithm.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741167,"modifiedTime":1670231236000,"sourceSize":1038,"sourcePath":"Computer/Data Structure/Kruskal's Algorithm.md","exportPath":"computer/data-structure/kruskal's-algorithm.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/data-structure/minimum-spanning-trees.html":{"title":"Minimum Spanning Trees","icon":"","description":" A Minimum <a data-href=\"Spanning Trees\" href=\"https://rinodg.pages.dev/computer/data-structure/spanning-trees.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Spanning Trees</a> is a spanning tree of minimum total weight. Example: Directly connecting buildings by power lines. 定义图的生成树是它的一棵含有其所有顶点的无环连通子图 。 一幅加杈图的最小生成树 （ MST ）是它的一棵权值 （ 树中所有边的权值之和 ） 最小的生成树 <br>\n<a data-href=\"Determain graph has cycle\" href=\"https://rinodg.pages.dev/computer/data-structure/determain-graph-has-cycle.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Determain graph has cycle</a> Application <br><img src=\"https://i.imgur.com/sSyZ55b.jpeg\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\">\nFor example, I want to wire up a bunch of towns, that they can all have power. In that case, you are trying to minimize the total cost of all. <br>\n与 <a data-href=\"Shortest Paths\" href=\"https://rinodg.pages.dev/computer/data-structure/shortest-paths.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Shortest Paths</a> 的关系 MST 有的时候恰好是某个 Vertex 的 SPT 设计 MST 算法（行不通的 选择最好的 Vertex\n运行 Dijkstra <br>\n<a data-href=\"Cut Property\" href=\"https://rinodg.pages.dev/computer/data-structure/cut-property.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Cut Property</a> <br>\n<a data-href=\"Prim's Algorithm\" href=\"https://rinodg.pages.dev/computer/data-structure/prim's-algorithm.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Prim's Algorithm</a> <br>\n<a data-href=\"Kruskal's Algorithm\" href=\"https://rinodg.pages.dev/computer/data-structure/kruskal's-algorithm.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Kruskal's Algorithm</a> <br><img src=\"https://i.imgur.com/VE1IQ3i.png\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\"><br>\n<a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://en.wikipedia.org/wiki/Minimum_spanning_tree#Optimal_algorithm\" target=\"_self\">https://en.wikipedia.org/wiki/Minimum_spanning_tree#Optimal_algorithm</a>","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":["computer/data-structure/spanning-trees.html#_0","computer/data-structure/determain-graph-has-cycle.html#_0","computer/data-structure/shortest-paths.html#_0","computer/data-structure/cut-property.html#_0","computer/data-structure/prim's-algorithm.html#_0","computer/data-structure/kruskal's-algorithm.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/data-structure/minimum-spanning-trees.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741034,"modifiedTime":1670231554000,"sourceSize":968,"sourcePath":"Computer/Data Structure/Minimum Spanning Trees.md","exportPath":"computer/data-structure/minimum-spanning-trees.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/data-structure/prim's-algorithm.html":{"title":"Prim's Algorithm","icon":"","description":" <img src=\"https://i.imgur.com/cvVaXSE.png\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\"> Start from some arbitrary start node. Repeatedly add shortest edge (mark black) that has one node inside the MST under construction.\nRepeat until V-1 edges. <br>\nDemo: <a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://docs.google.com/presentation/d/1NFLbVeCuhhaZAM1z3s9zIYGGnhT4M4PWwAc-TLmCJjc/edit#slide=id.g9a60b2f52_0_0\" target=\"_self\">https://docs.google.com/presentation/d/1NFLbVeCuhhaZAM1z3s9zIYGGnhT4M4PWwAc-TLmCJjc/edit#slide=id.g9a60b2f52_0_0</a> Insert all vertices into fringe PQ, storing vertices in order of distance from source.\nRepeat: Remove (closest) vertex v from PQ, and relax all edges pointing from v.\n将所有顶点插入流苏PQ，按照与源头的距离顺序存储顶点。\n重复：从PQ中移除（最近的）顶点v，并放松所有指向v的边。 It is important to note that MST is not unique. Why does Prim’s work? Special case of generic algorithm. Suppose we add edge e = v-&gt;w.\nSide 1 of cut is all vertices connected to start, side 2 is all the others.\nNo crossing edge is black (all connected edges on side 1).\nNo crossing edge has lower weight (consider in increasing order). <br>\nThis is one algorithm to find a MST from a <a data-href=\"Graph\" href=\"https://rinodg.pages.dev/computer/data-structure/graph.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Graph</a>. It is as follows: Start from some arbitrary start node.\nRepeatedly add the shortest edge that has one node inside the MST under construction.\nRepeat until there are V-1 edges.\n<br>Essentially, this algorithm runs via the same mechanism as <a data-href=\"Dijkstra\" href=\"https://rinodg.pages.dev/computer/data-structure/dijkstra.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Dijkstra</a>'s algorithm, but while <a data-href=\"Dijkstra\" href=\"https://rinodg.pages.dev/computer/data-structure/dijkstra.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Dijkstra</a>'s considers candidate nodes by their distance from the source node, Prim's looks at each candidate node's distance from the MST under construction.<br>Thus, the runtime of Prim's if done using the same mechanism as <a data-href=\"Dijkstra\" href=\"https://rinodg.pages.dev/computer/data-structure/dijkstra.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Dijkstra</a>'s, would be the same as <a data-href=\"Dijkstra\" href=\"https://rinodg.pages.dev/computer/data-structure/dijkstra.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Dijkstra</a>'s, which is.<br>\nRemember, this is because we need to add to a <a data-href=\"Priority Queue\" href=\"https://rinodg.pages.dev/computer/data-structure/priority-queue.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Priority Queue</a> fringe once for every edge we have, and we need to dequeue from it once for every vertex we have.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":["computer/data-structure/graph.html#_0","computer/data-structure/dijkstra.html#_0","computer/data-structure/dijkstra.html#_0","computer/data-structure/dijkstra.html#_0","computer/data-structure/dijkstra.html#_0","computer/data-structure/priority-queue.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/data-structure/prim's-algorithm.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741868,"modifiedTime":1670291894000,"sourceSize":2023,"sourcePath":"Computer/Data Structure/Prim's Algorithm.md","exportPath":"computer/data-structure/prim's-algorithm.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/data-structure/priority-queue.html":{"title":"Priority Queue","icon":"","description":"<img src=\"https://i.imgur.com/LUsWwlE.jpg\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\"><br>\n<a data-href=\"Heap\" href=\"https://rinodg.pages.dev/computer/data-structure/heap.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Heap</a>","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":["computer/data-structure/heap.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/data-structure/priority-queue.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741045,"modifiedTime":1669956294000,"sourceSize":46,"sourcePath":"Computer/Data Structure/Priority Queue.md","exportPath":"computer/data-structure/priority-queue.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/data-structure/red-black-trees.html":{"title":"Red Black Trees","icon":"","description":"In&nbsp;<a data-tooltip-position=\"top\" aria-label=\"https://en.wikipedia.org/wiki/Computer_science\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" title=\"Computer science\" href=\"https://en.wikipedia.org/wiki/Computer_science\" target=\"_self\">computer science</a>, a&nbsp;red–black tree&nbsp;is a kind of&nbsp;<a data-tooltip-position=\"top\" aria-label=\"https://en.wikipedia.org/wiki/Self-balancing_binary_search_tree\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" title=\"Self-balancing binary search tree\" href=\"https://en.wikipedia.org/wiki/Self-balancing_binary_search_tree\" target=\"_self\">self-balancing binary search tree</a>. Each node stores an extra bit representing \"color\" (\"red\" or \"black\"), used to ensure that the tree remains balanced during insertions and deletions.Binary search trees:Can balance using rotation,but we have no algorithm for doing so(yet).\n2·3 trees. Balanced by construction, i.e.no rotations required.<br><a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://youtu.be/4nZFgj7t52E\" target=\"_self\">https://youtu.be/4nZFgj7t52E</a>What is the maximum height of the corresponding LLRB?\no TotaI height is H (black) + H + 1 (red)\n= 2H + 1Red black tree is actually a 2-3 tree, .． Right red link —&gt; rotate left.\n． two consecutive left links -&gt; rotate right.\n． Red left and red right -&gt; flip.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Rule","level":1,"id":"Rule_0"}],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/data-structure/red-black-trees.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741857,"modifiedTime":1669966262000,"sourceSize":882,"sourcePath":"Computer/Data Structure/Red Black Trees.md","exportPath":"computer/data-structure/red-black-trees.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/data-structure/shortest-paths.html":{"title":"Shortest Paths","icon":"","description":"\nSingle Source, Multiple Targets: Can represent shortest path from start to every vertex as a shortest paths tree with V-1 edges.\nCan find the SPT using <a data-href=\"Dijkstra\" href=\"https://rinodg.pages.dev/computer/data-structure/dijkstra.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Dijkstra</a>’s algorithm. Single Source, Single Target: <br><a data-href=\"Dijkstra\" href=\"https://rinodg.pages.dev/computer/data-structure/dijkstra.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Dijkstra</a>’s is inefficient (searches useless parts of the <a data-href=\"Graph\" href=\"https://rinodg.pages.dev/computer/data-structure/graph.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Graph</a>).\nCan represent shortest path as path (with up to V-1 vertices, but probably far fewer).\n<br><a data-tooltip-position=\"top\" aria-label=\"A star\" data-href=\"A star\" href=\"https://rinodg.pages.dev/computer/data-structure/a-star.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">A*</a> is potentially much faster than <a data-href=\"Dijkstra\" href=\"https://rinodg.pages.dev/computer/data-structure/dijkstra.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Dijkstra</a>’s. Consistent heuristic guarantees correct solution. ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":["computer/data-structure/dijkstra.html#_0","computer/data-structure/dijkstra.html#_0","computer/data-structure/graph.html#_0","computer/data-structure/a-star.html#_0","computer/data-structure/dijkstra.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/data-structure/shortest-paths.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741606,"modifiedTime":1670291894000,"sourceSize":547,"sourcePath":"Computer/Data Structure/Shortest Paths.md","exportPath":"computer/data-structure/shortest-paths.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/data-structure/spanning-trees.html":{"title":"Spanning Trees","icon":"","description":"\nGiven an undirected graph, a spanning tree T is a subgraph of G, where T: These two properties make it a tree. Is connected.\nIs acyclic. This makes it spanning. Includes all of the vertices. Example: <img src=\"https://i.imgur.com/qzXng80.jpeg\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\">\nSpanning tree is the black edges and vertices. A Minimum Spanning Trees is a spanning tree of minimum total weight. Example: Directly connecting buildings by power lines. A Minimum Spanning Trees is a spanning tree of minimum total weight. Example: Directly connecting buildings by power lines. ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/data-structure/spanning-trees.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741174,"modifiedTime":1670225336000,"sourceSize":644,"sourcePath":"Computer/Data Structure/Spanning Trees.md","exportPath":"computer/data-structure/spanning-trees.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/data-structure/tree-traversals.html":{"title":"Tree Traversals","icon":"","description":"Depth First TraversaIsPreorder traversal: \"Visit\" a node, then traverse its children: DBACFEG\noften use to print directory list\n<img src=\"https://i.imgur.com/SMVJ7dq.png\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\">\nlnorder traversal: Traverse left child, visit, then traverse right child: ABCDEFGPostorder traversal; Traverseleft, traverse right, then visit: ACBEGFD\nPostorder Traversal for gathering file sizes.postOrder(BSTNode x) { if (x == null) return 0; int total = 0; for (BSTNode c : x.children()) total += postOrder(c) total += x.fileSize(); return total;\n} <br><img src=\"https://i.imgur.com/TY4c4Av.png\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\">Level Traversals","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/data-structure/tree-traversals.html","pathToRoot":"../..","attachments":["computer/data-structure/depth-first-traversais.html"],"createdTime":1717430741660,"modifiedTime":1669431675000,"sourceSize":46,"sourcePath":"Computer/Data Structure/Tree Traversals.md","exportPath":"computer/data-structure/tree-traversals.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/data-structure/tries.html":{"title":"Tries","icon":"","description":"Short for Retrieval Tree\nInventor Edward Fredkin suggested it should be pronounced \"tree\", but\nalmost everyone pronounces it like \"try\".For String keys, we can use a “Trie”. Key ideas:\nEvery node stores only one letter.\nNodes can be shared by multiple keys.\n<img src=\"https://i.imgur.com/LtFJ0Bo.png\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\">应用在 autocomplete","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/data-structure/tries.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741787,"modifiedTime":1672483138000,"sourceSize":330,"sourcePath":"Computer/Data Structure/Tries.md","exportPath":"computer/data-structure/tries.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/data-structure/when-to-use-dp.html":{"title":"When to use DP","icon":"","description":"\nThe problem can be broken down into \"overlapping subproblems\" - smaller versions of the original problem that are re-used multiple times\nThe problem has an \"optimal substructure\" - an optimal solution can be formed from optimal solutions to the overlapping subproblems of the original problem\nThe first characteristic that is common in DP problems is that the problem will ask for the optimum value (maximum or minimum) of something, or the number of ways there are to do something. For example:\nWhat is the minimum cost of doing...\nWhat is the maximum profit from...\nHow many ways are there to do...\nWhat is the longest possible...\nIs it possible to reach a certain point...\nThe second characteristic that is common in DP problems is that future \"decisions\" depend on earlier decisions. Deciding to do something at one step may affect the ability to do something in a later step. This characteristic is what makes a greedy algorithm invalid for a DP problem - we need to factor in results from previous decisions. Admittedly, this characteristic is not as well defined as the first one, and the best way to identify it is to go through some examples.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/data-structure/when-to-use-dp.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741861,"modifiedTime":1677380709000,"sourceSize":1190,"sourcePath":"Computer/Data Structure/When to use DP.md","exportPath":"computer/data-structure/when-to-use-dp.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/database/cross-join.html":{"title":"CROSS JOIN","icon":"","description":"交叉联结是所有联结运算的基础\n对满足相同规则的表进行交叉联结的集合运算符是 CROSS JOIN（笛卡儿积）内联结是交叉联结的一部分，“内”也可以理解为“包含在交叉联 结结果中的部分”。相反，外联结的“外”可以理解为“交叉联结结果 之外的部分”。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/database/cross-join.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741474,"modifiedTime":1715413775825,"sourceSize":345,"sourcePath":"Computer/Database/CROSS JOIN.md","exportPath":"computer/database/cross-join.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/database/database.html":{"title":"Database","icon":"","description":"表的列（垂直方向）称为字段\n表的行（水平方向）称为记录“SQL基础教程（第2版） ([日] MICK) (Z-Library).pdf#page=42&amp;rect=182,52,516,218&amp;color=yellow” could not be found.<a data-tooltip-position=\"top\" aria-label=\"SQL基础教程（第2版） ([日] MICK) (Z-Library).pdf > page=112&amp;annotation=5625R\" data-href=\"SQL基础教程（第2版） ([日] MICK) (Z-Library).pdf#page=112&amp;annotation=5625R\" href=\"https://rinodg.pages.dev/.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">SQL基础教程（第2版） ([日] MICK) (Z-Library), p.93</a> GROUP BY 子 句的 书 写 位 置 也 有 严 格 要 求，一 定 要 写 在 FROM 语句之后（如果有 WHERE 子句的话需要写在 WHERE 子句之后）。 <br><a data-href=\"SQL 常见错误\" href=\"https://rinodg.pages.dev/computer/database/sql-常见错误.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">SQL 常见错误</a><br><a data-href=\"Views\" href=\"https://rinodg.pages.dev/computer/database/views.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Views</a><br><a data-href=\"Having &amp; Where\" href=\"https://rinodg.pages.dev/computer/database/having-&amp;-where.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Having &amp; Where</a><br><a data-href=\"集合运算\" href=\"https://rinodg.pages.dev/computer/database/集合运算.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">集合运算</a><br><a data-href=\"窗口函数\" href=\"https://rinodg.pages.dev/000-fleeting/窗口函数.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">窗口函数</a>","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[".html","computer/database/sql-常见错误.html#_0","computer/database/views.html#_0","computer/database/having-&-where.html#_0","computer/database/集合运算.html#_0","000-fleeting/窗口函数.html"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/database/database.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741630,"modifiedTime":1715414125385,"sourceSize":675,"sourcePath":"Computer/Database/Database.md","exportPath":"computer/database/database.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/database/having-&-where.html":{"title":"Having & Where","icon":"","description":"HAVING 和 WHERE 是 SQL 中用于筛选数据的两个关键字，它们的主要区别在于它们应用的时机和作用范围。 WHERE 子句用于在检索数据之前对行进行筛选，它在 SELECT 语句中出现在 FROM 子句之后，GROUP BY 子句之前。\nSELECT column1, column2\nFROM table_name\nWHERE condition; HAVING 子句用于在对分组的结果应用条件进行筛选，它出现在 GROUP BY 子句之后，ORDER BY 子句之前。\nSELECT column1, COUNT(*)\nFROM table_name\nGROUP BY column1\nHAVING COUNT(*) &gt; 1; 基本上，WHERE 用于过滤行，而 HAVING 用于过滤分组。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Having &amp; Where","level":1,"id":"Having_&_Where_0"}],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/database/having-&-where.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741837,"modifiedTime":1714460509356,"sourceSize":698,"sourcePath":"Computer/Database/Having & Where.md","exportPath":"computer/database/having-&-where.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/database/index-db.html":{"title":"index db","icon":"","description":"当涉及到 IndexedDB 和加密的 Web Storage，使用 Svelte 可能会涉及到更多的 JavaScript 代码。我将为你提供一个使用 Svelte 和 IndexedDB 来存储和检索密码的示例：首先，在你的 Svelte 组件中，你可以创建一个 IndexedDB 数据库并定义存储密码的对象存储空间。以下是一个基本的示例：&lt;script&gt; import { onMount } from 'svelte'; let password = ''; onMount(() =&gt; { const dbName = 'passwordsDB'; const storeName = 'passwords'; const request = window.indexedDB.open(dbName, 1); request.onupgradeneeded = (event) =&gt; { const db = event.target.result; db.createObjectStore(storeName, { keyPath: 'id', autoIncrement: true }); }; request.onsuccess = (event) =&gt; { const db = event.target.result; const transaction = db.transaction(storeName, 'readwrite'); const objectStore = transaction.objectStore(storeName); // 存储密码 const addRequest = objectStore.add({ password }); addRequest.onsuccess = () =&gt; { console.log('密码已存储'); }; addRequest.onerror = () =&gt; { console.error('密码存储错误'); }; // 检索密码 const getRequest = objectStore.get(1); getRequest.onsuccess = (event) =&gt; { const result = event.target.result; if (result) { console.log('检索到密码:', result.password); } else { console.log('未找到密码'); } }; getRequest.onerror = () =&gt; { console.error('密码检索错误'); }; transaction.oncomplete = () =&gt; { db.close(); }; }; request.onerror = () =&gt; { console.error('数据库打开错误'); }; });\n&lt;/script&gt; &lt;input bind:value={password} placeholder=\"输入密码\" /&gt;\n在这个示例中，我们使用 window.indexedDB.open() 方法来打开一个名为 passwordsDB 的 IndexedDB 数据库，并在 onupgradeneeded 事件中创建一个名为 passwords 的对象存储空间。通过 request.onsuccess 事件处理函数，我们获取到数据库实例并创建一个事务，在事务中访问 passwords 对象存储空间。我们使用 objectStore.add() 方法将密码存储到 IndexedDB 中，并使用 objectStore.get() 方法检索密码。这里我们使用了一个简单的自增的 id 属性来演示检索密码的示例。你可以根据你的需求进行更多操作，如更新密码、删除密码等。请注意，上述示例仅用于演示基本的 IndexedDB 操作和密码存储。在实际应用中，你需要根据你的具体需求和安全性要求来设计和实现更复杂的逻辑以保护密码和用户数据的安全。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/database/index-db.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741541,"modifiedTime":1693673408497,"sourceSize":2768,"sourcePath":"Computer/Database/index db.md","exportPath":"computer/database/index-db.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/database/sql-常见错误.html":{"title":"SQL  常见错误","icon":"","description":"“SQL基础教程（第2版） ([日] MICK) (Z-Library).pdf#page=116&amp;rect=178,66,510,287&amp;color=yellow” could not be found.<a data-tooltip-position=\"top\" aria-label=\"SQL基础教程（第2版） ([日] MICK) (Z-Library).pdf > page=173&amp;selection=59,0,61,2&amp;color=red\" data-href=\"SQL基础教程（第2版） ([日] MICK) (Z-Library).pdf#page=173&amp;selection=59,0,61,2&amp;color=red\" href=\"https://rinodg.pages.dev/.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">SQL基础教程（第2版） ([日] MICK) (Z-Library), p.154</a> 视图的限制① ——定义视图时不能使用ORDER BY子句 因为视图跟表中的数据一样，没有顺序\n<br><a data-tooltip-position=\"top\" aria-label=\"SQL基础教程（第2版） ([日] MICK) (Z-Library).pdf > page=176&amp;selection=70,1,76,15&amp;color=yellow\" data-href=\"SQL基础教程（第2版） ([日] MICK) (Z-Library).pdf#page=176&amp;selection=70,1,76,15&amp;color=yellow\" href=\"https://rinodg.pages.dev/.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">SQL基础教程（第2版） ([日] MICK) (Z-Library), p.157</a> 意事项由于 PostgreSQL 中的视图会被初始设定为只读，所以执行代码清单 5-6 中的 INSERT 语句时，会发生下面这样的错误。 ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[".html",".html"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/database/sql-常见错误.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741114,"modifiedTime":1714380069142,"sourceSize":815,"sourcePath":"Computer/Database/SQL  常见错误.md","exportPath":"computer/database/sql-常见错误.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/database/views.html":{"title":"Views","icon":"","description":"<a data-tooltip-position=\"top\" aria-label=\"SQL基础教程（第2版） ([日] MICK) (Z-Library).pdf > page=168&amp;selection=18,0,28,1&amp;color=yellow\" data-href=\"SQL基础教程（第2版） ([日] MICK) (Z-Library).pdf#page=168&amp;selection=18,0,28,1&amp;color=yellow\" href=\"https://rinodg.pages.dev/.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">SQL基础教程（第2版） ([日] MICK) (Z-Library), p.149</a> 从 SQL 的角度来看，视图和表是相同的，两者的区别在于表中保存的是实际的数据，而视图中保存的是 SELECT 语句（视图本身并不存储数据）。 ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[".html"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/database/views.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741885,"modifiedTime":1714373674519,"sourceSize":374,"sourcePath":"Computer/Database/Views.md","exportPath":"computer/database/views.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/database/外联结（outer-join）.html":{"title":"外联结（OUTER JOIN）","icon":"","description":"","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/database/外联结（outer-join）.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741674,"modifiedTime":1715413377951,"sourceSize":0,"sourcePath":"Computer/Database/外联结（OUTER JOIN）.md","exportPath":"computer/database/外联结（outer-join）.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/database/联结（join）.html":{"title":"联结（JOIN）","icon":"","description":"“SQL基础教程（第2版） ([日] MICK) (Z-Library).pdf#page=255&amp;rect=150,178,480,491” could not be found.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/database/联结（join）.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741040,"modifiedTime":1715134237809,"sourceSize":154,"sourcePath":"Computer/Database/联结（JOIN）.md","exportPath":"computer/database/联结（join）.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/database/集合运算.html":{"title":"集合运算","icon":"","description":"<a data-href=\"联结（JOIN）\" href=\"https://rinodg.pages.dev/computer/database/联结（join）.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">联结（JOIN）</a><br>\n<a data-href=\"外联结（OUTER JOIN）\" href=\"https://rinodg.pages.dev/computer/database/外联结（outer-join）.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">外联结（OUTER JOIN）</a><br>\n<a data-href=\"CROSS JOIN\" href=\"https://rinodg.pages.dev/computer/database/cross-join.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">CROSS JOIN</a>","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":["computer/database/联结（join）.html#_0","computer/database/外联结（outer-join）.html#_0","computer/database/cross-join.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/database/集合运算.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741172,"modifiedTime":1715413515550,"sourceSize":65,"sourcePath":"Computer/Database/集合运算.md","exportPath":"computer/database/集合运算.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/graphics/栅格化.html":{"title":"栅格化","icon":"","description":"（英式英語：rasterisation、美式英語：rasterization），又稱光柵化，是将<a data-href=\"矢量图形\" href=\"https://rinodg.pages.dev/computer/graphics/矢量图形.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">矢量图形</a> 格式表示的图像转换成<a data-tooltip-position=\"top\" aria-label=\"https://zh.wikipedia.org/wiki/%E9%BB%9E%E9%99%A3%E5%9C%96\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" title=\"點陣圖\" href=\"https://zh.wikipedia.org/wiki/%E9%BB%9E%E9%99%A3%E5%9C%96\" target=\"_self\">點陣圖</a>以用于<a data-tooltip-position=\"top\" aria-label=\"https://zh.wikipedia.org/wiki/%E6%98%BE%E7%A4%BA%E5%99%A8\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" title=\"显示器\" href=\"https://zh.wikipedia.org/wiki/%E6%98%BE%E7%A4%BA%E5%99%A8\" target=\"_self\">显示器</a>或者<a data-tooltip-position=\"top\" aria-label=\"https://zh.wikipedia.org/wiki/%E5%8D%B0%E8%A1%A8%E6%A9%9F\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" title=\"印表機\" href=\"https://zh.wikipedia.org/wiki/%E5%8D%B0%E8%A1%A8%E6%A9%9F\" target=\"_self\">印表機</a>输出的过程。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":["computer/graphics/矢量图形.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/graphics/栅格化.html","pathToRoot":"../..","attachments":[],"createdTime":1717430740985,"modifiedTime":1667906898000,"sourceSize":422,"sourcePath":"Computer/Graphics/栅格化.md","exportPath":"computer/graphics/栅格化.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/graphics/栅格图像.html":{"title":"栅格图像","icon":"","description":"在数字影像技术中，像素 (pixel，图像元素 Picture Element 的缩写) 是组成图像的最基础的元素。把数字图像放大后你会发现它呈网格状，每个网格单独呈现一种颜色，这些网格中的每一格就是一个像素。由像素构成的图像就是栅格图像。在 Krita 里面，当你使用一个大小为 1 像素的黑色笔刷在白色画布上作画时，你实际上是在把笔刷下面的那个像素的颜色从白改成了黑。如果把某个笔画放大观察，你可以看见许多颜色小方块，它们就是像素：","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/graphics/栅格图像.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741767,"modifiedTime":1667906950000,"sourceSize":582,"sourcePath":"Computer/Graphics/栅格图像.md","exportPath":"computer/graphics/栅格图像.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/graphics/矢量图像.html":{"title":"矢量图像","icon":"","description":"矢量图形是通过数学方式记录形状的，它们并不依赖像素。如果你在 Krita 的<a data-tooltip-position=\"top\" aria-label=\"https://docs.krita.org/zh_CN/reference_manual/layers_and_masks/vector_layers.html#vector-layers\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://docs.krita.org/zh_CN/reference_manual/layers_and_masks/vector_layers.html#vector-layers\" target=\"_self\">矢量图层</a>上使用矩形工具绘制了一个四边形，该工具实际上只创建了四个节点，每个节点都有一组 X 轴和 Y 轴坐标，四个节点之间以路径相连，路径被按照指定的参数描边后呈现出实际形状。当你移动了这些节点时，计算机会重新算出连线的路径并按照描边参数重新绘制形状。因此，无论你如何对矢量图形进行变形，它们呈现的图像品质会始终如一，不会劣化。在 Krita 里，矢量图层之外的内容都是栅格图像。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/graphics/矢量图像.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741877,"modifiedTime":1667907002000,"sourceSize":743,"sourcePath":"Computer/Graphics/矢量图像.md","exportPath":"computer/graphics/矢量图像.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/graphics/矢量图形.html":{"title":"矢量图形","icon":"","description":"矢量图形是<a data-tooltip-position=\"top\" aria-label=\"https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" title=\"计算机图形学\" href=\"https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6\" target=\"_self\">计算机图形学</a>中用<a data-tooltip-position=\"top\" aria-label=\"https://zh.wikipedia.org/wiki/%E7%82%B9\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" title=\"点\" href=\"https://zh.wikipedia.org/wiki/%E7%82%B9\" target=\"_self\">点</a>、<a data-tooltip-position=\"top\" aria-label=\"https://zh.wikipedia.org/wiki/%E7%9B%B4%E7%BA%BF\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" title=\"直线\" href=\"https://zh.wikipedia.org/wiki/%E7%9B%B4%E7%BA%BF\" target=\"_self\">直线</a>或者<a data-tooltip-position=\"top\" aria-label=\"https://zh.wikipedia.org/wiki/%E5%A4%9A%E8%BE%B9%E5%BD%A2\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" title=\"多边形\" href=\"https://zh.wikipedia.org/wiki/%E5%A4%9A%E8%BE%B9%E5%BD%A2\" target=\"_self\">多边形</a>等基于数学方程的几何图元表示的<a data-tooltip-position=\"top\" aria-label=\"https://zh.wikipedia.org/wiki/%E5%9B%BE%E5%83%8F\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" title=\"图像\" href=\"https://zh.wikipedia.org/wiki/%E5%9B%BE%E5%83%8F\" target=\"_self\">图像</a>。矢量图形与使用<a data-tooltip-position=\"top\" aria-label=\"https://zh.wikipedia.org/wiki/%E5%83%8F%E7%B4%A0\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" title=\"像素\" href=\"https://zh.wikipedia.org/wiki/%E5%83%8F%E7%B4%A0\" target=\"_self\">像素</a>表示图像的<a data-tooltip-position=\"top\" aria-label=\"https://zh.wikipedia.org/wiki/%E4%BD%8D%E5%9B%BE\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" title=\"位图\" href=\"https://zh.wikipedia.org/wiki/%E4%BD%8D%E5%9B%BE\" target=\"_self\">位图</a>不同。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/graphics/矢量图形.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741821,"modifiedTime":1667906862000,"sourceSize":658,"sourcePath":"Computer/Graphics/矢量图形.md","exportPath":"computer/graphics/矢量图形.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/programming/rust/attribute-like-macros.html":{"title":"Attribute-like macros","icon":"","description":"Attribute-like macros are similar to custom derive macros, but instead of generating code for the derive attribute, they allow you to create new attributes. They’re also more flexible: derive only works for structs and enums; attributes can be applied to other items as well, such as functions. Here’s an example of using an attribute-like macro: say you have an attribute named route that annotates functions when using a web application framework:#[route(GET, \"/\")]\nfn index() {\nThis #[route] attribute would be defined by the framework as a procedural macro. The signature of the macro definition function would look like this:#[proc_macro_attribute]\npub fn route(attr: TokenStream, item: TokenStream) -&gt; TokenStream {\nHere, we have two parameters of type TokenStream. The first is for the contents of the attribute: the GET, \"/\" part. The second is the body of the item the attribute is attached to: in this case, fn index() {} and the rest of the function’s body.Other than that, attribute-like macros work the same way as custom derive macros: you create a crate with the proc-macro crate type and implement a function that generates the code you want!","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/programming/rust/attribute-like-macros.html","pathToRoot":"../../..","attachments":[],"createdTime":1717430741070,"modifiedTime":1677489925000,"sourceSize":1204,"sourcePath":"Computer/Programming/Rust/Attribute-like macros.md","exportPath":"computer/programming/rust/attribute-like-macros.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/programming/rust/declarative-macro.html":{"title":"declarative macro","icon":"","description":"#[macro_export]\nmacro_rules! vec { ( $( $x:expr ),* ) =&gt; { { let mut temp_vec = Vec::new(); $( temp_vec.push($x); )* temp_vec } };\n}\nThe #[macro_export] annotation indicates that this macro should be made available whenever the crate in which the macro is defined is brought into scope. Without this annotation, the macro can’t be brought into scope.We then start the macro definition with macro_rules! and the name of the macro we’re defining without the exclamation mark. The name, in this case vec, is followed by curly brackets denoting the body of the macro definition.The structure in the vec! body is similar to the structure of a match expression. Here we have one arm with the pattern ( $( $x:expr ),* ), followed by =&gt; and the block of code associated with this pattern. If the pattern matches, the associated block of code will be emitted. Given that this is the only pattern in this macro, there is only one valid way to match; any other pattern will result in an error. More complex macros will have more than one arm.\nFirst, we use a set of parentheses to encompass the whole pattern. We use a dollar sign ($) to declare a variable in the macro system that will contain the Rust code matching the pattern. The dollar sign makes it clear this is a macro variable as opposed to a regular Rust variable. Next comes a set of parentheses that captures values that match the pattern within the parentheses for use in the replacement code. Within $() is $x:expr, which matches any Rust expression and gives the expression the name $x.Dataview (inline field '&gt;'): Error: -- PARSING FAILED -------------------------------------------------- &gt; 1 | &gt; | ^ Expected one of the following: '(', 'null', boolean, date, duration, file link, list ('[1, 2, 3]'), negated field, number, object ('{ a: 1, b: 2 }'), string, variable\nThe comma following $() indicates that a literal comma separator character could optionally appear after the code that matches the code in $(). The * specifies that the pattern matches zero or more of whatever precedes the *.When we call this macro with vec![1, 2, 3];, the $x pattern matches three times with the three expressions 1, 2, and 3.Now let’s look at the pattern in the body of the code associated with this arm: temp_vec.push() within $()* is generated for each part that matches $() in the pattern zero or more times depending on how many times the pattern matches. The $x is replaced with each expression matched. When we call this macro with vec![1, 2, 3];, the code generated that replaces this macro call will be the following:{ let mut temp_vec = Vec::new(); temp_vec.push(1); temp_vec.push(2); temp_vec.push(3); temp_vec\n}\nWe’ve defined a macro that can take any number of arguments of any type and can generate code to create a vector containing the specified elements.To learn more about how to write macros, consult the online documentation or other resources, such as <a data-tooltip-position=\"top\" aria-label=\"https://veykril.github.io/tlborm/\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://veykril.github.io/tlborm/\" target=\"_self\">“The Little Book of Rust Macros”</a> started by Daniel Keep and continued by Lukas Wirth.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/programming/rust/declarative-macro.html","pathToRoot":"../../..","attachments":[],"createdTime":1717430741823,"modifiedTime":1677489244000,"sourceSize":2962,"sourcePath":"Computer/Programming/Rust/declarative macro.md","exportPath":"computer/programming/rust/declarative-macro.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/programming/rust/derive-macro.html":{"title":"derive Macro","icon":"","description":"Let’s create a crate named hello_macro that defines a trait named HelloMacro with one associated function named hello_macro. Rather than making our users implement the HelloMacro trait for each of their types, we’ll provide a procedural macro so users can annotate their type with #[derive(HelloMacro)] to get a default implementation of the hello_macro function. The default implementation will print Hello, Macro! My name is TypeName! where TypeName is the name of the type on which this trait has been defined. In other words, we’ll write a crate that enables another programmer to write code like Listing 19-30 using our crate.use hello_macro::HelloMacro;\nuse hello_macro_derive::HelloMacro; #[derive(HelloMacro)]\nstruct Pancakes; fn main() { Pancakes::hello_macro();\n}\nequivalent touse hello_macro::HelloMacro; struct Pancakes; impl HelloMacro for Pancakes { fn hello_macro() { println!(\"Hello, Macro! My name is Pancakes!\"); }\n} fn main() { Pancakes::hello_macro();\n}\nderive 是 Rust 中的一个宏，它允许程序员根据一个或多个 trait 自动为结构体或枚举类型实现方法。这个宏是 Rust 语言中非常常用的一个特性，能够减少编写重复代码的工作量，并提高代码的可维护性。derive 宏用于自动生成一些常见的实现，比如比较运算符、打印调试信息、序列化和反序列化等。例如，为了让一个结构体可以通过 println! 宏输出，只需要在结构体的定义前面加上 #[derive(Debug)]，就可以自动生成 Debug trait 的实现。下面是一个例子：rustCopy code#[derive(Debug)]\nstruct Person { name: String, age: u32,\n} fn main() { let p = Person { name: String::from(\"Alice\"), age: 30 }; println!(\"{:?}\", p);\n} 在上面的例子中，Person 结构体通过 derive(Debug) 自动生成了 Debug trait 的实现。在 main 函数中，我们可以使用 println! 宏输出 Person 实例的调试信息。derive 宏不仅可以应用于结构体类型，也可以应用于枚举类型，用于自动生成枚举类型的一些常见实现。例如，为了让一个枚举类型可以通过 match 表达式进行匹配，只需要在枚举类型的定义前面加上 #[derive(Debug, PartialEq)]，就可以自动生成 Debug 和 PartialEq trait 的实现。总之，derive 宏是 Rust 语言中的一个非常实用的特性，可以帮助程序员自动生成一些常见的实现，从而减少重复劳动，提高代码的可维护性和可读性。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"来自 ChatGPT","level":2,"id":"来自_ChatGPT_0"}],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/programming/rust/derive-macro.html","pathToRoot":"../../..","attachments":[],"createdTime":1717430741768,"modifiedTime":1677489722000,"sourceSize":2637,"sourcePath":"Computer/Programming/Rust/derive Macro.md","exportPath":"computer/programming/rust/derive-macro.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/programming/rust/function-like-macros.html":{"title":"Function-like macros","icon":"","description":"Function-like macros define macros that look like function calls. Similarly to macro_rules! macros, they’re more flexible than functions; for example, they can take an unknown number of arguments. However, macro_rules! macros can be defined only using the match-like syntax we discussed in the section <a data-tooltip-position=\"top\" aria-label=\"chrome-extension://pcmpcfapbekmbjjkdalcgopdkipoggdi/_generated_background_page.html#declarative-macros-with-macro_rules-for-general-metaprogramming\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://rinodg.pages.dev/chrome-extension:/pcmpcfapbekmbjjkdalcgopdkipoggdi/_generated_background_page.html#declarative-macros-with-macro_rules-for-general-metaprogramming\" target=\"_self\">“Declarative Macros with <code></code> for General Metaprogramming”</a>macro_rules! earlier. Function-like macros take a TokenStream parameter and their definition manipulates that TokenStream using Rust code as the other two types of procedural macros do. An example of a function-like macro is an sql! macro that might be called like so:let sql = sql!(SELECT * FROM posts WHERE id=1);\nThis macro would parse the SQL statement inside it and check that it’s syntactically correct, which is much more complex processing than a macro_rules! macro can do. The sql! macro would be defined like this:#[proc_macro]\npub fn sql(input: TokenStream) -&gt; TokenStream {\nThis definition is similar to the custom derive macro’s signature: we receive the tokens that are inside the parentheses and return the code we wanted to generate.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":["chrome-extension://pcmpcfapbekmbjjkdalcgopdkipoggdi/_generated_background_page.html#declarative-macros-with-macro_rules-for-general-metaprogramming"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/programming/rust/function-like-macros.html","pathToRoot":"../../..","attachments":[],"createdTime":1717430741268,"modifiedTime":1677489939000,"sourceSize":1304,"sourcePath":"Computer/Programming/Rust/Function-like macros.md","exportPath":"computer/programming/rust/function-like-macros.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/programming/rust/lifetime-annotations-in-method-definitions.html":{"title":"Lifetime Annotations in Method Definitions","icon":"","description":"（实现方法时）结构体字段的生命周期必须总是在 impl 关键字之后声明并在结构体名称之后被使用，因为这些生命周期是结构体类型的一部分。impl 块里的方法签名中，引用可能与结构体字段中的引用相关联，也可能是独立的。另外，生命周期省略规则也经常让我们无需在方法签名中使用生命周期注解。让我们看看一些使用示例 10-24 中定义的结构体 ImportantExcerpt 的例子。首先，这里有一个方法 level。其唯一的参数是 self 的引用，而且返回值只是一个 i32，并不引用任何值：\nimpl 之后和类型名称之后的生命周期参数是必要的，不过因为<a data-tooltip-position=\"top\" aria-label=\"Lifetime Elision > ^7077e2\" data-href=\"Lifetime Elision#^7077e2\" href=\"https://rinodg.pages.dev/computer/programming/rust/lifetime-elision.html#^7077e2_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">第一条生命周期规则</a>我们并不必须标注 self 引用的生命周期。struct ImportantExcerpt&lt;'a&gt; { part: &amp;'a str,\n}\nimpl&lt;'a&gt; ImportantExcerpt&lt;'a&gt; { fn level(&amp;self) -&gt; i32 { 3 }\n}\n<br>这里是一个适用于<a data-tooltip-position=\"top\" aria-label=\"Lifetime Elision > ^c434f7\" data-href=\"Lifetime Elision#^c434f7\" href=\"https://rinodg.pages.dev/computer/programming/rust/lifetime-elision.html#^c434f7_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">第三条生命周期省略规则</a>的例子：\nimpl&lt;'a&gt; ImportantExcerpt&lt;'a&gt; { fn announce_and_return_part(&amp;self, announcement: &amp;str) -&gt; &amp;str { println!(\"Attention please: {}\", announcement); self.part }\n} fn main() { let novel = String::from(\"Call me Ishmael. Some years ago...\"); let first_sentence = novel.split('.').next().expect(\"Could not find a '.'\"); let i = ImportantExcerpt { part: first_sentence, };\n}\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":["computer/programming/rust/lifetime-elision.html#^7077e2_0","computer/programming/rust/lifetime-elision.html#^c434f7_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/programming/rust/lifetime-annotations-in-method-definitions.html","pathToRoot":"../../..","attachments":[],"createdTime":1717430741750,"modifiedTime":1677591652000,"sourceSize":1503,"sourcePath":"Computer/Programming/Rust/Lifetime Annotations in Method Definitions.md","exportPath":"computer/programming/rust/lifetime-annotations-in-method-definitions.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/programming/rust/lifetime-elision.html":{"title":"Lifetime Elision","icon":"","description":"被编码进 Rust 引用分析的模式被称为 生命周期省略规则（lifetime elision rules）。这并不是需要程序员遵守的规则；这些规则是一系列特定的场景，此时编译器会考虑，如果代码符合这些场景，就无需明确指定生命周期。函数或方法的参数的生命周期被称为 输入生命周期（input lifetimes），而返回值的生命周期被称为 输出生命周期（output lifetimes）。编译器采用三条规则来判断引用何时不需要明确的注解。第一条规则适用于输入生命周期，后两条规则适用于输出生命周期。如果编译器检查完这三条规则后仍然存在没有计算出生命周期的引用，编译器将会停止并生成错误。这些规则适用于 fn 定义，以及 impl 块。第一条规则是编译器为每一个是引用参数都分配了一个生命周期参数。换句话说就是，有一个引用参数的函数有一个生命周期参数：fn foo&lt;'a&gt;(x: &amp;'a i32)，有两个引用参数的函数有两个不同的生命周期参数，fn foo&lt;'a, 'b&gt;(x: &amp;'a i32, y: &amp;'b i32)，依此类推。 第二条规则是如果只有一个输入生命周期参数，那么它被赋予所有输出生命周期参数：fn foo&lt;'a&gt;(x: &amp;'a i32) -&gt; &amp;'a i32。第三条规则是如果方法有多个输入生命周期参数并且其中一个参数是 &amp;self 或 &amp;mut self，说明是个对象的方法 (method)(译者注：这里涉及 rust 的面向对象参见 17 章)，那么所有输出生命周期参数被赋予 self 的生命周期。第三条规则使得方法更容易读写，因为只需更少的符号。 ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/programming/rust/lifetime-elision.html","pathToRoot":"../../..","attachments":[],"createdTime":1717430741865,"modifiedTime":1677591650000,"sourceSize":1691,"sourcePath":"Computer/Programming/Rust/Lifetime Elision.md","exportPath":"computer/programming/rust/lifetime-elision.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/programming/rust/litetime.html":{"title":"litetime","icon":"","description":"The main aim of lifetimes is to prevent dangling references, which cause a program to reference data other than the data it’s intended to reference. Consider the program in Listing 10-16, which has an outer scope and an inner scope.fn main() { let r; // ---------+-- 'a { // | let x = 5; // -+-- 'b | r = &amp;x; // | | } // -+ | println!(\"r: {}\", r); // |\n} // ---------+ the subject of the reference doesn’t live as long as the reference.生命周期注解语法生命周期注解并不改变任何引用的生命周期的长短。相反它们描述了多个引用生命周期相互的关系，而不影响其生命周期。与当函数签名中指定了泛型类型参数后就可以接受任何类型一样，当指定了泛型生命周期后函数也能接受任何生命周期的引用。&amp;i32 // 引用\n&amp;'a i32 // 带有显式生命周期的引用\n&amp;'a mut i32 // 带有显式生命周期的可变引用\nOne lifetime annotation by itself doesn’t have much meaning, because the annotations are meant to tell Rust how generic lifetime parameters of multiple references relate to each other.目前为止，我们定义的结构体全都包含拥有所有权的类型。也可以定义包含引用的结构体，不过这需要为结构体定义中的每一个引用添加生命周期注解。示例 10-24 中有一个存放了一个字符串 slice 的结构体 ImportantExcerpt。struct ImportantExcerpt&lt;'a&gt; { part: &amp;'a str,\n} fn main() { let novel = String::from(\"Call me Ishmael. Some years ago...\"); let first_sentence = novel.split('.').next().expect(\"Could not find a '.'\"); let i = ImportantExcerpt { part: first_sentence, };\n}\n<a data-href=\"Lifetime Elision\" href=\"https://rinodg.pages.dev/computer/programming/rust/lifetime-elision.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Lifetime Elision</a><br>\n<a data-href=\"Lifetime Annotations in Method Definitions\" href=\"https://rinodg.pages.dev/computer/programming/rust/lifetime-annotations-in-method-definitions.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Lifetime Annotations in Method Definitions</a><br>\n<a data-href=\"Static Lifetime\" href=\"https://rinodg.pages.dev/computer/programming/rust/static-lifetime.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Static Lifetime</a>","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"结构体定义中的生命周期注解","level":3,"id":"结构体定义中的生命周期注解_0"}],"links":["computer/programming/rust/lifetime-elision.html#_0","computer/programming/rust/lifetime-annotations-in-method-definitions.html#_0","computer/programming/rust/static-lifetime.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/programming/rust/litetime.html","pathToRoot":"../../..","attachments":[],"createdTime":1717430741634,"modifiedTime":1677591798000,"sourceSize":2024,"sourcePath":"Computer/Programming/Rust/litetime.md","exportPath":"computer/programming/rust/litetime.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/programming/rust/procedural-macros.html":{"title":"Procedural Macros","icon":"","description":"The second form of macros is the procedural macro, which acts more like a function (and is a type of procedure). Procedural macros accept some code as an input, operate on that code, and produce some code as an output rather than matching against patterns and replacing the code with other code as declarative macros do. The three kinds of procedural macros are custom derive, attribute-like, and function-like, and all work in a similar fashion.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Procedural Macros for Generating Code from Attributes","level":3,"id":"Procedural_Macros_for_Generating_Code_from_Attributes_0"}],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/programming/rust/procedural-macros.html","pathToRoot":"../../..","attachments":[],"createdTime":1717430741669,"modifiedTime":1677842077443,"sourceSize":509,"sourcePath":"Computer/Programming/Rust/Procedural Macros.md","exportPath":"computer/programming/rust/procedural-macros.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/programming/rust/rust.html":{"title":"Rust","icon":"","description":"","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/programming/rust/rust.html","pathToRoot":"../../..","attachments":[],"createdTime":1717430740969,"modifiedTime":1677483722000,"sourceSize":0,"sourcePath":"Computer/Programming/Rust/Rust.md","exportPath":"computer/programming/rust/rust.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/programming/rust/rust-closures.html":{"title":"Rust Closures","icon":"","description":"Rust’s closures are anonymous functions you can save in a variable or pass as arguments to other functions. You can create the closure in one place and then call the closure elsewhere to evaluate it in a different context. Unlike functions, closures can capture values from the scope in which they’re defined. We’ll demonstrate how these closure features allow for code reuse and behavior customization.\nRust 的 闭包（closures）是可以保存在一个变量中或作为参数传递给其他函数的匿名函数。可以在一个地方创建闭包，然后在不同的上下文中执行闭包运算。不同于函数，闭包允许捕获被定义时所在作用域中的值。我们将展示闭包的这些功能如何复用代码和自定义行为。闭包可以通过三种方式捕获其环境，它们直接对应到函数获取参数的三种方式：不可变借用，可变借用和获取所有权。闭包会根据函数体中如何使用被捕获的值决定用哪种方式捕获。一旦闭包捕获了定义它的环境中一个值的引用或者所有权（也就影响了什么会被移 进 闭包，如有)，闭包体中的代码定义了稍后在闭包计算时对引用或值如何操作（也就影响了什么会被移 出 闭包，如有）。闭包体可以做以下任何事：将一个捕获的值移出闭包，修改捕获的值，既不移动也不修改值，或者一开始就不从环境中捕获值。闭包捕获和处理环境中的值的方式影响闭包实现的 trait。Trait 是函数和结构体指定它们能用的闭包的类型的方式。取决于闭包体如何处理值，闭包自动、渐进地实现一个、两个或三个 Fn trait。\nFnOnce 适用于能被调用一次的闭包，所有闭包都至少实现了这个 trait，因为所有闭包都能被调用。一个会将捕获的值移出闭包体的闭包只实现 FnOnce trait，这是因为它只能被调用一次。\nFnMut 适用于不会将捕获的值移出闭包体的闭包，但它可能会修改被捕获的值。这类闭包可以被调用多次。\nFn 适用于既不将被捕获的值移出闭包体也不修改被捕获的值的闭包，当然也包括不从环境中捕获值的闭包。这类闭包可以被调用多次而不改变它们的环境，这在会多次并发调用闭包的场景中十分重要。\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"捕获引用或者移动所有权","level":2,"id":"捕获引用或者移动所有权_0"},{"heading":"将被捕获的值移出闭包和 <code>Fn</code> trait","level":3,"id":"将被捕获的值移出闭包和_`Fn`_trait_0"}],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/programming/rust/rust-closures.html","pathToRoot":"../../..","attachments":[],"createdTime":1717430741800,"modifiedTime":1677594176000,"sourceSize":2470,"sourcePath":"Computer/Programming/Rust/Rust Closures.md","exportPath":"computer/programming/rust/rust-closures.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/programming/rust/rust-oop.html":{"title":"Rust OOP","icon":"","description":"在 rust 中 trait 代表一个行为，它不包含 Object。\ntheir specific purpose is to allow abstraction across common behavior.You answered 0/1 questions correctly.In the running example from this section, a blog post could have one of three states: Draft, PendingReview, and Published. In the example, each state was represented as a struct, and state transitions was represented as trait methods returning trait objects.An alternative implementation could represent the states as an enum, like this:enum BlogState { Draft, PendingReview, Published\n} impl Post { fn request_review(&amp;mut self) { use BlogState::*; self.state = match self.state { Draft =&gt; PendingReview, PendingReview =&gt; PendingReview, Published =&gt; Published } }\n}\nWhich of the following are valid reasons to prefer the struct/trait representation over the enum representation?🐞You answered:\nAn API client could add a new method for all states in the system\nThe use of match is slower at runtime than dynamic dispatch\nThe correct answer is:\nAn API client could add a new state to the system\nAdding a new state does not require modifying methods on other states\nContext: The struct/trait approach is extensible in the sense that an API client could potentially create a new state (such as Retracted) without changing the core API functionality. When adding this state, the methods for other states do not need to be changed. Whereas with enums, a client cannot add a new branch to the enum. Moreover, all match expressions must be updated when a state is added.A match is not likely to be slower than dynamic dispatch. A match is a simple branch based on an enum's tag, while dynamic dispatch requires layers of indirection through a trait object's virtual table with non-inlined function calls.An API client cannot add a new method for existing states in the struct/trait approach, they can only add new states. The methods are fixed by the API author's trait definition. Note that you could add a new method which only builds on existing methods via extension traits, such as:trait StateExt { fn request_review_twice(self: Box&lt;Self&gt;) -&gt; Box&lt;dyn State&gt;;\n} impl&lt;S: State&gt; StateExt for S { fn request_review_twice(self: Box&lt;Self&gt;) -&gt; Box&lt;dyn State&gt; { self.request_review().request_review() }\n}\nBut these extensions cannot read the internal data of the states.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Quiz","level":3,"id":"Quiz_0"},{"heading":"Answer Review","level":3,"id":"Answer_Review_0"},{"heading":"Question 1","level":4,"id":"Question_1_0"}],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/programming/rust/rust-oop.html","pathToRoot":"../../..","attachments":[],"createdTime":1717430741751,"modifiedTime":1677401834000,"sourceSize":2569,"sourcePath":"Computer/Programming/Rust/Rust OOP.md","exportPath":"computer/programming/rust/rust-oop.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/programming/rust/rust-pattern-matching.html":{"title":"Rust Pattern Matching","icon":"","description":"Patterns come in two forms: refutable and irrefutable.\nPatterns that will match for any possible value passed are irrefutable. An example would be x in the statement let x = 5; because x matches anything and therefore cannot fail to match. Patterns that can fail to match for some possible value are refutable. An example would be Some(x) in the expression if let Some(x) = a_value because if the value in the a_value variable is None rather than Some, the Some(x) pattern will not match.Cases:In match expressions, you can match multiple patterns using the | syntax, which is the pattern or operator. For example, in the following code we match the value of x against the match arms, the first of which has an or option, meaning if the value of x matches either of the values in that arm, that arm’s code will run:fn main() { let x = 1; match x { 1 | 2 =&gt; println!(\"one or two\"), 3 =&gt; println!(\"three\"), _ =&gt; println!(\"anything\"), }\n}\nThis code prints one or two.The ..= syntax allows us to match to an inclusive range of values. In the following code, when a pattern matches any of the values within the given range, that arm will execute:fn main() { let x = 5; match x { 1..=5 =&gt; println!(\"one through five\"), _ =&gt; println!(\"something else\"), }\n}\nIf x is 1, 2, 3, 4, or 5, the first arm will match. This syntax is more convenient for multiple match values than using the | operator to express the same idea; if we were to use | we would have to specify 1 | 2 | 3 | 4 | 5. Specifying a range is much shorter, especially if we want to match, say, any number between 1 and 1,000!The compiler checks that the range isn’t empty at compile time, and because the only types for which Rust can tell if a range is empty or not are char and numeric values, ranges are only allowed with numeric or char values.Here is an example using ranges of char values:fn main() { let x = 'c'; match x { 'a'..='j' =&gt; println!(\"early ASCII letter\"), 'k'..='z' =&gt; println!(\"late ASCII letter\"), _ =&gt; println!(\"something else\"), }\n}\nRust can tell that 'c' is within the first pattern’s range and prints early ASCII letter.fn main() { let favorite_color: Option&lt;&amp;str&gt; = None; let is_tuesday = false; let age: Result&lt;u8, _&gt; = \"34\".parse(); if let Some(color) = favorite_color { println!(\"Using your favorite color, {color}, as the background\"); } else if is_tuesday { println!(\"Tuesday is green day!\"); } else if let Ok(age) = age { if age &gt; 30 { println!(\"Using purple as the background color\"); } else { println!(\"Using orange as the background color\"); } } else { println!(\"Using blue as the background color\"); }\n}\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"<a data-tooltip-position=\"top\" aria-label=\"chrome-extension://pcmpcfapbekmbjjkdalcgopdkipoggdi/_generated_background_page.html#multiple-patterns\" rel=\"noopener nofollow\" class=\"external-link\" href=\"chrome-extension://pcmpcfapbekmbjjkdalcgopdkipoggdi/_generated_background_page.html#multiple-patterns\" target=\"_blank\">Multiple Patterns</a>","level":3,"id":"[Multiple_Patterns](chrome-extension//pcmpcfapbekmbjjkdalcgopdkipoggdi/_generated_background_page.html#multiple-patterns)_0"},{"heading":"<a data-tooltip-position=\"top\" aria-label=\"chrome-extension://pcmpcfapbekmbjjkdalcgopdkipoggdi/_generated_background_page.html#matching-ranges-of-values-with-\" rel=\"noopener nofollow\" class=\"external-link\" href=\"chrome-extension://pcmpcfapbekmbjjkdalcgopdkipoggdi/_generated_background_page.html#matching-ranges-of-values-with-\" target=\"_blank\">Matching Ranges of Values with <code>..=</code></a>","level":3,"id":"[Matching_Ranges_of_Values_with_`..=`](chrome-extension//pcmpcfapbekmbjjkdalcgopdkipoggdi/_generated_background_page.html#matching-ranges-of-values-with-)_0"}],"links":["chrome-extension://pcmpcfapbekmbjjkdalcgopdkipoggdi/_generated_background_page.html#multiple-patterns","chrome-extension://pcmpcfapbekmbjjkdalcgopdkipoggdi/_generated_background_page.html#matching-ranges-of-values-with-"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/programming/rust/rust-pattern-matching.html","pathToRoot":"../../..","attachments":[],"createdTime":1717430741312,"modifiedTime":1677483408000,"sourceSize":3216,"sourcePath":"Computer/Programming/Rust/Rust Pattern Matching.md","exportPath":"computer/programming/rust/rust-pattern-matching.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/programming/rust/smart-point.html":{"title":"smart point","icon":"","description":"\n来自 Chatgpt 的解释 在智能指针 Rc&lt;T&gt; 的引用计数为 0 时，对象就会被清除。因此，如果一个对象只被弱引用指向，它就会被回收。 weak_count 就是指弱引用的数量，它表示对象的引用计数是否为 0，这对于判断对象是否被回收很有用。 通过使用 Weak&lt;T&gt; 和 Rc&lt;T&gt;，你可以实现循环引用，这样就不会因为内存泄露而导致程序崩溃。在 Rust 中，强引用的数量是固定的，并且在编译时就能确定。但是，弱引用的数量是不固定的，因此通过使用弱引用可以避免内存泄露。 如果你不使用 Weak&lt;T&gt; 而直接使用 Rc&lt;T&gt;，那么引用计数会增加，并且引用的对象永远不会被清除。这很可能会导致内存泄露，因为如果你在某些地方创建了循环引用，那么引用的对象永远不会被清除，进而导致内存不断增加。 为了避免这种情况，你需要使用 Weak&lt;T&gt; 来指向对象，这样在没有强引用指向对象时它就可以被清除。这样可以避免内存泄露，同时还能使程序更加高效。 ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/programming/rust/smart-point.html","pathToRoot":"../../..","attachments":[],"createdTime":1717430741748,"modifiedTime":1680879790000,"sourceSize":1147,"sourcePath":"Computer/Programming/Rust/smart point.md","exportPath":"computer/programming/rust/smart-point.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/programming/rust/static-lifetime.html":{"title":"Static Lifetime","icon":"","description":"One special lifetime we need to discuss is 'static, which denotes that the affected reference can live for the entire duration of the program. All string literals have the 'static lifetime, which we can annotate as follows:fn main() {\nlet s: &amp;'static str = \"I have a static lifetime.\";\n}\nThe text of this string is stored directly in the program’s binary, which is always available. Therefore, the lifetime of all string literals is 'static.You might see suggestions to use the 'static lifetime in error messages. But before specifying 'static as the lifetime for a reference, think about whether the reference you have actually lives the entire lifetime of your program or not, and whether you want it to. Most of the time, an error message suggesting the 'static lifetime results from attempting to create a dangling reference or a mismatch of the available lifetimes. In such cases, the solution is fixing those problems, not specifying the 'static lifetime.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/programming/rust/static-lifetime.html","pathToRoot":"../../..","attachments":[],"createdTime":1717430741182,"modifiedTime":1677591794000,"sourceSize":996,"sourcePath":"Computer/Programming/Rust/Static Lifetime.md","exportPath":"computer/programming/rust/static-lifetime.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/programming/rust/unsafe-rust.html":{"title":"unsafe rust","icon":"","description":"To switch to unsafe Rust, use the unsafe keyword and then start a new block that holds the unsafe code. You can take five actions in unsafe Rust that you can’t in safe Rust, which we call unsafe superpowers. Those superpowers include the ability to:\nDereference a raw pointer\nCall an unsafe function or method\nAccess or modify a mutable static variable\nImplement an unsafe trait\nAccess fields of unions\nThe unsafe keyword only gives you access to these five features that are then not checked by the compiler for memory safety. You’ll still get some degree of safety inside of an unsafe block.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Unsafe Superpowers","level":2,"id":"Unsafe_Superpowers_0"}],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/programming/rust/unsafe-rust.html","pathToRoot":"../../..","attachments":[],"createdTime":1717430741397,"modifiedTime":1677483882000,"sourceSize":647,"sourcePath":"Computer/Programming/Rust/unsafe rust.md","exportPath":"computer/programming/rust/unsafe-rust.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/programming/elixir.html":{"title":"Elixir","icon":"","description":"In Elixir, all datatypes evaluate to a truthy or falsy value when they are encountered in a boolean context (like an if expression). All data is considered truthy except for false and nil. In particular, empty strings, the integer 0, and empty lists are all considered truthy in Elixir.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/programming/elixir.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741019,"modifiedTime":1699252933420,"sourceSize":292,"sourcePath":"Computer/Programming/Elixir.md","exportPath":"computer/programming/elixir.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/web-applications/cascading-style-sheets.html":{"title":"Cascading Style Sheets","icon":"","description":"\nDriving problem behind CSS\nWhat font type and size does &lt;h1&gt;Introduction&lt;/h1&gt; generate? Answer: Some default from the browser (HTML tells what browser how) Early HTML - Override defaults with attributes &lt;table border=\"2\" bordercolor=\"black\"&gt; Style sheets were added to address this: Specify style to use rather than browser default\nNot have to code styling on every element Key concept: Separate style from content\nContent (what to display) is in HTML files\nFormatting information (how to display it) is in separate style sheets (.css files).\nUse an element attribute named class to link (e.g. &lt;span class=\"test\"&gt;)\nResult: define style information once, use in many places Consider can you make all the text in the app slightly bigger?\nOr purple is our new company color. <img src=\"https://i.imgur.com/2ElZpzb.png\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\">\n<br><img src=\"https://i.imgur.com/0G9PkNa.png\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\">\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/web-applications/cascading-style-sheets.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741819,"modifiedTime":1670335511000,"sourceSize":897,"sourcePath":"Computer/Web Applications/Cascading Style Sheets.md","exportPath":"computer/web-applications/cascading-style-sheets.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/web-applications/debugging-node-applications.html":{"title":"Debugging Node applications","icon":"","description":"js 佬的东西真难用Chrome dev tools调试也可以通过Chrome浏览器的开发者控制台，用命令启动你的应用。node --inspect index.js你可以通过点击Chrome开发者控制台中出现的绿色图标--节点标志--来访问调试器。<img alt=\"fullstack content\" src=\"https://fullstackopen.com/static/98eea9ee4f184a484417314745f7422a/5a190/37.png\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\">调试视图的工作方式与React应用的工作方式相同。Sources标签可用于设置断点，代码的执行将被暂停。<br><img alt=\"fullstack content\" src=\"https://fullstackopen.com/static/55e5f6c8afb83433a723a0da5c575a32/5a190/38eb.png\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\">所有应用的console.log消息将出现在调试器的Console标签中。你也可以检查变量的值和执行你自己的JavaScript代码。<br><img alt=\"fullstack content\" src=\"https://fullstackopen.com/static/f4ab60bfb4c362e50561a48eb231a212/5a190/39ea.png\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/web-applications/debugging-node-applications.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741593,"modifiedTime":1670685521000,"sourceSize":864,"sourcePath":"Computer/Web Applications/Debugging Node applications.md","exportPath":"computer/web-applications/debugging-node-applications.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/web-applications/debugging-react-applications.html":{"title":"Debugging React applications","icon":"","description":"一个典型的开发者的大部分时间都花在调试和阅读现有的代码上。偶尔我们也会写一两行新的代码，但我们的大部分时间都花在试图弄清楚为什么某个东西坏了或某个东西是如何工作的。因此，良好的调试实践和工具是非常重要的。我们很幸运，在调试方面，React是一个对开发者极其友好的库。在我们继续之前，让我们提醒自己网络开发中最重要的规则之一。\n始终保持浏览器的开发者控制台是打开的。 特别是控制台标签应该一直打开，除非有特别的原因要查看其他标签。\n保持你的代码和网页一起打开，同时打开，一直打开。记录到控制台决不是调试我们的应用的唯一方法。您可以在Chrome开发者控制台的调试器中暂停应用代码的执行，方法是在代码的任何地方写下<a data-tooltip-position=\"top\" aria-label=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger\" target=\"_self\">debugger</a>命令。一旦执行到debugger命令被执行的地方，执行将暂停。<br><img alt=\"fullstack content\" src=\"https://fullstackopen.com/static/4a4bced189180676ff4019f459be833e/5a190/7a.png\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\">通过进入Console标签，很容易检查变量的当前状态。<br><img alt=\"fullstack content\" src=\"https://fullstackopen.com/static/5ba1388f4d17134dcfc62fbeb2251421/5a190/8a.png\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Debugging React applications","level":3,"id":"Debugging_React_applications_1"},{"heading":"The first rule of web development","level":4,"id":"The_first_rule_of_web_development_0"}],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/web-applications/debugging-react-applications.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741880,"modifiedTime":1670465815000,"sourceSize":1442,"sourcePath":"Computer/Web Applications/Debugging React applications.md","exportPath":"computer/web-applications/debugging-react-applications.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/web-applications/document-object-model.html":{"title":"Document object Model","icon":"","description":"我们可以将 html 页面看作隐式树结构。html head link script body div h1 div ul li li li form input input\n文档对象模型Document Object Model，或DOM，是一个应用编程接口(API)，它能够对与网页相对应的元素树进行程序化修改。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/web-applications/document-object-model.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741046,"modifiedTime":1670335318000,"sourceSize":369,"sourcePath":"Computer/Web Applications/Document object Model.md","exportPath":"computer/web-applications/document-object-model.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/web-applications/graphql.html":{"title":"GraphQL","icon":"","description":"GraphQL 有一些替代品。其中最常见的替代品包括 REST 和 gRPC。REST（Representational State Transfer）是一种软件架构风格，它提供了一组规范，用于客户端和服务器之间通过 HTTP 进行通信。REST 支持多种语言和平台，并且在设计时具有简洁性和灵活性。gRPC（Google Remote Procedure Call）是一种高性能、开源的远程过程调用系统，它可以在不同语言之间进行通信。gRPC 使用 HTTP/2 协议进行通信，并支持双向流、流控制和请求/响应多路复用。与 GraphQL 相比，REST 和 gRPC 都有一些优点和缺点。对于 REST，它支持更多的语言和平台，并且在设计时具有简洁性和灵活性。但它的实现相对比较复杂，并且在资源定位和访问控制方面缺乏统一的标准。对于 gRPC，它支持多种语言和平台，并且具有高性能和高可用性。但由于它使用了 HTTP/2 协议，可能会造成与旧版本浏览器或代理服务器的不兼容。因此，REST 和 gRPC 都可以作为 GraphQL 的替代品，但具体使用哪种技术取决于具体的需求和应用场景。对于需要多种语言和平台支持的应用，REST 可能是一个更好的选择。它支持更多的语言和平台，并且在设计时具有简洁性和灵活性。但由于它的实现相对比较复杂，需要开发者清楚地理解 REST 的规范和原则，才能够使用它来设计和开发应用。对于需要高性能和高可用性的应用，gRPC 可能是一个更好的选择。它支持多种语言和平台，并且具有高性能和高可用性。但由于它使用了 HTTP/2 协议，可能会造成与旧版本浏览器或代理服务器的不兼容。因此，使用 gRPC 时，需要考虑到这一点，确保它能够与现有的硬件和软件环境协同工作。总之，REST 和 gRPC 都是可以作为 GraphQL 的替代品，它们各有优点和缺点。在选择技术方案时，应该根据具体的需求和应用场景来进行权衡，以便选择最合适的技术方案。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Alternative","level":3,"id":"Alternative_0"}],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/web-applications/graphql.html","pathToRoot":"../..","attachments":[],"createdTime":1717430740980,"modifiedTime":1670420965000,"sourceSize":2100,"sourcePath":"Computer/Web Applications/GraphQL.md","exportPath":"computer/web-applications/graphql.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/web-applications/http-get.html":{"title":"HTTP GET","icon":"","description":"<img alt=\"Detail view of a single event\" src=\"https://fullstackopen.com/static/ddcd5afaeabfc1b0e8a4325bfeff90ee/5a190/3e.png\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\"> <br>上半部分，General中的内容，显示浏览器使用<a data-tooltip-position=\"top\" aria-label=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET\" target=\"_self\">GET</a>方法向地址<a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://studies.cs.helsinki.fi/exampleapp\" target=\"_self\">https://studies.cs.helsinki.fi/exampleapp</a>发送了一个请求(地址是截图时的，现在已经略有改变)，并且请求是成功的，因为服务器的响应<a data-tooltip-position=\"top\" aria-label=\"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\" target=\"_self\">状态代码</a> 为200。<br>浏览器的请求（request）和服务器的响应（response）有几个<a data-tooltip-position=\"top\" aria-label=\"https://en.wikipedia.org/wiki/List_of_HTTP_header_fields\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://en.wikipedia.org/wiki/List_of_HTTP_header_fields\" target=\"_self\">头信息</a>。<br><img alt=\"fullstack content\" src=\"https://fullstackopen.com/static/5e6569d4ad80edce4a03a25358b8f195/5a190/4e.png\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\"> <br>上面的响应头Response headers告诉我们，例如，响应的字节大小，以及响应的确切时间。一个重要的头信息<a data-tooltip-position=\"top\" aria-label=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type\" target=\"_self\">Content-Type</a>告诉我们，响应是一个<a data-tooltip-position=\"top\" aria-label=\"https://en.wikipedia.org/wiki/UTF-8\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://en.wikipedia.org/wiki/UTF-8\" target=\"_self\">utf-8</a>格式的文本文件，其内容已经用HTML格式化。这样，浏览器就知道这个响应是一个普通的<a data-tooltip-position=\"top\" aria-label=\"https://en.wikipedia.org/wiki/HTML\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://en.wikipedia.org/wiki/HTML\" target=\"_self\">HTML</a>页面，并将其 \"像一个网页一样\" 渲染到浏览器。Response标签显示了响应数据，是一个普通的HTML页面。body部分决定了渲染到屏幕上的页面的结构。<br><img alt=\"Screenshot of the response tab\" src=\"https://fullstackopen.com/static/4e49815c455c943b6eb14fe8cc0cefb3/5a190/5e.png\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\"> <br>这个页面包含一个<a data-tooltip-position=\"top\" aria-label=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div\" target=\"_self\">div</a>元素，它又包含一个标题，一个指向页面notes的链接，以及一个<a data-tooltip-position=\"top\" aria-label=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img\" target=\"_self\">img</a>标签，并显示创建的笔记数量。因为有了img标签，浏览器又做了一次HTTP-request，从服务器上获取图片kuva.png。该请求的细节如下。<br><img alt=\"Detail view of the second event\" src=\"https://fullstackopen.com/static/f053fa9082a1ad72066fa193346d0378/5a190/6e.png\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\"> <br>该请求是向地址<a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://studies.cs.helsinki.fi/exampleapp/kuva.png\" target=\"_self\">https://studies.cs.helsinki.fi/exampleapp/kuva.png</a>发出的，方法类型是HTTP GET。响应头告诉我们，响应大小为89350字节，其<a data-tooltip-position=\"top\" aria-label=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type\" target=\"_self\">内容类型</a>为image/png，所以它是一个png图像。浏览器利用这些信息将图像正确地渲染在屏幕上。<br>在浏览器上打开网页<a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://studies.cs.helsinki.fi/exampleap\" target=\"_self\">https://studies.cs.helsinki.fi/exampleap</a>，所引起的一系列事件构成了以下<a data-tooltip-position=\"top\" aria-label=\"https://www.geeksforgeeks.org/unified-modeling-language-uml-sequence-diagrams/\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.geeksforgeeks.org/unified-modeling-language-uml-sequence-diagrams/\" target=\"_self\">顺序图</a>。<br><img alt=\"Sequence diagram of the flow covered above\" src=\"https://fullstackopen.com/static/972354fefd202e82e2c4a64d4d7c6125/5a190/7e.png\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\"> 首先，浏览器向服务器发送一个HTTP GET请求，以获取该网页的HTML代码。HTML中的img标签提示浏览器获取图片kuva.png。浏览器将HTML页面和图像渲染到屏幕上。尽管很难注意到，但在图像从服务器上获取之前，HTML页面就已经开始渲染了。The HTTP standard talks about two properties related to request types, safety and idempotence.(idempotence) 冪等是数学和计算机科学中某些操作的属性，它们可以多次应用，而不改变初始应用后的结果。幂等性的概念出现在抽象代数和函数式编程的许多地方。维基百科The HTTP GET request should be safe:In particular, the convention has been established that the GET and HEAD methods SHOULD NOT have the significance of taking an action other than retrieval. These methods ought to be considered \"safe\".\nSafety means that the executing request must not cause any side effects in the server. By side-effects we mean that the state of the database must not change as a result of the request, and the response must only return data that already exists on the server.Nothing can ever guarantee that a GET request is actually safe, this is in fact just a recommendation that is defined in the HTTP standard. By adhering to RESTful principles in our API, GET requests are in fact always used in a way that they are safe.The HTTP standard also defines the request type HEAD, that ought to be safe. In practice HEAD should work exactly like GET but it does not return anything but the status code and response headers. The response body will not be returned when you make a HEAD request.All HTTP requests except POST should be idempotent:Methods can also have the property of \"idempotence\" in that (aside from error or expiration issues) the side-effects of N &gt; 0 identical requests is the same as for a single request. The methods GET, HEAD, PUT and DELETE share this property\nThis means that if a request does not generate side-effects, then the result should be the same regardless of how many times the request is sent.If we make an HTTP PUT request to the url /api/notes/10 and with the request we send the data { content: \"no side effects!\", important: true }, the result is the same regardless of how many times the request is sent.Like safety for the GET request, idempotence is also just a recommendation in the HTTP standard and not something that can be guaranteed simply based on the request type. However, when our API adheres to RESTful principles, then GET, HEAD, PUT, and DELETE requests are used in such a way that they are idempotent.POST is the only HTTP request type that is neither safe nor idempotent. If we send 5 different HTTP POST requests to /api/notes with a body of {content: \"many same\", important: true}, the resulting 5 notes on the server will all have the same content.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"About HTTP request types","level":1,"id":"About_HTTP_request_types_0"}],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/web-applications/http-get.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741484,"modifiedTime":1670662168000,"sourceSize":5844,"sourcePath":"Computer/Web Applications/HTTP GET.md","exportPath":"computer/web-applications/http-get.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/web-applications/hypertext-markup-language.html":{"title":"HyperText Markup Language","icon":"","description":"Browser environment is different\nTraditional app: GUIs based on pixels Since 1970s: software accessed mapped framebuffers (R/G/B)\nToolkits build higher level GUI widgets (buttons, tables, etc.) Web browsers display Documents described in HTML Until HTML5's canvas region, you couldn't write pixels\nMake applications out of documents Early web apps: Multiple documents (pages) with 'form' tag for input\nCurrent: Use JavaScript to dynamically generate and update documents Concept: Markup Language - Include directives with content Directives can dictate presentation or describe content\nIdea from the 1960s: RUNOFF\nExamples: &lt;i&gt;italics word&lt;/i&gt;, &lt;title&gt;Title words&lt;/title&gt;\nExample of a declarative language Approach Start with content to be displayed Annotate it with tags Tags can provide: Meaning of text: &lt;hl&gt; means top-level heading\n&lt;p&gt; means paragraph\n&lt;ul&gt;&lt;li&gt; for unordered (bulleted) list &lt;h2&gt;Introduction&lt;/h2&gt;\n&lt;p&gt;\nThere are several good reasons for taking\n&lt;i&gt;CS142: Web Applications&lt;/i&gt;:\n&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;\nYou will learn a variety of interesting concepts.\n&lt;/li&gt;\n&lt;li&gt;\nIt may inspire you to change the way software is developed.\n&lt;/li&gt;\n&lt;li&gt;\nIt will give you the tools to become fabulously wealthy.\n&lt;/li&gt;\n&lt;/ul&gt;\n<a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\" target=\"_self\">https://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd</a>\nForked into HTML and XHTML (XML-based HTML) XHTML is more strict about adhering to proper syntax For the HTML class projects (1, 2, and 3) we will use XHTML\nUsers came to depend on browser quirks, so browsers couldn't change Document: hierarchical collection of elements, starting with &lt;html&gt;\nElement: start tag, contents, end tag\nElements may be nested\nEvery element must have an explicit start and end Can use &lt;foo /&gt; as shorthand for &lt;foo&gt;&lt;/foo&gt; Start tags can contain attributes:\n&lt;img src=\"face.jpg\"&gt;\n&lt;input value-\"94301\" name = 'zip'&gt;\n&lt;div class=\"header\"&gt; Need to handle markup characters in content<br>\n<img src=\"https://i.imgur.com/RiekIdT.png\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\"> HTML supports the same tags, same features, but allows quirkier syntax: Can skip some end tags, such as &lt;/br&gt;, &lt;/p&gt;\nNot all attributes have to have values:&lt;select multiple&gt;\nElements can overlap: &lt;p&gt;&lt;b&gt;first&lt;/p&gt;&lt;p&gt;second&lt;/b&gt; third&lt;/p&gt; Early browsers tried to \"do the right thing\" even in the face of incorrect HTML: Ignore unknown tags\nCarry on even with obvious syntax errors such as missing &lt;body&gt; or &lt;/html&gt;\nInfer the position of missing close tags\nGuess that some &lt; characters are literal, as in \"What if x &lt; 0?\"\nNot obvious how to interpret some documents (and browsers differed) Additions tags to allow content definition &lt;article&gt;, &lt;section&gt;, &lt;header&gt;, &lt;footer&gt;, &lt;summary&gt;, &lt;aside&gt;, &lt;details&gt;\n&lt;mark&gt;, &lt;figcaption&gt;, &lt;figure&gt;\n&lt;nav&gt;, &lt;menuitem&gt; Drawing &lt;svg&gt; - Scalable Vector Graphics - Draw shapes &lt;canvas&gt; - Draw from JavaScript - 3D with WebGL Timed media playback: &lt;video&gt; and &lt;audio&gt;\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"HTML: HyperText Markup Language","level":1,"id":"HTML_HyperText_Markup_Language_0"},{"heading":"HTML tags","level":2,"id":"HTML_tags_0"},{"heading":"Basic Syntax rules for XHTML","level":1,"id":"Basic_Syntax_rules_for_XHTML_0"},{"heading":"HTML differences from XHTML","level":1,"id":"HTML_differences_from_XHTML_0"},{"heading":"Newer HTML - HTML5","level":2,"id":"Newer_HTML_-_HTML5_0"}],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/web-applications/hypertext-markup-language.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741469,"modifiedTime":1670311689000,"sourceSize":3138,"sourcePath":"Computer/Web Applications/HyperText Markup Language.md","exportPath":"computer/web-applications/hypertext-markup-language.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/web-applications/javascript.html":{"title":"JavaScript","icon":"","description":"另一方面，JavaScript引擎或运行时环境遵循异步模型。原则上，这要求所有的IO-操作（除了一些例外)都以非阻塞方式执行。这意味着在调用一个IO函数后，代码的执行会立即继续，而不需要等待它的返回。 <a data-tooltip-position=\"top\" aria-label=\"javascript-async\" data-href=\"javascript-async\" href=\"https://rinodg.pages.dev/computer/web-applications/javascript-async.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">async/await</a>","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":["computer/web-applications/javascript-async.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/web-applications/javascript.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741887,"modifiedTime":1670823401000,"sourceSize":304,"sourcePath":"Computer/Web Applications/JavaScript.md","exportPath":"computer/web-applications/javascript.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/web-applications/javascript-async.html":{"title":"javascript-async","icon":"","description":"The async function declaration declares an async function where the await keyword is permitted within the function body. The async and await keywords enable asynchronous, <a data-href=\"Promise\" href=\"https://rinodg.pages.dev/computer/web-applications/promise.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Promise</a>-based behavior to be written in a cleaner style, avoiding the need to explicitly configure promise chains.<br>async 函数是使用async关键字声明的函数。async 函数是 <a data-tooltip-position=\"top\" aria-label=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\" target=\"_self\"><code></code></a>AsyncFunction 构造函数的实例，并且其中允许使用 await 关键字。async 和 await 关键字让我们可以用一种更简洁的方式写出基于 <a data-href=\"Promise\" href=\"https://rinodg.pages.dev/computer/web-applications/promise.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Promise</a> 的异步行为，而无需刻意地链式调用 promise。beforeEach(async () =&gt; { await Note.deleteMany({}) console.log('cleared') helper.initialNotes.forEach(async (note) =&gt; { let noteObject = new Note(note) await noteObject.save() console.log('saved') }) console.log('done')\n}) test('notes are returned as json', async () =&gt; { console.log('entered test') // ...\n}\nWe save the notes stored in the array into the database inside of a forEach loop. The tests don't quite seem to work however, so we have added some console logs to help us find the problem.The console displays the following output:cleared\ndone\nentered test\nsaved\nsaved Despite our use of the async/await syntax, our solution does not work like we expected it to. The test execution begins before the database is initialized!The problem is that every iteration of the forEach loop generates its own asynchronous operation, and beforeEach won't wait for them to finish executing. In other words, the await commands defined inside of the forEach loop are not in the beforeEach function, but in separate functions that beforeEach will not wait for.Since the execution of tests begins immediately after beforeEach has finished executing, the execution of tests begins before the database state is initialized.<br>One way of fixing this is to wait for all of the asynchronous operations to finish executing with the <a data-tooltip-position=\"top\" aria-label=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\" target=\"_self\">Promise.all</a> method:beforeEach(async () =&gt; { await Note.deleteMany({}) const noteObjects = helper.initialNotes .map(note =&gt; new Note(note)) const promiseArray = noteObjects.map(note =&gt; note.save()) await Promise.all(promiseArray)\n})\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"for-each","level":1,"id":"for-each_0"}],"links":["computer/web-applications/promise.html#_0","computer/web-applications/promise.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/web-applications/javascript-async.html","pathToRoot":"../..","attachments":[],"createdTime":1717430740977,"modifiedTime":1732664748640,"sourceSize":2455,"sourcePath":"Computer/Web Applications/javascript-async.md","exportPath":"computer/web-applications/javascript-async.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/web-applications/mongodb.html":{"title":"MongoDB","icon":"","description":"const mongoose = require('mongoose') if (process.argv.length &lt; 3) { console.log('Please provide the password as an argument: node mongo.js &lt;password&gt;') process.exit(1)\n} const password = process.argv[2] const url = `mongodb+srv://fullstack:${password}@cluster0.o1opl.mongodb.net/myFirstDatabase?retryWrites=true&amp;w=majority` mongoose.connect(url) const noteSchema = new mongoose.Schema({ content: String, date: Date, important: Boolean,\n}) const Note = mongoose.model('Note', noteSchema) const note = new Note({ content: 'HTML is Easy', date: new Date(), important: true,\n}) note.save().then(result =&gt; { console.log('note saved!') mongoose.connection.close()\n})\nAfter establishing the connection to the database, we define the <a data-tooltip-position=\"top\" aria-label=\"http://mongoosejs.com/docs/guide.html\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"http://mongoosejs.com/docs/guide.html\" target=\"_self\">schema</a> for a note and the matching <a data-tooltip-position=\"top\" aria-label=\"http://mongoosejs.com/docs/models.html\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"http://mongoosejs.com/docs/models.html\" target=\"_self\">model</a>:const noteSchema = new mongoose.Schema({ content: String, date: Date, important: Boolean,\n}) const Note = mongoose.model('Note', noteSchema)\n<br>First we define the <a data-tooltip-position=\"top\" aria-label=\"http://mongoosejs.com/docs/guide.html\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"http://mongoosejs.com/docs/guide.html\" target=\"_self\">schema</a> of a note that is stored in the noteSchema variable. The schema tells Mongoose how the note objects are to be stored in the database.<br>In the Note model definition, the first \"Note\" parameter is the singular name of the model. The name of the collection will be the lowercased plural notes, because the <a data-tooltip-position=\"top\" aria-label=\"http://mongoosejs.com/docs/models.html\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"http://mongoosejs.com/docs/models.html\" target=\"_self\">Mongoose convention</a> is to automatically name collections as the plural (e.g. notes) when the schema refers to them in the singular (e.g. Note).Document databases like Mongo are schemaless, meaning that the database itself does not care about the structure of the data that is stored in the database. It is possible to store documents with completely different fields in the same collection.The idea behind Mongoose is that the data stored in the database is given a schema at the level of the application that defines the shape of the documents stored in any given collection.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Schema","level":1,"id":"Schema_0"}],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/web-applications/mongodb.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741023,"modifiedTime":1670725311000,"sourceSize":2072,"sourcePath":"Computer/Web Applications/MongoDB.md","exportPath":"computer/web-applications/mongodb.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/web-applications/node.js.html":{"title":"Node.js","icon":"","description":"\nnpm 中使用的版本管理模式被称为 <a data-tooltip-position=\"top\" aria-label=\"https://semver.org/\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://semver.org/\" target=\"_self\">semver</a><br>\n- To keep the <a data-href=\"JavaScript\" href=\"https://rinodg.pages.dev/computer/web-applications/javascript.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">JavaScript</a> ecosystem healthy, reliable, and secure, every time you make significant updates to an npm package you own, we recommend publishing a new version of the package with an updated version number in the package.json file that follows the semantic versioning spec. Following the semantic versioning spec helps other developers who depend on your code understand the extent of changes in a given version, and adjust their own code if necessary.<br>\n<a data-href=\"Debugging Node applications\" href=\"https://rinodg.pages.dev/computer/web-applications/debugging-node-applications.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Debugging Node applications</a>\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":["computer/web-applications/javascript.html#_0","computer/web-applications/debugging-node-applications.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/web-applications/node.js.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741042,"modifiedTime":1670685530000,"sourceSize":577,"sourcePath":"Computer/Web Applications/Node.js.md","exportPath":"computer/web-applications/node.js.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/web-applications/promise.html":{"title":"Promise","icon":"","description":"(<a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_self\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise</a>)Promise 对象用于表示一个异步操作的最终完成（或失败）及其结果值。一个 Promise 对象代表一个在这个 promise 被创建出来时不一定已知值的代理。它让你能够把异步操作最终的成功返回值或者失败原因和相应的处理程序关联起来。这样使得异步方法可以像同步方法那样返回值：异步方法并不会立即返回最终的值，而是会返回一个 promise，以便在未来某个时候把值交给使用者。一个 Promise 必然处于以下几种状态之一：\n待定（pending）：初始状态，既没有被兑现，也没有被拒绝。\n已兑现（fulfilled）：意味着操作成功完成。\n已拒绝（rejected）：意味着操作失败。\n待定状态的 Promise 对象要么会通过一个值被兑现，要么会通过一个原因（错误）被拒绝。当这些情况之一发生时，我们用 promise 的 then 方法排列起来的相关处理程序就会被调用。如果 promise 在一个相应的处理程序被绑定时就已经被兑现或被拒绝了，那么这个处理程序也同样会被调用，因此在完成异步操作和绑定处理方法之间不存在竞态条件。因为 Promise.prototype.then 和 Promise.prototype.catch 方法返回的是 promise，所以它们可以被链式调用。\n备注： 有一些语言中有惰性求值和延迟计算的特性，它们也被称为“promise”，例如 Scheme。JavaScript 中的 promise 代表的是已经在发生的进程，而且可以通过回调函数实现链式调用。如果你想对一个表达式进行惰性求值，就考虑一下使用无参数的箭头函数，如 f = () =&gt; expression 来创建惰性求值的表达式，然后使用 f() 进行求值。\n<br>\n备注： 如果一个 promise 已经被兑现或被拒绝，那么我们也可以说它处于 已敲定（settled） 状态。你还会听到一个经常跟 promise 一起使用的术语：已决议（resolved），它表示 promise 已经处于已敲定状态，或者为了匹配另一个 promise 的状态被“锁定”了。Domenic Denicola 的 <a data-tooltip-position=\"top\" aria-label=\"https://github.com/domenic/promises-unwrapping/blob/master/docs/states-and-fates.md\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://github.com/domenic/promises-unwrapping/blob/master/docs/states-and-fates.md\" target=\"_self\">States and fates</a> 中有更多关于 promise 术语的细节可以供你参考。\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/web-applications/promise.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741711,"modifiedTime":1670823653000,"sourceSize":2414,"sourcePath":"Computer/Web Applications/Promise.md","exportPath":"computer/web-applications/promise.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/web-applications/react-hooks.html":{"title":"React Hooks","icon":"","description":"为了确保我们的应用正确使用基于钩子的状态函数，有一些限制和规则是我们必须遵循的。<a data-href=\"useState\" href=\"https://rinodg.pages.dev/computer/web-applications/usestate.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">useState</a> 函数（以及课程后面介绍的 <a data-href=\"useEffect\" href=\"https://rinodg.pages.dev/computer/web-applications/useeffect.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">useEffect</a> 函数）不能从循环、条件表达式或任何不是定义组件的函数的地方调用。这样做是为了确保钩子总是以相同的顺序被调用，如果不是这样的话，应用将表现得不正常。简而言之，钩子只能从定义了React组件的函数体内部调用。这里的问题是我们的事件处理程序被定义为一个函数调用，这意味着事件处理程序实际上被分配了函数的返回值，在console.log的情况下是未定义。只有箭头函数的引用被设置为事件处理程序。只有当按钮被点击时才会调用该函数。&lt;button onClick={() =&gt; setValue(0)}&gt;button&lt;/button&gt;\n事件处理程序现在是函数() =&gt; setValue(0)。直接在按钮的属性中定义事件处理函数，不是个好主意。你经常会看到事件处理程序被定义在一个单独的地方。在我们应用的以下版本中，我们定义了一个函数，然后被分配到组件函数主体中的handleClick变量。const App = () =&gt; { const [value, setValue] = useState(10) const handleClick = () =&gt; console.log('clicked the button') return ( &lt;div&gt; {value} &lt;button onClick={handleClick}&gt;button&lt;/button&gt; &lt;/div&gt; )\n}\nhandleClick变量现在被分配给一个函数的引用。这个引用被作为onClick属性传递给按钮。&lt;button onClick={handleClick}&gt;button&lt;/button&gt;\n自然地，我们的事件处理函数可以由多个命令组成。在这种情况下，我们对箭头函数使用较长的大括号语法。const App = () =&gt; { const [value, setValue] = useState(10) const handleClick = () =&gt; { console.log('clicked the button') setValue(0) } return ( &lt;div&gt; {value} &lt;button onClick={handleClick}&gt;button&lt;/button&gt; &lt;/div&gt; )\n}\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Rules of Hooks","level":3,"id":"Rules_of_Hooks_0"}],"links":["computer/web-applications/usestate.html#_0","computer/web-applications/useeffect.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/web-applications/react-hooks.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741252,"modifiedTime":1670651721000,"sourceSize":2049,"sourcePath":"Computer/Web Applications/React Hooks.md","exportPath":"computer/web-applications/react-hooks.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/web-applications/react.js.html":{"title":"React.js","icon":"","description":"<a data-href=\"Debugging React applications\" href=\"https://rinodg.pages.dev/computer/web-applications/debugging-react-applications.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Debugging React applications</a><br>\n<a data-href=\"React Hooks\" href=\"https://rinodg.pages.dev/computer/web-applications/react-hooks.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">React Hooks</a>","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":["computer/web-applications/debugging-react-applications.html#_0","computer/web-applications/react-hooks.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/web-applications/react.js.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741630,"modifiedTime":1670465890000,"sourceSize":48,"sourcePath":"Computer/Web Applications/React.js.md","exportPath":"computer/web-applications/react.js.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/web-applications/rest.html":{"title":"REST","icon":"","description":"让我们扩展我们的应用，使其提供与 <a data-tooltip-position=\"top\" aria-label=\"https://github.com/typicode/json-server#routes\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://github.com/typicode/json-server#routes\" target=\"_self\">json-server</a> 一样的 RESTful HTTP API。<br>Representational State Transfer，又称 REST，于 2000 年在 Roy Fielding 的 <a data-tooltip-position=\"top\" aria-label=\"https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm\" target=\"_self\">论文</a> 中提出。REST 是一种架构风格，旨在建立可扩展的网络应用。<br>我们不打算深入研究 Fielding 对 REST 的定义，也不打算花时间去思考什么是 RESTful 和什么不是。相反，我们将采取一个更 <a data-tooltip-position=\"top\" aria-label=\"https://en.wikipedia.org/wiki/Representational_state_transfer#Applied_to_web_services\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://en.wikipedia.org/wiki/Representational_state_transfer#Applied_to_web_services\" target=\"_self\">狭窄的观点</a>，只关注 RESTful APIs 在网络应用中的典型理解。事实上，REST 的原始定义甚至不限于网络应用。<br>我们在 <a data-tooltip-position=\"top\" aria-label=\"https://fullstackopen.com/en/part2/altering_data_in_server#rest\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://fullstackopen.com/en/part2/altering_data_in_server#rest\" target=\"_self\">前一部分</a> 中提到，在 RESTful 思想中，单一的东西，如我们应用中的笔记，被称为 资源 。每个资源都有一个相关的 URL，这是资源的唯一地址。一个惯例是通过结合资源类型的名称和资源的唯一标识符来创建资源的唯一地址。让我们假设我们的服务的根 URL 是 www.example.com/api。<br>如果我们把笔记的资源类型定义为 笔记 ，那么标识符为 10 的笔记资源的地址就有唯一的地址 <a data-tooltip-position=\"top\" aria-label=\"http://www.example.com/api/notes/10\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"http://www.example.com/api/notes/10\" target=\"_self\">www.example.com/api/notes/10</a>。<br>所有笔记资源的整个集合的 URL 是 <a data-tooltip-position=\"top\" aria-label=\"http://www.example.com/api/notes\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"http://www.example.com/api/notes\" target=\"_self\">www.example.com/api/notes</a>。我们可以对资源执行不同的操作。要执行的操作是由 HTTP verb 定义的。<br>这就是我们如何设法粗略地定义 REST 所指的 <a data-tooltip-position=\"top\" aria-label=\"https://en.wikipedia.org/wiki/Representational_state_transfer#Architectural_constraints\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://en.wikipedia.org/wiki/Representational_state_transfer#Architectural_constraints\" target=\"_self\">统一接口</a>，这意味着一种定义接口的一致方式，使系统有可能合作。<br>这种解释 REST 的方式属于 Richardson 成熟度模型中的 <a data-tooltip-position=\"top\" aria-label=\"https://martinfowler.com/articles/richardsonMaturityModel.html\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://martinfowler.com/articles/richardsonMaturityModel.html\" target=\"_self\">RESTful 成熟度第二层次</a>。根据 Roy Fielding 提供的定义，我们实际上并没有定义一个 <a data-tooltip-position=\"top\" aria-label=\"http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven\" target=\"_self\">REST API</a>。事实上，世界上绝大部分所谓的 \"REST \"API 都不符合 Fielding 在其论文中列出的原始标准。<br>在某些地方（例如见 <a data-tooltip-position=\"top\" aria-label=\"http://shop.oreilly.com/product/9780596529260.do\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"http://shop.oreilly.com/product/9780596529260.do\" target=\"_self\">Richardson, Ruby: RESTful Web Services</a>），你会看到我们的直接 <a data-tooltip-position=\"top\" aria-label=\"https://en.wikipedia.org/wiki/Create,_read,_update_and_delete\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://en.wikipedia.org/wiki/Create,_read,_update_and_delete\" target=\"_self\">CRUD</a>API 模型被称为 <a data-tooltip-position=\"top\" aria-label=\"https://en.wikipedia.org/wiki/Resource-oriented_architecture\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://en.wikipedia.org/wiki/Resource-oriented_architecture\" target=\"_self\">面向资源架构</a> 的例子，而不是 REST。我们将避免陷入语义学的争论，而是回到我们的应用上工作。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/web-applications/rest.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741782,"modifiedTime":1670653282000,"sourceSize":3127,"sourcePath":"Computer/Web Applications/REST.md","exportPath":"computer/web-applications/rest.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/web-applications/server-side-session.html":{"title":"server side session","icon":"","description":"The negative aspect of server side sessions is the increased complexity in the backend and also the effect on performance since the token validity needs to be checked for each API request from database. A database access is considerably slower compared to checking the validity from the token itself. That is why it is a quite common to save the session corresponding to a token to a key-value-database such as Redis that is limited in functionality compared to eg. <a data-href=\"MongoDB\" href=\"https://rinodg.pages.dev/computer/web-applications/mongodb.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">MongoDB</a> or relational database but extremely fast in some usage scenarios.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":["computer/web-applications/mongodb.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/web-applications/server-side-session.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741739,"modifiedTime":1671626563000,"sourceSize":544,"sourcePath":"Computer/Web Applications/server side session.md","exportPath":"computer/web-applications/server-side-session.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/web-applications/single-page-applications.html":{"title":"Single page applications","icon":"","description":"SPA风格的网站并不像我们的样例应用那样从服务器上单独获取所有的页面，而是只由一个从服务器上获取的HTML页面组成，其内容由在浏览器中执行的JavaScript来操作。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/web-applications/single-page-applications.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741624,"modifiedTime":1670346249000,"sourceSize":218,"sourcePath":"Computer/Web Applications/Single page applications.md","exportPath":"computer/web-applications/single-page-applications.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/web-applications/spring-web.html":{"title":"spring web","icon":"","description":"<img alt=\"spring web-1685289945837.jpeg\" src=\"https://rinodg.pages.dev/assets/image/spring-web-1685289945837.jpeg\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/web-applications/spring-web.html","pathToRoot":"../..","attachments":["assets/image/spring-web-1685289945837.jpeg"],"createdTime":1717430740984,"modifiedTime":1685290268797,"sourceSize":35,"sourcePath":"Computer/Web Applications/spring web.md","exportPath":"computer/web-applications/spring-web.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/web-applications/token-authentication.html":{"title":"Token authentication","icon":"","description":"<img src=\"https://fullstackopen.com/static/8b2839fe97680c325df6647121af66c3/5a190/16e.png\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\">\nThis causes the React code to send the username and the password to the server address /api/login as a HTTP POST request.\nIf the username and the password are correct, the server generates a token which somehow identifies the logged in user. The token is signed digitally, making it impossible to falsify (with cryptographic means) The backend responds with a status code indicating the operation was successful, and returns the token with the response.\nThe browser saves the token, for example to the state of a React application.\nWhen the user creates a new note (or does some other operation requiring identification), the React code sends the token to the server with the request.\nThe server uses the token to identify the user\n<br>The other solution is to save info about each token to backend database and to check for each API request if the access right corresponding to the token is still valid. With this scheme, the access rights can be revoked at any time. This kind of solution is often called a <a data-href=\"server side session\" href=\"https://rinodg.pages.dev/computer/web-applications/server-side-session.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">server side session</a>.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":["computer/web-applications/server-side-session.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/web-applications/token-authentication.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741326,"modifiedTime":1671121321000,"sourceSize":1151,"sourcePath":"Computer/Web Applications/Token authentication.md","exportPath":"computer/web-applications/token-authentication.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/web-applications/universal-resource-locator.html":{"title":"Universal Resource Locator","icon":"","description":"Hypertext\nText with links to other text Click on links takes you somewhere else\nOld idea: Ted Nelson coined the term (early '60s), built Xanadu system\nDoug Englebart: \"Mother of all demos\" in 1968\nHyperCard for the Macintosh: 1987 Web adapted the idea, link specification: Uniform Resource Locators (URL) - Provided names for web content <a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"http://host.company.com:80/a/b/c.html?user=Alice&amp;year=2008#p2\" target=\"_self\">http://host.company.com:80/a/b/c.html?user=Alice&amp;year=2008#p2</a>\nScheme (http:): identifies protocol used to fetch the content.\nHost name (//host.company.com): name of a machine to connect to.\nServer's port number (80): allows multiple servers to run on the same machine.\nHierarchical portion (/a/b/c.html): used by server to find content.\nQuery parameters (?user=Alice&amp;year=2008): provides additional parameters\nFragment (#p2): Have browser scroll page to fragment (html: p2 is anchor tag) http: is the most common scheme; it means use the HTTP protocol\nhttps: is similar to http: except that it uses SSL encryption\nfile: means read a file from the local disk\nwebsocket: means create a TCP connection\nmailto: means open an email program composing a message\n<br>There are many (~350) other schemes: <a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.iana.org/assignments/uri-schemes/\" target=\"_self\">https://www.iana.org/assignments/uri-schemes/</a> Example: mongodb: points to a MongoDB database Passed to the web server for interpretation. Early web servers: Path name for a static HTML file.\nPath name of a program that will generate the HTML content (e.g., foo.php). Web server programmed with routing information Map hierarchical position to function to be performed and possibly the function's parameters Application Programming Interface (API) design, Example: /user/create\n/user/list\n/user/0x23490\n/user/0x23433\n/user/delete/0x23433 Traditionally has been to provide parameters to operation:<br>\n<a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"http://www.company.com/showOrder.php?order=4621047\" target=\"_self\">http://www.company.com/showOrder.php?order=4621047</a>\nFor modern apps has implications of when the browser switches pages\n● Browser maintains a notion of current location (i.e. URL)\n● Links: content in a page which, when clicked on, causes the browser to go to\nURL\n● Links are implemented with the &lt;a&gt; tag:\n&lt;a href=\"http://www.company.com/news/2009.html\"&gt;2009 News&lt;/a&gt;\nWhat if you want to include a punctuation character in a query value? http://www.stats.com/companyInfo?name=C&amp;H Sugar Any character in a URL other than A-Z, a-z, 0-9, or any of -_.~ must berepresented as %xx, where xx is the hexadecimal value of the character: http://www.stats.com/companyInfo?name=C%26H%20Sugar Escaping is a commonly used technique and also a source of errors\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Parts of an URL","level":1,"id":"Parts_of_an_URL_0"},{"heading":"URL: schemes (e.g. http)","level":2,"id":"URL_schemes_(e.g._http)_0"},{"heading":"URL: Hierarchical portion (/a/b/c.html)","level":2,"id":"URL_Hierarchical_portion_(/a/b/c.html)_0"},{"heading":"Query Parameters (e.g. ?user=Alice&amp;year=2008)","level":2,"id":"Query_Parameters_(e.g._?user=Alice&year=2008)_0"},{"heading":"Links","level":2,"id":"Links_0"},{"heading":"Uses of URLs","level":1,"id":"Uses_of_URLs_0"},{"heading":"URL Encoding","level":2,"id":"URL_Encoding_0"}],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/web-applications/universal-resource-locator.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741512,"modifiedTime":1670316109000,"sourceSize":2778,"sourcePath":"Computer/Web Applications/Universal Resource Locator.md","exportPath":"computer/web-applications/universal-resource-locator.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/web-applications/useeffect.html":{"title":"useEffect","icon":"","description":"const hook = () =&gt; { console.log('effect') axios .get('http://localhost:3001/notes') .then(response =&gt; { console.log('promise fulfilled') setNotes(response.data) })\n} useEffect(hook, [])\n现在我们可以更清楚地看到，函数<a data-tooltip-position=\"top\" aria-label=\"https://reactjs.org/docs/hooks-reference.html#useeffect\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://reactjs.org/docs/hooks-reference.html#useeffect\" target=\"_self\">useEffect</a>实际上需要两个参数。第一个是一个函数，即effect本身。根据文档的内容。\n默认情况下，效果会在每次完成渲染后运行，但你可以选择只在某些值发生变化时启动它。\n所以默认情况下，效果是总是在组件被渲染后运行。然而，在我们的例子中，我们只想在第一次渲染时执行效果。<br>useEffect的第二个参数用于<a data-tooltip-position=\"top\" aria-label=\"https://reactjs.org/docs/hooks-reference.html#conditionally-firing-an-effect\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://reactjs.org/docs/hooks-reference.html#conditionally-firing-an-effect\" target=\"_self\">指定效果的运行频率</a>。如果第二个参数是一个空的数组[]，那么效果就只在组件的第一次渲染时运行。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/web-applications/useeffect.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741842,"modifiedTime":1670591687000,"sourceSize":979,"sourcePath":"Computer/Web Applications/useEffect.md","exportPath":"computer/web-applications/useeffect.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/web-applications/usestate.html":{"title":"useState","icon":"","description":"useState 是 React 函数组件中的一个 Hook，它提供了一种简单的方法来在组件中管理状态。它的原理是通过在组件内部创建一个闭包来存储状态，并通过调用函数来更新状态。首先，在使用 useState 时，需要传入一个初始状态作为参数，例如：const [count, setCount] = useState(0);\n在这个例子中，count 表示组件内部的状态，它的初始值为 0。setCount 是一个函数，它用于更新 count 的值。当组件的某个事件触发时，可以通过调用 setCount 函数来更新状态。例如，当用户点击按钮时，可以通过调用 setCount 函数来将 count 的值加 1：&lt;button onClick={() =&gt; setCount(count + 1)}&gt; Click me\n&lt;/button&gt;\n这样，每当用户点击按钮时，count 的值就会更新，并且组件会根据最新的状态进行重新渲染。总之，useState 原理是通过创建闭包来存储状态，并通过调用函数来更新状态。它能够让开发者在 React 函数组件中轻松地管理状态，提高组件的可重用性和灵活性。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/web-applications/usestate.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741480,"modifiedTime":1670464051000,"sourceSize":1108,"sourcePath":"Computer/Web Applications/useState.md","exportPath":"computer/web-applications/usestate.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/web-applications/web-applications.html":{"title":"Web Applications","icon":"","description":"<img src=\"https://i.imgur.com/25XSdu5.png\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\">\nTechnologies used to build modern web applications Note: CS14x (computer system course in Computer Science department)\nFuII stack: Browser ⇔ Web server ⇔ Storage system\nLearning Goal: Learn how a web application is built and run How to build a web application - learn by doing. Use MERN stack (React.js, Node.js, Express.js, MongoDB)\nLearning Goal: Build a photo sharing we b app and understand h OW it works ！ CS142 Technologies and Concepts\nBrowser environment:\n<br><a data-tooltip-position=\"top\" aria-label=\"HyperText Markup Language\" data-href=\"HyperText Markup Language\" href=\"https://rinodg.pages.dev/computer/web-applications/hypertext-markup-language.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">HTML</a>/<a data-tooltip-position=\"top\" aria-label=\"Cascading Style Sheets\" data-href=\"Cascading Style Sheets\" href=\"https://rinodg.pages.dev/computer/web-applications/cascading-style-sheets.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">CSS</a>/<a data-href=\"JavaScript\" href=\"https://rinodg.pages.dev/computer/web-applications/javascript.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">JavaScript</a> - Markup, separation of content &amp; style, reuse, scripting\n<br><a data-href=\"Document object Model\" href=\"https://rinodg.pages.dev/computer/web-applications/document-object-model.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Document object Model</a> (DOM) - Document structure\n<br><a data-tooltip-position=\"top\" aria-label=\"Universal Resource Locator\" data-href=\"Universal Resource Locator\" href=\"https://rinodg.pages.dev/computer/web-applications/universal-resource-locator.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">URL</a>\nBrowser software:\n<br>Model View Controller, <a data-href=\"Single page applications\" href=\"https://rinodg.pages.dev/computer/web-applications/single-page-applications.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Single page applications</a>, Responsive design - <a data-href=\"React.js\" href=\"https://rinodg.pages.dev/computer/web-applications/react.js.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">React.js</a>\nBackend communication:\n<br>API design - HTTP/AJAX/<a data-href=\"REST\" href=\"https://rinodg.pages.dev/computer/web-applications/rest.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">REST</a>/<a data-href=\"GraphQL\" href=\"https://rinodg.pages.dev/computer/web-applications/graphql.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">GraphQL</a>\n<br>Cookies/Sessions/State management - Storage/Trust <a data-href=\"Token authentication\" href=\"https://rinodg.pages.dev/computer/web-applications/token-authentication.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Token authentication</a>\nBackend implementation:\n<br>Web Server - HTTP request processing - <a data-href=\"Node.js\" href=\"https://rinodg.pages.dev/computer/web-applications/node.js.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Node.js</a>\n<br>DBMS - Schema, Objects, CRUD, indexes, transactions - <a data-href=\"MongoDB\" href=\"https://rinodg.pages.dev/computer/web-applications/mongodb.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">MongoDB</a>\nEnd-to-End - Scale and Security\nWeb 开发的第一原则。始终打开你的网络浏览器上的开发者控制台。在macOS上，通过F12或同时按下option-cmd-i来打开控制台。 在Windows或Linux上，通过F12或同时按ctrl-shift-i来打开控制台。控制台也可以通过上下文菜单打开。<br><a data-href=\"HTTP GET\" href=\"https://rinodg.pages.dev/computer/web-applications/http-get.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">HTTP GET</a>","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":["computer/web-applications/hypertext-markup-language.html#_0","computer/web-applications/cascading-style-sheets.html#_0","computer/web-applications/javascript.html#_0","computer/web-applications/document-object-model.html#_0","computer/web-applications/universal-resource-locator.html#_0","computer/web-applications/single-page-applications.html#_0","computer/web-applications/react.js.html#_0","computer/web-applications/rest.html#_0","computer/web-applications/graphql.html#_0","computer/web-applications/token-authentication.html#_0","computer/web-applications/node.js.html#_0","computer/web-applications/mongodb.html#_0","computer/web-applications/http-get.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/web-applications/web-applications.html","pathToRoot":"../..","attachments":[],"createdTime":1717430740976,"modifiedTime":1671031697000,"sourceSize":1499,"sourcePath":"Computer/Web Applications/Web Applications.md","exportPath":"computer/web-applications/web-applications.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/abi.html":{"title":"ABI","icon":"","description":"","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/abi.html","pathToRoot":"..","attachments":[],"createdTime":1717430741809,"modifiedTime":1706194235000,"sourceSize":0,"sourcePath":"Computer/ABI.md","exportPath":"computer/abi.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/bus.html":{"title":"Bus","icon":"","description":"早期的计算机没有很复杂的图形功能，CPU的核心频率也不高，跟内存的频率一样，它们都是直接连接在同一个总线（Bus）上的。CPU核心频率的提升，导致内存跟不上CPU的速度，于是产生了与内存频率一致的系统总线慢速的I/O总线已经无法满足图形设备的巨大需求。为了协调CPU、内存和高速的图形设备，人们专门设计了一个高速的北桥芯片，以便它们之间能够高速地交换数据。由于北桥运行的速度非常高，所有相对低速的设备如果全都直接连接在北桥上，北桥既须处理高速设备，又须处理低速设备，设计就会十分复杂。于是人们又设计了专门处理低速设备的南桥（Southbridge）芯片，磁盘、USB、键盘、鼠标等设备都连接在南桥上，由南桥将它们汇总后连接到北桥上。 2024 年南北桥都消失了，集成在了cpu","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/bus.html","pathToRoot":"..","attachments":[],"createdTime":1717430741509,"modifiedTime":1706111224000,"sourceSize":940,"sourcePath":"Computer/Bus.md","exportPath":"computer/bus.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/git.html":{"title":"git","icon":"","description":"<a data-href=\"git-sha1\" href=\"https://rinodg.pages.dev/computer/git-sha1.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">git-sha1</a>","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":["computer/git-sha1.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/git.html","pathToRoot":"..","attachments":[],"createdTime":1717430741251,"modifiedTime":1666198911000,"sourceSize":12,"sourcePath":"Computer/git.md","exportPath":"computer/git.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/git-sha1.html":{"title":"git-sha1","icon":"","description":"\ngit 會計算文件 hash HeIIoWorld.java 66CCdC645C9d156d5C796dbe6ed768430C1562a2 然後用hash前兩位創建文件夾 .git/0bjects/66 Gitstores the contents in a file called CCdC645C9d156d5C796dbe6ed768430C1562a2\n之後文件會被壓縮 zlib Hash 不容易被纂改文件，這會引起hash變化\n兩個文件相同hash的概率只有 ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/git-sha1.html","pathToRoot":"..","attachments":[],"createdTime":1717430741759,"modifiedTime":1666232969000,"sourceSize":372,"sourcePath":"Computer/git-sha1.md","exportPath":"computer/git-sha1.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/hashing.html":{"title":"Hashing","icon":"","description":"将对象 hash 化存到数组，数组保存有对象列表\n<img src=\"https://i.imgur.com/5KIlasB.jpg\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\"><br><img src=\"https://i.imgur.com/It4xNPL.jpg\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/hashing.html","pathToRoot":"..","attachments":[],"createdTime":1717430741745,"modifiedTime":1669956384000,"sourceSize":136,"sourcePath":"Computer/Hashing.md","exportPath":"computer/hashing.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/krita.html":{"title":"Krita","icon":"","description":"<a data-href=\"栅格化\" href=\"https://rinodg.pages.dev/computer/graphics/栅格化.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">栅格化</a><br>Krita 是一款栅格图像处理软件，但它也具备一定的矢量图形编辑功能。如果你是数字绘画初学者，那么请先了解一下栅格图像和<a data-href=\"矢量图像\" href=\"https://rinodg.pages.dev/computer/graphics/矢量图像.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">矢量图像</a>的概念。<br><a data-href=\"栅格图像\" href=\"https://rinodg.pages.dev/computer/graphics/栅格图像.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">栅格图像</a>","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":["computer/graphics/栅格化.html#_0","computer/graphics/矢量图像.html#_0","computer/graphics/栅格图像.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/krita.html","pathToRoot":"..","attachments":[],"createdTime":1717430740978,"modifiedTime":1667907026000,"sourceSize":235,"sourcePath":"Computer/Krita.md","exportPath":"computer/krita.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/linux-共享库.html":{"title":"linux 共享库","icon":"","description":"SO-NAME对于新的系统来说，包括Solaris和Linux，普遍采用一种叫做SO-NAME的命名机制来记录共享库的依赖关系。每个共享库都有一个对应的“SO-NAME”，这个SO-NAME即共享库的文件名去掉次版本号和发布版本号，保留主版本号。比如一个共享库叫做libfoo.so.2.6.1，那么它的SO-NAME即libfoo.so.2。比如系统中有存在一个共享库“/lib/libfoo.so.2.6.1”，那么Linux中的共享库管理程序就会为它产生一个软链接“/lib/libfoo.so.2”指向它。$ ls -l /lib/libc*\n-rwxr-xr-x 1 root root 1249520 2007-10-25 09:03 libc-2.6.1.so\n…\nlrwxrwxrwx 1 root root 13 2007-11-10 15:49 libc.so.6 -&gt; libc-2.6.1.so\n…\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/linux-共享库.html","pathToRoot":"..","attachments":[],"createdTime":1717430741791,"modifiedTime":1706194564000,"sourceSize":722,"sourcePath":"Computer/linux 共享库.md","exportPath":"computer/linux-共享库.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/logo.html":{"title":"Logo","icon":"","description":"<a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://en.wikipedia.org/wiki/Logo_(programming_language)\" target=\"_self\">https://en.wikipedia.org/wiki/Logo_(programming_language)</a>","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/logo.html","pathToRoot":"..","attachments":[],"createdTime":1724053825571,"modifiedTime":1726109902091,"sourceSize":62,"sourcePath":"Computer/Logo.md","exportPath":"computer/logo.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/shell.html":{"title":"Shell","icon":"","description":"Shell 在计算机科学中指“为用户提供用户界面”的软件，通常指的是命令行界面的解析器。一般来说，这个词是指操作系统中提供访问内核所提供之服务的程序。Shell也用于泛指所有为用户提供操作界面的程序，也就是程序和用户交互的层面。因此与之相对的是内核，内核不提供和用户的交互功能。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/shell.html","pathToRoot":"..","attachments":[],"createdTime":1717430741794,"modifiedTime":1652169244000,"sourceSize":395,"sourcePath":"Computer/Shell.md","exportPath":"computer/shell.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/thread-pool.html":{"title":"thread pool","icon":"","description":"A thread pool is a group of spawned threads that are waiting and ready to handle a task.When the program receives a new task, it assigns one of the threads in the pool to the task, and that thread will process the task.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/thread-pool.html","pathToRoot":"..","attachments":[],"createdTime":1717430741768,"modifiedTime":1677568580000,"sourceSize":223,"sourcePath":"Computer/thread pool.md","exportPath":"computer/thread-pool.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/字符.html":{"title":"字符","icon":"","description":"\\b 回退一个 不会删除\n\\n \\r 源自打字机的键盘","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/字符.html","pathToRoot":"..","attachments":[],"createdTime":1724053825566,"modifiedTime":1637769935000,"sourceSize":59,"sourcePath":"Computer/字符.md","exportPath":"computer/字符.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"computer/整数运算.html":{"title":"整数运算","icon":"","description":"乘法可以用左移实现","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/computer/整数运算.html","pathToRoot":"..","attachments":[],"createdTime":1717430741459,"modifiedTime":1701658041000,"sourceSize":27,"sourcePath":"Computer/整数运算.md","exportPath":"computer/整数运算.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"dev/django/django.html":{"title":"Django","icon":"","description":"<a data-href=\"migration\" href=\"https://rinodg.pages.dev/.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">migration</a>\n一个 model 像是一张表<br>\n<a data-href=\"Django 分页\" href=\"https://rinodg.pages.dev/dev/django/django-分页.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Django 分页</a>","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[".html","dev/django/django-分页.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/dev/django/django.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741640,"modifiedTime":1713337178374,"sourceSize":60,"sourcePath":"Dev/Django/Django.md","exportPath":"dev/django/django.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"dev/django/django-分页.html":{"title":"Django 分页","icon":"","description":"• 如果你想要使用Django自带的Paginator类来实现分页，你可以参考Django官方文档 <a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://docs.djangoproject.com/en/4.2/topics/pagination/\" target=\"_self\">https://docs.djangoproject.com/en/4.2/topics/pagination/</a> 中的例子。你需要在你的视图中创建一个Paginator对象，传入你要分页的对象列表和每页的数量，然后根据请求参数获取对应的Page对象，将其传递给模板。在模板中，你可以使用page_obj来访问当前页的对象列表、页码、是否有上一页或下一页等属性。你还可以使用page_obj.paginator来访问总页数、总对象数等属性。你可以使用类似于你提供的代码来显示上一页和下一页的链接，也可以显示所有页码或者省略一些页码，具体可以参考文档中的例子。<br>• 如果你想要使用Django自带的ListView类来实现分页，你可以参考Real Python网站上的教程 <a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://realpython.com/django-pagination/\" target=\"_self\">https://realpython.com/django-pagination/</a> 。你只需要在你的ListView子类中设置一个paginate_by属性，指定每页的数量，然后Django会自动为你提供一个paginator和page_obj对象。在模板中，你可以使用和上面相同的方法来显示分页相关的信息和链接。<br>• 如果你想要使用Django REST framework来实现分页，你可以参考Django REST framework官方文档 <a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.django-rest-framework.org/api-guide/pagination/\" target=\"_self\">https://www.django-rest-framework.org/api-guide/pagination/</a> 中的例子。你需要在你的settings.py文件中设置一个REST_FRAMEWORK字典，指定一个DEFAULT_PAGINATION_CLASS和一个PAGE_SIZE。然后Django REST framework会自动为你提供一个paginator和page对象。在模板中，你可以使用page来访问当前页的数据和分页相关的信息，也可以使用paginator来访问总页数、总数据数等属性。你还可以使用不同的分页样式，比如基于数字、基于游标、基于限制-偏移等。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/dev/django/django-分页.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741073,"modifiedTime":1688630472000,"sourceSize":1827,"sourcePath":"Dev/Django/Django 分页.md","exportPath":"dev/django/django-分页.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"dev/django/django-初始化自带数据.html":{"title":"Django 初始化自带数据","icon":"","description":"有多种方法可以在 Django migrate 初始化数据库时自带数据，以下是其中一些常见的方法：使用 fixtures\n在 Django 中，可以使用 fixtures 来提供初始数据。Fixture 是一个包含初始模型数据的文件，通常是 JSON 或 YAML 格式。您可以在模型中定义好数据，然后使用 Django 的 dumpdata 命令将其导出为 fixture 文件。在应用程序的 migrations 目录中，创建一个名为 initial_data 的 fixture 文件，Django 将在每次运行 migrate 命令时自动加载它。编写数据迁移脚本\n您可以编写一个 Django 数据迁移脚本来插入初始数据。在应用程序的 migrations 目录中，创建一个数据迁移脚本，使用 RunPython 操作来插入数据。例如：from django.db import migrations def insert_initial_data(apps, schema_editor): MyModel = apps.get_model('myapp', 'MyModel') MyModel.objects.create(name='John', age=30) MyModel.objects.create(name='Jane', age=25) class Migration(migrations.Migration): dependencies = [ ('myapp', '0001_initial'), ] operations = [ migrations.RunPython(insert_initial_data), ]\n使用 Django Seed\nDjango Seed 是一个 Django 应用程序，可以从 CSV 或 JSON 文件中加载数据，并将其插入到数据库中。您可以在应用程序的 migrations 目录中创建一个数据迁移脚本，使用 Django Seed 来插入数据。例如：from django.db import migrations\nfrom django_seed import Seed def insert_initial_data(apps, schema_editor): MyModel = apps.get_model('myapp', 'MyModel') seeder = Seed.seeder() seeder.add_entity(MyModel, 10) seeder.execute() class Migration(migrations.Migration): dependencies = [ ('myapp', '0001_initial'), ] operations = [ migrations.RunPython(insert_initial_data), ]\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/dev/django/django-初始化自带数据.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741889,"modifiedTime":1689122400889,"sourceSize":1897,"sourcePath":"Dev/Django/Django 初始化自带数据.md","exportPath":"dev/django/django-初始化自带数据.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"dev/web/server-sent-events-(sse)-和-websockets.html":{"title":"Server-Sent Events (SSE) 和 WebSockets","icon":"","description":"Server-Sent Events (SSE) 和 WebSockets 都是用于在客户端和服务器之间实现实时通信的技术，但它们有几个关键区别： 双向通信 vs 单向通信： WebSockets：提供了全双工通信，客户端和服务器可以同时发送和接收消息。\nSSE：是单向通信，只允许服务器向客户端推送数据，客户端无法向服务器发送消息。 协议： WebSockets 使用自定义的协议，在建立连接后，数据可以以任何格式进行传输。\nSSE 使用基于 HTTP 的协议，使用简单的文本格式进行数据传输，即便是基于 HTTP，SSE 也是通过一个长期保持打开的 HTTP 连接来实现推送。 浏览器兼容性： WebSockets 在现代浏览器中得到了广泛支持，但在某些古老的浏览器版本中可能不受支持。\nSSE 在大多数现代浏览器中都得到了支持，但与 WebSockets 相比，它的兼容性略差一些。 应用场景： WebSockets 通常用于需要双向通信的实时应用，如聊天应用、在线游戏等。\nSSE 适用于服务器向客户端推送事件的场景，如实时更新的新闻、股票报价、日志更新等。 性能开销： WebSockets 通常需要维护长期的连接，因此可能会产生较大的性能开销，特别是在大规模并发连接的情况下。\nSSE 使用简单的 HTTP 长连接，通常比 WebSockets 拥有更低的性能开销，特别适用于需要向大量客户端推送相对较少更新的场景。 综上所述，选择使用哪种技术取决于应用的具体需求。如果需要双向通信和较高的实时性，可以选择 WebSockets；如果只需服务器向客户端单向推送数据，并且希望更简单地实现，可以考虑使用 SSE。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/dev/web/server-sent-events-(sse)-和-websockets.html","pathToRoot":"../..","attachments":[],"createdTime":1717430741648,"modifiedTime":1709542046258,"sourceSize":1832,"sourcePath":"Dev/web/Server-Sent Events (SSE) 和 WebSockets.md","exportPath":"dev/web/server-sent-events-(sse)-和-websockets.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"dev/web/zod.html":{"title":"zod","icon":"","description":"I think this would be the answer, zod has it's own utility to quickly coerce the type:console.log(z.coerce.string().parse(1)); // \"1\"\nconsole.log(z.coerce.string().parse('1')); // \"1\"\nconsole.log(z.coerce.number().parse(1)); // 1\nconsole.log(z.coerce.number().parse('1')); // 1\nIf you want a bit more control you should look into preprocessconsole.log(z.preprocess((x) =&gt; '' + x, z.string()).parse(1)); // \"1\"\nconsole.log(z.preprocess((x) =&gt; Number(x), z.number()).parse('1')); // 1\nor transform and pipeconsole.log(z.union([z.string(), z.number()]).transform((x) =&gt; '' + x).pipe(z.string()).parse(1)); // \"1\"\nconsole.log(z.union([z.string(), z.number()]).transform((x) =&gt; Number(x)).pipe(z.number()).parse('1')); // 1\nor pipe and coerceconsole.log(z.union([z.string(), z.number()]).pipe(z.coerce.string()).parse(1)); // \"1\"\nconsole.log(z.union([z.string(), z.number()]).pipe(z.coerce.number()).parse('1') ); // 1 <a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://zod.dev/?id=coercion-for-primitives\" target=\"_self\">https://zod.dev/?id=coercion-for-primitives</a>\n<br><a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://zod.dev/?id=preprocess\" target=\"_self\">https://zod.dev/?id=preprocess</a>\n<br><a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://zod.dev/?id=pipe\" target=\"_self\">https://zod.dev/?id=pipe</a>\n<br><a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://twitter.com/colinhacks/status/1602238724120924160?lang=en\" target=\"_self\">https://twitter.com/colinhacks/status/1602238724120924160?lang=en</a>\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"added by <a data-tooltip-position=\"top\" aria-label=\"https://github.com/JacobWeisenburger\" rel=\"noopener nofollow\" class=\"external-link\" href=\"https://github.com/JacobWeisenburger\" target=\"_blank\">@JacobWeisenburger</a>","level":6,"id":"added_by_[@JacobWeisenburger](https//github.com/JacobWeisenburger)_0"}],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/dev/web/zod.html","pathToRoot":"../..","attachments":[],"createdTime":1723369403290,"modifiedTime":1723369421825,"sourceSize":1433,"sourcePath":"Dev/web/zod.md","exportPath":"dev/web/zod.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"dev/grpc.html":{"title":"grpc","icon":"","description":"gRPC是一种开源的远程过程调用（RPC）框架，由Google开发。它使用Protocol Buffers作为接口描述语言，提供了高效、跨语言的通信机制。gRPC支持多种编程语言，并且具有强大的功能，如双向流、流控制和多语言支持。这使得它成为构建分布式系统的强大工具。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/dev/grpc.html","pathToRoot":"..","attachments":[],"createdTime":1717430741348,"modifiedTime":1704720335000,"sourceSize":338,"sourcePath":"Dev/grpc.md","exportPath":"dev/grpc.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"finance/ppp.html":{"title":"PPP","icon":"","description":"公式：\n: 本国货币与外币之间的汇率。 : 本国的物价水平。 : 外国的物价水平。\n解释：\n绝对购买力平价理论认为，本国与外国的货币汇率由两国物价水平的比值决定。即：公式：或者：\n解释：\n相对购买力平价关注的是两国之间物价变化的比率对汇率变化的影响。换句话说，如果一个国家的物价水平相对于另一个国家的物价上升，该国货币应该贬值以保持购买力均衡。\n绝对购买力平价：直接用物价比率计算汇率。\n相对购买力平价：通过物价变化率预测汇率变化。\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"绝对购买力平价（Absolute PPP）","level":3,"id":"绝对购买力平价（Absolute_PPP）_0"},{"heading":"相对购买力平价（Relative PPP）","level":3,"id":"相对购买力平价（Relative_PPP）_0"}],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/finance/ppp.html","pathToRoot":"..","attachments":[],"createdTime":1732670039202,"modifiedTime":1732670463554,"sourceSize":1140,"sourcePath":"Finance/PPP.md","exportPath":"finance/ppp.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"finance/利差交易.html":{"title":"利差交易","icon":"","description":"利差交易（Carry Trade）的核心是套利： 借入低利率货币（如日元，利率接近0%）。\n将资金兑换为高利率货币（如美元，利率超过5%）进行投资。\n收益包括： 利率差收益：高利率资产带来的固定回报。 汇率波动收益：低利率货币贬值可进一步扩大利润。 自2021年起，美联储大幅加息以应对通胀，而日本央行继续执行超低利率政策，导致两国利差扩大。\n这种背景下，大量投资者： 借日元，然后投资美元资产。 汇率方面：卖出日元，买入美元，进一步压低日元汇率。 日元兑美元汇率从100跌至150（2023年期间）。 日本央行多次入市干预，效果有限。 利差扩大：资金持续流入高利率国家，低利率货币贬值。 政策预期变化：若市场预期日本加息、美国降息，资金会迅速撤出。\n例如，2023年底，市场预计日元加息，美元降息，日元迅速反弹。 平仓离场：投资者卖出美元、买回日元，导致日元汇率反弹。 踩踏效应：离场集中发生，形成短期剧烈波动。\n日元常被视为避险资产，原因与利差交易密切相关：\n核灾、海啸引发市场恐慌。 投资者平仓利差交易，大量买回日元。 日元迅速升值，创下历史高位。 G7国家央行联手抛售日元，打压其汇率。 这是美联储自1995年以来首次大规模干预外汇市场。 短期内日元贬值至1美元兑85日元。 但市场力量强大，日元再次迅速升值，日本央行两次单独干预均失败。\n日本长期维持低利率，日元成为利差交易的主要融资货币：\n借日元，投资澳元、新西兰元，日元兑这两种货币持续贬值。 2008年金融危机：利差交易资金撤出，澳元、新西兰元暴跌。 澳大利亚经常账户长期逆差，需要吸引外资补充。 外资通过利差交易大量购买澳大利亚国债，导致其外债比例一度高达80%。 汇率风险：\n若高利率货币突然贬值，可能造成重大亏损。 市场波动：\n遇到危机时，投资者平仓引发大规模资本流动，造成踩踏效应。 政策风险：\n各国央行干预、利率政策调整都会直接影响利差交易。\n外汇市场资金流动规模巨大，哪怕是G7央行联合干预，也难以逆转长期趋势。\n这使得外汇市场波动复杂多样，但其背后的逻辑依然围绕套利和避险情绪。 利差交易是外汇市场中最基本、最重要的驱动力之一。从套利机制到市场波动，再到避险属性，它贯穿了全球金融市场的各个层面。\n了解这一逻辑，能够帮助我们更好地理解外汇市场的涨跌背后那些复杂但又规律的力量。利率就是平稳投资，风险在于国家信用，股票就是风险投资风险在于市炀波动","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"利差交易的详细分析","level":3,"id":"利差交易的详细分析_0"},{"heading":"1. 利差交易基本原理","level":4,"id":"1._**利差交易基本原理**_0"},{"heading":"2. 2023年日元与美元的利差交易","level":4,"id":"2._**2023年日元与美元的利差交易**_0"},{"heading":"结果：","level":5,"id":"结果：_0"},{"heading":"3. 利差交易如何导致市场波动","level":4,"id":"3._**利差交易如何导致市场波动**_0"},{"heading":"资金流动机制：","level":5,"id":"资金流动机制：_0"},{"heading":"4. 历史案例：日元的“避险”属性","level":4,"id":"4._**历史案例：日元的“避险”属性**_0"},{"heading":"2011年日本大地震：","level":5,"id":"2011年日本大地震：_0"},{"heading":"G7联合干预：","level":5,"id":"G7联合干预：_0"},{"heading":"干预效果：","level":5,"id":"干预效果：_0"},{"heading":"5. 长期趋势与其他利差交易案例","level":4,"id":"5._**长期趋势与其他利差交易案例**_0"},{"heading":"2000-2008年：","level":5,"id":"2000-2008年：_0"},{"heading":"澳大利亚国债的外资依赖：","level":5,"id":"澳大利亚国债的外资依赖：_0"},{"heading":"6. 利差交易的风险","level":4,"id":"6._**利差交易的风险**_0"},{"heading":"7. 外汇市场的魅力","level":4,"id":"7._**外汇市场的魅力**_0"},{"heading":"结论","level":3,"id":"结论_0"}],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/finance/利差交易.html","pathToRoot":"..","attachments":[],"createdTime":1731477684974,"modifiedTime":1732628878123,"sourceSize":3639,"sourcePath":"Finance/利差交易.md","exportPath":"finance/利差交易.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"finance/国际收支、双顺差与货币升值.html":{"title":"国际收支、双顺差与货币升值","icon":"","description":"国际收支是一个国家在一定时期内（通常是一年）与世界其他国家或地区的全部经济交易的系统记录。简单来说，就是一国在国际上“收支”情况的账本。这个账本主要分两个账户：\n经常账户： 主要记录货物和服务贸易、所得收入和经常转移等产生的资金流动。\n资本账户： 主要记录直接投资、证券投资、金融衍生品等资本流动。 贸易顺差： 指一个国家在一定时期内出口商品和服务的总值大于进口商品和服务的总值。也就是说，这个国家卖出去的东西比买进的东西多，赚了外汇。\n资本账户顺差： 指一个国家在一定时期内流入的资本大于流出的资本。也就是说，外国投资者愿意把钱投到这个国家来，可能是投资工厂、购买股票、债券等。\n当一个国家同时出现贸易顺差和资本账户顺差时，我们称之为“双顺差”。双顺差对货币升值有显著的推动作用。原因如下： 外汇需求增加： 贸易顺差： 当一个国家出口增加，外国需要用本国的货币来购买该国的商品，这增加了对本国货币的需求。\n资本账户顺差： 外国投资者为了投资该国的企业或购买该国的资产，需要兑换成本国货币，同样增加了对本国货币的需求。 外汇供给减少： 由于贸易顺差，该国企业获得大量外汇，但由于资本账户顺差，这些外汇又流向了国内，导致市场上流通的外汇减少。 货币升值： 当一种货币的需求增加，供给减少时，其汇率就会升高。也就是说，用外币兑换本国货币需要付出更多的外币，即本国货币升值。 在过去很长一段时间里，中国一直保持着贸易顺差和资本账户顺差的“双顺差”格局。这主要得益于：\n出口导向型经济： 中国的制造业发达，产品具有价格优势，出口到全球各地。\n外商直接投资： 外国企业看重中国巨大的市场潜力和廉价劳动力，纷纷来华投资建厂。\n储蓄率高： 中国居民的储蓄率较高，为投资提供了充足的资金。\n双顺差推动了人民币的持续升值。 然而，人民币升值也带来了一些问题，比如：\n出口企业压力增大： 人民币升值使得中国出口产品的价格在国际市场上相对提高，削弱了中国产品的竞争力。\n通货膨胀压力： 大量外汇流入，可能导致国内流动性过剩，引发通货膨胀。\n为了应对人民币升值带来的问题，中国政府采取了一系列措施，包括：\n外汇干预： 央行通过买卖外汇来调节汇率。\n资本管制： 对资本流动进行限制，以减缓人民币升值的速度。\n鼓励人民币国际化： 扩大人民币的使用范围，增强人民币的国际地位。\n总结国际收支的双顺差对一国货币的升值具有显著的推动作用。然而，货币升值也会带来一些负面影响。因此，各国政府在制定经济政策时，需要综合考虑汇率的波动对经济的影响，并采取相应的措施。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"国际收支是什么？","level":3,"id":"国际收支是什么？_0"},{"heading":"什么是贸易顺差和资本账户顺差？","level":3,"id":"什么是贸易顺差和资本账户顺差？_0"},{"heading":"双顺差对货币的影响","level":3,"id":"双顺差对货币的影响_0"},{"heading":"中国的双顺差与人民币升值","level":3,"id":"中国的双顺差与人民币升值_0"}],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/finance/国际收支、双顺差与货币升值.html","pathToRoot":"..","attachments":[],"createdTime":1731480861530,"modifiedTime":1732628878123,"sourceSize":3425,"sourcePath":"Finance/国际收支、双顺差与货币升值.md","exportPath":"finance/国际收支、双顺差与货币升值.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"finance/影响外汇价格的因素.html":{"title":"影响外汇价格的因素","icon":"","description":"通胀越高的国家，这个国家的货币就倾向于越来越不值钱\n通货膨胀的影响 长期来看，高通胀会导致货币贬值。\n例子：印度卢比、津巴布韦元。 极端案例：津巴布韦 反复的恶性通胀和新货币发行，汇率剧烈波动。 全球同步通胀对汇率的影响\n- 通胀差异才是影响汇率的核心。\n- 疫情期间各国同步通胀，汇率变化相对平稳。\n<a data-href=\"PPP\" href=\"https://rinodg.pages.dev/finance/ppp.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">PPP</a> 利差效应\n投资者以借入低利率货币（如日元，利率接近0%），将资金兑换为高利率货币（如美元，利率超过5%）进行投资。\n资本流动\n高利率国家的债券或存款产品对投资者更有吸引力。投资者为了获得更高的收益，通常会将资金转移到这些国家，进一步增加该国货币需求。\n货币政策\n当央行提高利率，通常意味着在应对通胀或经济过热。这种政策往往也会被市场解读为该国经济基本面较强，从而提高对该货币的信心。\n通常来说利率越高，汇率越高。利率短期内的影响，可能会盖过通胀。<br><a data-href=\"利差交易\" href=\"https://rinodg.pages.dev/finance/利差交易.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">利差交易</a> 国际收支： 贸易顺差、资本账户顺差会推高货币。\n中国的双顺差曾导致人民币升值。 风险： 政治、经济风险会引发资本外逃，导致货币贬值。\n英国脱欧、土耳其政局动荡等事件均导致本币贬值。 政府持续性支出大于收入，就要借钱，要么外债，要么内债（自己印钱花）,自己印钱还债会导致通货膨胀，大多数情况都是同时发生的\n外汇管制、公开市场操作等政策影响汇率。\n央行干预有时能短期影响汇率，但长期仍受市场供需影响。\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"物价","level":3,"id":"物价_0"},{"heading":"利率与汇率的关系","level":3,"id":"利率与汇率的关系_0"},{"heading":"<a data-href=\"国际收支、双顺差与货币升值\" href=\"国际收支、双顺差与货币升值\" class=\"internal-link\" target=\"_blank\" rel=\"noopener nofollow\">国际收支、双顺差与货币升值</a>","level":3,"id":"[[国际收支、双顺差与货币升值]]_0"},{"heading":"央行政策","level":4,"id":"央行政策_0"}],"links":["finance/ppp.html#_0","finance/利差交易.html#_0","finance/国际收支、双顺差与货币升值.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/finance/影响外汇价格的因素.html","pathToRoot":"..","attachments":[],"createdTime":1731475006517,"modifiedTime":1732670039167,"sourceSize":1943,"sourcePath":"Finance/影响外汇价格的因素.md","exportPath":"finance/影响外汇价格的因素.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"finance/通货膨胀.html":{"title":"通货膨胀","icon":"","description":"通货膨胀是指商品和服务的总体价格水平上涨，导致货币购买力下降的现象通货膨胀是指货币的购买力降低，导致价格普遍上涨的现象。这意味着相同的金额的钱能购买的商品和服务减少。通货膨胀通常由以下因素引起：\n需求拉动：当需求超过供给时，企业可能提高价格以平衡市场。\n成本推动：生产成本上升（例如原材料价格或劳动力成本的增加）可能导致企业提高商品价格。\n货币供应增加：中央银行过度发行货币，增加市场上的货币量，也可能使价格上涨。\n持续的高通货膨胀会引起经济不稳定，因此各国政府和中央银行通常会采取措施来控制通货膨胀。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/finance/通货膨胀.html","pathToRoot":"..","attachments":[],"createdTime":1732604911350,"modifiedTime":1732605413624,"sourceSize":767,"sourcePath":"Finance/通货膨胀.md","exportPath":"finance/通货膨胀.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"linux/android.html":{"title":"android","icon":"","description":"fastboot devices -l fastboot flash recovery &lt;***.img&gt; fastboot reboot recovery\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"fastboot","level":2,"id":"fastboot_0"}],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/linux/android.html","pathToRoot":"..","attachments":[],"createdTime":1724053825574,"modifiedTime":1637769935000,"sourceSize":101,"sourcePath":"Linux/android.md","exportPath":"linux/android.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"linux/arch.html":{"title":"Arch","icon":"","description":"<a data-href=\"打包\" href=\"https://rinodg.pages.dev/linux/打包.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">打包</a>","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":["linux/打包.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/linux/arch.html","pathToRoot":"..","attachments":[],"createdTime":1717430741612,"modifiedTime":1713901926196,"sourceSize":10,"sourcePath":"Linux/Arch.md","exportPath":"linux/arch.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"linux/docker.html":{"title":"docker","icon":"","description":"docker system df命令，类似于 Linux 上的df命令，用于查看 Docker 的磁盘使用情况:docker system df\nTYPE TOTAL ACTIVE SIZE RECLAIMABLE\nImages 147 36 7.204GB 3.887GB (53%)\nContainers 37 10 104.8MB 102.6MB (97%)\nLocal Volumes 3 3 1.421GB 0B (0%)\nBuild Cache 0B 0B\n可知，Docker 镜像占用了7.2GB磁盘，Docker 容器占用了104.8MB磁盘，Docker 数据卷占用了1.4GB磁盘。docker system prune命令可以用于清理磁盘，删除关闭的容器、无用的数据卷和网络，以及 dangling 镜像(即无 tag 的镜像)。docker system prune -a命令清理得更加彻底，可以将没有容器使用 Docker 镜像都删掉。注意，这两个命令会把你暂时关闭的容器，以及暂时没有用到的 Docker 镜像都删掉了…所以使用之前一定要想清楚吶。执行docker system prune -a命令之后，Docker 占用的磁盘空间减少了很多：docker system df\nTYPE TOTAL ACTIVE SIZE RECLAIMABLE\nImages 10 10 2.271GB 630.7MB (27%)\nContainers 10 10 2.211MB 0B (0%)\nLocal Volumes 3 3 1.421GB 0B (0%)\nBuild Cache 0B 0B\n对于旧版的 Docker(版本 1.13 之前)，是没有 docker system 命令的，因此需要进行手动清理。这里给出几个常用的命\n删除所有关闭的容器docker ps -a | grep Exit | cut -d ' ' -f 1 | xargs docker rm 删除所有 dangling 镜像(即无 tag 的镜像)：docker rmi $(docker images | grep \"^&lt;none&gt;\" | awk \"{print $3}\") 删除所有 dangling 数据卷(即无用的 volume)：docker volume rm $(docker volume ls -qf dangling=true) Fundebug提供实时、专业的错误监控服务，为您的线上代码保驾护航，欢迎大家免费使用！有一次，当我使用 1 与 2 提到的方法清理磁盘之后，发现并没有什么作用，于是，我进行了一系列分析。在 Ubuntu 上，Docker 的所有相关文件，包括镜像、容器等都保存在/var/lib/docker/目录中：du -hs /var/lib/docker/\n97G\t/var/lib/docker/\nDocker 竟然使用了将近100GB磁盘，这也是够了。使用du命令继续查看，可以定位到真正占用这么多磁盘的目录：92G\t/var/lib/docker/containers/a376aa694b22ee497f6fc9f7d15d943de91c853284f8f105ff5ad6c7ddae7a53\n由docker ps可知，nginx 容器的 ID 恰好为a376aa694b22，与上面的目录/var/lib/docker/containers/a376aa694b22的前缀一致：docker ps\nCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\na376aa694b22 192.168.59.224:5000/nginx:1.12.1 \"nginx -g 'daemon off\" 9 weeks ago Up 10 minutes nginx\n因此，nginx 容器竟然占用了92GB的磁盘。进一步分析可知，真正占用磁盘空间的是 nginx 的日志文件。那么这就不难理解了。我们Fundebug每天的数据请求为百万级别，那么日志数据自然非常大。使用truncate命令，可以将 nginx 容器的日志文件“清零”：truncate -s 0 /var/lib/docker/containers/a376aa694b22ee497f6fc9f7d15d943de91c853284f8f105ff5ad6c7ddae7a53/*-json.log\n当然，这个命令只是临时有作用，日志文件迟早又会涨回来。要从根本上解决问题，需要限制 nginx 容器的日志文件大小。这个可以通过配置日志的max-size来实现，下面是 nginx 容器的 docker-compose 配置文件：nginx:\nimage: nginx:1.12.1\nrestart: always\nlogging:\ndriver: \"json-file\"\noptions:\nmax-size: \"5g\"\n重启 nginx 容器之后，其日志文件的大小就被限制在5GB，再也不用担心了~还有一次，当我清理了镜像、容器以及数据卷之后，发现磁盘空间并没有减少。根据Docker disk usage提到过的建议，我重启了 Docker，发现磁盘使用率从 83%降到了 19%。根据高手指点，这应该是与内核 3.13 相关的 BUG，导致 Docker 无法清理一些无用目录：it’s quite likely that for some reason when those container shutdown, docker couldn’t remove the directory because the shm device was busy. This tends to happen often on 3.13 kernel. You may want to update it to the 4.4 version supported on trusty 14.04.5 LTS.The reason it disappeared after a restart, is that daemon probably tried and succeeded to clean up left over data from stopped containers.我查看了一下内核版本，发现真的是 3.13:uname -r\n3.13.0-86-generic\n如果你的内核版本也是 3.13，而且清理磁盘没能成功，不妨重启一下 Docker。当然，这个晚上操作比较靠谱。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"docker system 命令","level":2,"id":"docker_system_命令_0"},{"heading":"手动清理 Docker 镜像/容器/数据卷","level":2,"id":"手动清理_Docker_镜像/容器/数据卷_0"},{"heading":"限制容器的日志大小","level":2,"id":"限制容器的日志大小_0"},{"heading":"重启 Docker","level":2,"id":"重启_Docker_0"}],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/linux/docker.html","pathToRoot":"..","attachments":[],"createdTime":1724053825575,"modifiedTime":1637769935000,"sourceSize":5305,"sourcePath":"Linux/docker.md","exportPath":"linux/docker.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"linux/git.html":{"title":"git","icon":"","description":"git commit --amend -m \"messsage\"\ngit commit --amend --author=\"NewAuthor &lt;NewEmail@address.com&gt;\"如果是多个修改，那么就需要使用到 git filter-branch 这个工具来做批量修改\n为了方便使用，封装了一个简单的shell脚本，直接修改 [XXX] 中的变量为对应的值即可#!/bin/sh git filter-branch --env-filter ' an=\"$GIT_AUTHOR_NAME\"\nam=\"$GIT_AUTHOR_EMAIL\"\ncn=\"$GIT_COMMITTER_NAME\"\ncm=\"$GIT_COMMITTER_EMAIL\" if [ \"$GIT_COMMITTER_EMAIL\" = \"[Your Old Email]\" ]\nthen cn=\"[Your New Author Name]\" cm=\"[Your New Email]\"\nfi\nif [ \"$GIT_AUTHOR_EMAIL\" = \"[Your Old Email]\" ]\nthen an=\"[Your New Author Name]\" am=\"[Your New Email]\"\nfi export GIT_AUTHOR_NAME=\"$an\"\nexport GIT_AUTHOR_EMAIL=\"$am\"\nexport GIT_COMMITTER_NAME=\"$cn\"\nexport GIT_COMMITTER_EMAIL=\"$cm\"\n'\ngit checkout的--orphanname: Push to master on: push: branches: - master jobs: build: runs-on: ubuntu-latest steps: # the checkout action persists the passed credentials by default # subsequent git commands will pick them up automatically - uses: actions/checkout@v2 with: token: ${{secrets.PAT}} - run: | # do something git push\ngit config --global core.quotepath false设置 git config --global http.https://github.com.proxy socks5://127.0.0.1:1086\n设置完成后, ~/.gitconfig 文件中会增加以下条目:[http \"https://github.com\"] proxy = socks5://127.0.0.1:1086\n修改 ~/.ssh/config 文件Host github.com User git ProxyCommand nc -v -x 127.0.0.1:1086 %h %p\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"修改最後一次commit記錄","level":2,"id":"修改最後一次commit記錄_0"},{"heading":"多个commit的修改","level":2,"id":"多个commit的修改_0"},{"heading":"創建空白分支","level":2,"id":"創建空白分支_0"},{"heading":"創建無commit分支","level":3,"id":"創建無commit分支_0"},{"heading":"github action 觸發 workflow","level":2,"id":"github_action_觸發_workflow_0"},{"heading":"git status 中文","level":2,"id":"git_status_中文_0"},{"heading":"git 代理","level":2,"id":"git_代理_0"},{"heading":"仅为 GitHub 设置代理","level":4,"id":"仅为_GitHub_设置代理_0"},{"heading":"<a data-tooltip-position=\"top\" aria-label=\"https://gist.github.com/chenshengzhi/07e5177b1d97587d5ca0acc0487ad677#git-%E4%BB%A3%E7%90%86\" rel=\"noopener nofollow\" class=\"external-link\" href=\"https://gist.github.com/chenshengzhi/07e5177b1d97587d5ca0acc0487ad677#git-%E4%BB%A3%E7%90%86\" target=\"_blank\"></a>","level":5,"id":"[](https//gist.github.com/chenshengzhi/07e5177b1d97587d5ca0acc0487ad677#git-代理)_0"},{"heading":"git 代理","level":5,"id":"git_代理_1"},{"heading":"ssh 代理","level":5,"id":"ssh_代理_0"}],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/linux/git.html","pathToRoot":"..","attachments":[],"createdTime":1724053825587,"modifiedTime":1637769935000,"sourceSize":1968,"sourcePath":"Linux/git.md","exportPath":"linux/git.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"linux/shell.html":{"title":"shell","icon":"","description":"使用sh:#!/bin/sh\nvalue=`cat config.txt`\necho \"$value\"\n在bash或zsh中，将整个文件读入变量而无需调用cat:\n#!/bin/bash\nvalue=$(&lt;config.txt)\necho \"$value\"\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"文件读入shell中的变量","level":2,"id":"文件读入shell中的变量_0"}],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/linux/shell.html","pathToRoot":"..","attachments":[],"createdTime":1724053825597,"modifiedTime":1637769935000,"sourceSize":227,"sourcePath":"Linux/shell.md","exportPath":"linux/shell.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"linux/zsh-disable-history.html":{"title":"zsh disable history","icon":"","description":"Launch a new zsh shell and disable history within it.\nOption 1zsh # or just $SHELL if you're already running zsh\nunset HISTFILE\n...secret commands...\nexitThe secret commands won't be stored in the history file.\nOption 2zsh # or just $SHELL if you're already running zsh\nfc -p\n...secret commands...\nexitThe fc -p will switch zsh to a in-memory history that will be discarded when you exit.The downside: the previous history (commands entered before the private session started) will not be available.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/linux/zsh-disable-history.html","pathToRoot":"..","attachments":[],"createdTime":1717430741039,"modifiedTime":1694775492531,"sourceSize":516,"sourcePath":"Linux/zsh disable history.md","exportPath":"linux/zsh-disable-history.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"linux/打包.html":{"title":"打包","icon":"","description":"<a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://wiki.archlinux.org/title/Makepkg#Building_optimized_binaries\" target=\"_self\">https://wiki.archlinux.org/title/Makepkg#Building_optimized_binaries</a>\n看来这是arch编译时期的魔法呢","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/linux/打包.html","pathToRoot":"..","attachments":[],"createdTime":1717430741689,"modifiedTime":1713901943999,"sourceSize":111,"sourcePath":"Linux/打包.md","exportPath":"linux/打包.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"linux/添加用户.html":{"title":"添加用户","icon":"","description":"Linux下创建用户时会用到useradd和adduser这两个命令，他们的区别如下：\n使用useradd时，如果后面不添加任何参数选项，例如：#sudo useradd test创建出来的用户将是默认“三无”用户：一无Home Directory，二无密码，三无系统Shell。\n使用adduser时，创建用户的过程更像是一种人机对话，系统会提示你输入各种信息，然后会根据这些信息帮你创建新用户。 adduser会提示设置密码，而useradd不会。\nadduser会创建用户目录，比如/home/freebird freebird是用户，useradd不会\ndduser会创建用户目录，比如/home/freebird freebird是用户，useradd不会\nadduser会询问全名，房间号码，电话号码等用户信息，useradd不会\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/linux/添加用户.html","pathToRoot":"..","attachments":[],"createdTime":1730085900183,"modifiedTime":1730085901348,"sourceSize":773,"sourcePath":"Linux/添加用户.md","exportPath":"linux/添加用户.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"linux/端口占用.html":{"title":"端口占用","icon":"","description":"在 Linux 上，可以使用以下几种方法查看端口占用情况： netstat 命令：\nsudo netstat -tuln | grep LISTEN -t：显示 TCP 端口\n-u：显示 UDP 端口\n-l：显示监听状态的端口\n-n：数字格式显示地址和端口\ngrep LISTEN：过滤出处于监听状态的端口 ss 命令（更现代的工具）：\nsudo ss -tuln 功能和 netstat 类似，但效率更高，通常是现代系统上的默认工具。 lsof 命令：\n查看指定端口是否被占用：\nsudo lsof -i :&lt;port&gt; 例如，查看 8080 端口是否被占用：\nsudo lsof -i :8080 fuser 命令：\n查看特定端口的使用情况：\nsudo fuser -n tcp &lt;port&gt; 例如，查看 8080 端口：\nsudo fuser -n tcp 8080 这些命令都可以帮助你快速确定某个端口的使用情况。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/linux/端口占用.html","pathToRoot":"..","attachments":[],"createdTime":1725882445354,"modifiedTime":1725808566458,"sourceSize":994,"sourcePath":"Linux/端口占用.md","exportPath":"linux/端口占用.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"uncategorized/google-地区.html":{"title":"Google 地区","icon":"","description":"查询谷歌账号采用了哪一个国家/地区版本的服务条款。也许和你预测的不一样。<a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://policies.google.com/terms\" target=\"_self\">https://policies.google.com/terms</a>","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/uncategorized/google-地区.html","pathToRoot":"..","attachments":[],"createdTime":1732629236057,"modifiedTime":1732629236431,"sourceSize":141,"sourcePath":"Uncategorized/Google 地区.md","exportPath":"uncategorized/google-地区.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"uncategorized/telegram-avatar.html":{"title":"telegram avatar","icon":"","description":"<a data-tooltip-position=\"top\" aria-label=\"https://t.me/i/userpic/320/%7Busername%7D.jpg\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://t.me/i/userpic/320/%7Busername%7D.jpg\" target=\"_self\">https://t.me/i/userpic/320/{username}.jpg</a>Telegram 直接获取 Public Chat （包括用户）头像的接口如果想在网站，比如个人博客上，挂一个链接到 tg 账户并且能自动更新的头像，就可以使用这个接口。如果怕这个链接国内直连访问不了，可以使用 WordPress 提供的图片代理：<br><a data-tooltip-position=\"top\" aria-label=\"https://i0.wp.com/t.me/i/userpic/320/%7Busername%7D.jpg\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://i0.wp.com/t.me/i/userpic/320/%7Busername%7D.jpg\" target=\"_self\">https://i0.wp.com/t.me/i/userpic/320/{username}.jpg</a><br><a href=\"https://rinodg.pages.dev?query=tag:telegram\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#telegram\">#telegram</a>","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":["?query=tag:telegram"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/uncategorized/telegram-avatar.html","pathToRoot":"..","attachments":[],"createdTime":1732629236068,"modifiedTime":1732629236432,"sourceSize":411,"sourcePath":"Uncategorized/telegram avatar.md","exportPath":"uncategorized/telegram-avatar.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"uncategorized/zed-用-ollama.html":{"title":"zed 用 ollama","icon":"","description":"Here is a complete rundown of how I got it to work after collecting all the pieces of information in this thread:\nNote: I run Ollama on Mac, if you run anything differently, you have to adapt it.\nAdd the following configuration to Zed config:\n\"assistant\": { \"version\": \"1\", \"provider\": { \"name\": \"openai\", \"type\": \"openai\", \"default_model\": \"gpt-4-turbo-preview\", \"api_url\": \"http://localhost:11434/v1\" } } Download Mistral via ollama cli:\nollama run mistral Copy the downloaded Mistral, changing its name:\nollama cp mistral gpt-4-turbo-preview Add the OpenAI API key to Zed (<a data-tooltip-position=\"top\" aria-label=\"https://ollama.com/blog/openai-compatibility\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://ollama.com/blog/openai-compatibility\" target=\"_self\">source</a>):\nollama Restart Zed to ensure everything is working as it is supposed to.\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/uncategorized/zed-用-ollama.html","pathToRoot":"..","attachments":[],"createdTime":1717430741695,"modifiedTime":1714070983913,"sourceSize":808,"sourcePath":"Uncategorized/zed 用 ollama.md","exportPath":"uncategorized/zed-用-ollama.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"uncategorized/什么是金丝雀安全声明？-cloudflare.html":{"title":"什么是金丝雀安全声明？ - Cloudflare","icon":"","description":"<a data-tooltip-position=\"top\" aria-label=\"https://www.cloudflare.com/zh-cn/learning/privacy/what-is-warrant-canary/\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.cloudflare.com/zh-cn/learning/privacy/what-is-warrant-canary/\" target=\"_self\">Read Original</a><br>\n“FBI 没有来过这里”；如果该标志被取下，则暗示美国联邦调查局 (FBI) 已经访问了该图书馆内的顾客记录 <a data-tooltip-position=\"top\" aria-label=\"https://omnivore.app/me/cloudflare-18e5fbe438b#fc95feb4-4fa6-489b-b785-2b0cf9be36f2\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://omnivore.app/me/cloudflare-18e5fbe438b#fc95feb4-4fa6-489b-b785-2b0cf9be36f2\" target=\"_self\">⤴️</a> ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Highlights","level":2,"id":"Highlights_0"}],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/uncategorized/什么是金丝雀安全声明？-cloudflare.html","pathToRoot":"..","attachments":[],"createdTime":1717430741212,"modifiedTime":1732631394298,"sourceSize":356,"sourcePath":"Uncategorized/什么是金丝雀安全声明？ - Cloudflare.md","exportPath":"uncategorized/什么是金丝雀安全声明？-cloudflare.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"uncategorized/写作压力.html":{"title":"写作压力","icon":"","description":"大概就是每次提笔（其实是键盘），都会想着我要提供些有价值的东西。\n我希望有独创的内容，文章结构清晰、思路连贯。然后我改来改去但最终还是感觉不满意，然后就丢掉了。虽然我明白，写博客不必太严肃正式，又不是投稿顶级期刊。但是吧。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/uncategorized/写作压力.html","pathToRoot":"..","attachments":[],"createdTime":1732629236070,"modifiedTime":1732629236434,"sourceSize":331,"sourcePath":"Uncategorized/写作压力.md","exportPath":"uncategorized/写作压力.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"uncategorized/小鹤双拼-on-windows.html":{"title":"小鹤双拼 on windows","icon":"","description":"在注册表编辑器上面的框子里输入注册表路径：计算机\\HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\InputMethod\\Settings\\CHS鼠标右键点击空白处，添加键值：UserDefinedDoublePinyinScheme0小鹤双拼*2*^*iuvdjhcwfgrxmlnpbksqszxkrltvyovt","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/uncategorized/小鹤双拼-on-windows.html","pathToRoot":"..","attachments":[],"createdTime":1732629290701,"modifiedTime":1732629369099,"sourceSize":270,"sourcePath":"Uncategorized/小鹤双拼 on windows.md","exportPath":"uncategorized/小鹤双拼-on-windows.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"uncategorized/清除-powershell-历史.html":{"title":"清除 Powershell 历史","icon":"","description":"Remove-Item (Get-PSReadlineOption).HistorySavePath","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/uncategorized/清除-powershell-历史.html","pathToRoot":"..","attachments":[],"createdTime":1732629325540,"modifiedTime":1732629369095,"sourceSize":57,"sourcePath":"Uncategorized/清除 Powershell 历史.md","exportPath":"uncategorized/清除-powershell-历史.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"翻墙/clash/index.html":{"title":"Clash","icon":"","description":"","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/翻墙/clash/index.html","pathToRoot":"../..","attachments":[],"createdTime":1732629236074,"modifiedTime":1732629236528,"sourceSize":21,"sourcePath":"翻墙/clash/index.md","exportPath":"翻墙/clash/index.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"翻墙/clash/dialer-proxy.html":{"title":"dialer-proxy","icon":"","description":"指定当前 proxy 通过下一跳的 dialer-proxy 建立网络连接, 值可以为代理组、代理（proxy-groups, proxy）的同一 name 字段","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/翻墙/clash/dialer-proxy.html","pathToRoot":"../..","attachments":[],"createdTime":1732629236063,"modifiedTime":1732629236504,"sourceSize":153,"sourcePath":"翻墙/clash/dialer-proxy.md","exportPath":"翻墙/clash/dialer-proxy.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"翻墙/clash/warp-ip-range.html":{"title":"warp ip range","icon":"","description":"whois -h whois.radb.net -- '-i origin AS13335' | grep -Eo \"([0-9.]+){4}/[0-9]+\" &gt; cloudflare_ranges.txt","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/翻墙/clash/warp-ip-range.html","pathToRoot":"../..","attachments":[],"createdTime":1732629236055,"modifiedTime":1732629236438,"sourceSize":106,"sourcePath":"翻墙/clash/warp ip range.md","exportPath":"翻墙/clash/warp-ip-range.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"翻墙/clash/使用-clash-meta-+-warp-增强使用机场时的隐私.html":{"title":"使用 clash meta + Warp 增强使用机场时的隐私","icon":"","description":"warp 需要用到的 wireguard 目前不支持在 <a data-tooltip-position=\"top\" aria-label=\"链式代理\" data-href=\"链式代理\" href=\"https://rinodg.pages.dev/翻墙/clash/链式代理.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">relay</a> 中使用， 只能在 proxy 配置 <a data-href=\"dialer-proxy\" href=\"https://rinodg.pages.dev/翻墙/clash/dialer-proxy.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">dialer-proxy</a>proxy-groups 中添加前置代理的分组- {\nname: 前置,\ntype: select,\nproxies: [DIRECT, 自动选择, 默认, 香港, 台湾, 美国, 日本, 新加坡, 其它地区],\n}\nWarp 配置- name: WARP\ntype: wireguard\nserver: engage.cloudflareclient.com\nport: 2408\nip: 172.16.0.2\nipv6: 2606:4700:110:8f0f:c898:f966:48a7:4ebf\nprivate-key: \"private-key\"\npublic-key: \"public-key\"\nudp: true\nremote-dns-resolve: true\ndns: [\"1.1.1.1\", \"8.8.8.8\"]\ndialer-proxy: \"前置\"\n上面例子，Clash &lt;-&gt; 前置 &lt;-&gt; WARP &lt;-&gt; Internet\n防止机场主监视 机场主是有能力监视你访问的每一个地址和访问时间，特别是某些机场主有恶俗倾向。如果套上 warp，机场主就只能看到 warp 的加密流量。 访问机场禁止访问的网站\n","aliases":[],"inlineTags":[],"frontmatterTags":["#privacy"],"headers":[{"heading":"说说作用","level":2,"id":"说说作用_0"}],"links":["翻墙/clash/链式代理.html#_0","翻墙/clash/dialer-proxy.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/翻墙/clash/使用-clash-meta-+-warp-增强使用机场时的隐私.html","pathToRoot":"../..","attachments":[],"createdTime":1732629236054,"modifiedTime":1732629236435,"sourceSize":955,"sourcePath":"翻墙/clash/使用 clash meta + Warp 增强使用机场时的隐私.md","exportPath":"翻墙/clash/使用-clash-meta-+-warp-增强使用机场时的隐私.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"翻墙/clash/链式代理.html":{"title":"链式代理","icon":"","description":"代理链，目前 relay 可以支持 udp 的只有 vmess/vless/trojan/ss/ssr/tuic\nwireguard目前不支持在relay中使用，请使用 proxy 中的 <a data-href=\"dialer-proxy\" href=\"https://rinodg.pages.dev/翻墙/clash/dialer-proxy.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">dialer-proxy</a> 配置项Proxy Groups: - name: \"relay\" type: relay proxies: - http - vmess - ss1 - ss2 Traffic: Clash &lt;-&gt; http &lt;-&gt; vmess &lt;-&gt; ss1 &lt;-&gt; ss2 &lt;-&gt; Internet","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":["翻墙/clash/dialer-proxy.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/翻墙/clash/链式代理.html","pathToRoot":"../..","attachments":[],"createdTime":1732629236058,"modifiedTime":1732629236502,"sourceSize":348,"sourcePath":"翻墙/clash/链式代理.md","exportPath":"翻墙/clash/链式代理.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"翻墙/warp.html":{"title":"WARP","icon":"","description":"WARP 是 Cloudflare 推出的一项（VPN）服务。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/翻墙/warp.html","pathToRoot":"..","attachments":[],"createdTime":1732629236056,"modifiedTime":1732629236498,"sourceSize":53,"sourcePath":"翻墙/WARP.md","exportPath":"翻墙/warp.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"index.html":{"title":"欢迎，这是我的数字花园","icon":"","description":"之所以要这样一片数字花园，只是因为我的大脑也像这么一个杂草丛生的地方。一些乱七八糟的，可公开的，不方便写成文章的都放这里好了。想想自己blog一直没怎么动的原因，写文章有<a data-tooltip-position=\"top\" aria-label=\"写作压力\" data-href=\"写作压力\" href=\"https://rinodg.pages.dev/uncategorized/写作压力.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">压力</a>。 况且比较碎片化的信息，做成双链笔记的形式也更合适，当然有空的时候我也尽量分类整理下的。其实我不太想做分类，但是供他人阅览还是有分类好。","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":["uncategorized/写作压力.html#_0"],"author":"icealtria","coverImageURL":"","fullURL":"https://rinodg.pages.dev/index.html","pathToRoot":".","attachments":[],"createdTime":1732629236075,"modifiedTime":1732662794808,"sourceSize":532,"sourcePath":"index.md","exportPath":"index.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"}},"fileInfo":{"computer/computer-architecture/big-endian-and-little-endian.html":{"createdTime":1717430741666,"modifiedTime":1678521506000,"sourceSize":583,"sourcePath":"Computer/Computer Architecture/Big Endian and Little Endian.md","exportPath":"computer/computer-architecture/big-endian-and-little-endian.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/computer-architecture/computer-architecture-(machine-structures).html":{"createdTime":1717430741714,"modifiedTime":1677743425518,"sourceSize":768,"sourcePath":"Computer/Computer Architecture/Computer Architecture (Machine Structures).md","exportPath":"computer/computer-architecture/computer-architecture-(machine-structures).html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/computer-architecture/hex-and-decimal.html":{"createdTime":1717430741658,"modifiedTime":1701246625000,"sourceSize":278,"sourcePath":"Computer/Computer Architecture/Hex and Decimal.md","exportPath":"computer/computer-architecture/hex-and-decimal.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/computer-architecture/整数表示.html":{"createdTime":1717430741636,"modifiedTime":1701658013000,"sourceSize":1040,"sourcePath":"Computer/Computer Architecture/整数表示.md","exportPath":"computer/computer-architecture/整数表示.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/computer-architecture/补码.html":{"createdTime":1717430741884,"modifiedTime":1701253576000,"sourceSize":1153,"sourcePath":"Computer/Computer Architecture/补码.md","exportPath":"computer/computer-architecture/补码.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/computer-networking/anycast.html":{"createdTime":1717430740966,"modifiedTime":1717774862385,"sourceSize":961,"sourcePath":"Computer/Computer Networking/Anycast.md","exportPath":"computer/computer-networking/anycast.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/computer-networking/arp.html":{"createdTime":1717430741760,"modifiedTime":1678716088000,"sourceSize":792,"sourcePath":"Computer/Computer Networking/ARP.md","exportPath":"computer/computer-networking/arp.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/computer-networking/arq.html":{"createdTime":1717430741651,"modifiedTime":1677833605679,"sourceSize":3222,"sourcePath":"Computer/Computer Networking/ARQ.md","exportPath":"computer/computer-networking/arq.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/computer-networking/bridge.html":{"createdTime":1717430741314,"modifiedTime":1678465106000,"sourceSize":538,"sourcePath":"Computer/Computer Networking/bridge.md","exportPath":"computer/computer-networking/bridge.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/computer-networking/cidr.html":{"createdTime":1717430741819,"modifiedTime":1678695032000,"sourceSize":0,"sourcePath":"Computer/Computer Networking/CIDR.md","exportPath":"computer/computer-networking/cidr.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/computer-networking/computer-networking.html":{"createdTime":1717430741705,"modifiedTime":1677854243014,"sourceSize":80,"sourcePath":"Computer/Computer Networking/Computer Networking.md","exportPath":"computer/computer-networking/computer-networking.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/computer-networking/cs144.html":{"createdTime":1717430741677,"modifiedTime":1677839211437,"sourceSize":0,"sourcePath":"Computer/Computer Networking/CS144.md","exportPath":"computer/computer-networking/cs144.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/computer-networking/cs144-lab0.html":{"createdTime":1717430741843,"modifiedTime":1677834099442,"sourceSize":1518,"sourcePath":"Computer/Computer Networking/cs144 lab0.md","exportPath":"computer/computer-networking/cs144-lab0.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/computer-networking/cs144-lab1.html":{"createdTime":1717430741049,"modifiedTime":1677946927250,"sourceSize":1985,"sourcePath":"Computer/Computer Networking/CS144 lab1.md","exportPath":"computer/computer-networking/cs144-lab1.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/computer-networking/encapsulation.html":{"createdTime":1717430741826,"modifiedTime":1677853941888,"sourceSize":482,"sourcePath":"Computer/Computer Networking/Encapsulation.md","exportPath":"computer/computer-networking/encapsulation.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/computer-networking/etag.html":{"createdTime":1717430741761,"modifiedTime":1677832424230,"sourceSize":920,"sourcePath":"Computer/Computer Networking/ETag.md","exportPath":"computer/computer-networking/etag.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/computer-networking/forwarding-information-base.html":{"createdTime":1717430741105,"modifiedTime":1678693969000,"sourceSize":419,"sourcePath":"Computer/Computer Networking/Forwarding information base.md","exportPath":"computer/computer-networking/forwarding-information-base.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/computer-networking/ice.html":{"createdTime":1717430740971,"modifiedTime":1678802024000,"sourceSize":510,"sourcePath":"Computer/Computer Networking/ICE.md","exportPath":"computer/computer-networking/ice.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/computer-networking/internet-protocol.html":{"createdTime":1717430741843,"modifiedTime":1678802036000,"sourceSize":797,"sourcePath":"Computer/Computer Networking/Internet Protocol.md","exportPath":"computer/computer-networking/internet-protocol.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/computer-networking/ipsec.html":{"createdTime":1717430741871,"modifiedTime":1717774749259,"sourceSize":2623,"sourcePath":"Computer/Computer Networking/IPsec.md","exportPath":"computer/computer-networking/ipsec.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/computer-networking/ipv4.html":{"createdTime":1717430740979,"modifiedTime":1677855113404,"sourceSize":360,"sourcePath":"Computer/Computer Networking/IPv4.md","exportPath":"computer/computer-networking/ipv4.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/computer-networking/longest-prefix-match.html":{"createdTime":1717430741733,"modifiedTime":1678695031000,"sourceSize":372,"sourcePath":"Computer/Computer Networking/Longest prefix match.md","exportPath":"computer/computer-networking/longest-prefix-match.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/computer-networking/mtu.html":{"createdTime":1717430741870,"modifiedTime":1678518643000,"sourceSize":0,"sourcePath":"Computer/Computer Networking/MTU.md","exportPath":"computer/computer-networking/mtu.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/computer-networking/packet.html":{"createdTime":1717430741627,"modifiedTime":1677839444735,"sourceSize":118,"sourcePath":"Computer/Computer Networking/packet.md","exportPath":"computer/computer-networking/packet.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/computer-networking/packet-switching.html":{"createdTime":1717430741859,"modifiedTime":1732664748630,"sourceSize":1766,"sourcePath":"Computer/Computer Networking/Packet Switching.md","exportPath":"computer/computer-networking/packet-switching.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/computer-networking/ptr-record.html":{"createdTime":1717430741687,"modifiedTime":1716883955706,"sourceSize":375,"sourcePath":"Computer/Computer Networking/PTR Record.md","exportPath":"computer/computer-networking/ptr-record.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/computer-networking/reliable-byte-stream.html":{"createdTime":1717430741780,"modifiedTime":1677833478728,"sourceSize":1889,"sourcePath":"Computer/Computer Networking/reliable byte stream.md","exportPath":"computer/computer-networking/reliable-byte-stream.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/computer-networking/tcp.html":{"createdTime":1717430741463,"modifiedTime":1717774712617,"sourceSize":1801,"sourcePath":"Computer/Computer Networking/TCP.md","exportPath":"computer/computer-networking/tcp.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/computer-networking/the-4-layer-internet-model.html":{"createdTime":1717430741657,"modifiedTime":1677841976019,"sourceSize":213,"sourcePath":"Computer/Computer Networking/the 4 layer internet model.md","exportPath":"computer/computer-networking/the-4-layer-internet-model.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/computer-networking/tun-and-tap.html":{"createdTime":1717430741476,"modifiedTime":1678772056000,"sourceSize":763,"sourcePath":"Computer/Computer Networking/TUN and TAP.md","exportPath":"computer/computer-networking/tun-and-tap.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/computer-networking/udp.html":{"createdTime":1717430741690,"modifiedTime":1679051136000,"sourceSize":296,"sourcePath":"Computer/Computer Networking/udp.md","exportPath":"computer/computer-networking/udp.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/computer-networking/underline-in-c++.html":{"createdTime":1717430741595,"modifiedTime":1677993028778,"sourceSize":358,"sourcePath":"Computer/Computer Networking/underline in c++.md","exportPath":"computer/computer-networking/underline-in-c++.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/computer-networking/window-sizes.html":{"createdTime":1717430741655,"modifiedTime":1716887151883,"sourceSize":45,"sourcePath":"Computer/Computer Networking/Window Sizes.md","exportPath":"computer/computer-networking/window-sizes.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/computer-networking/三次握手.html":{"createdTime":1717430741546,"modifiedTime":1716887308939,"sourceSize":2795,"sourcePath":"Computer/Computer Networking/三次握手.md","exportPath":"computer/computer-networking/三次握手.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/computer-networking/关闭连接.html":{"createdTime":1717430740995,"modifiedTime":1716887344229,"sourceSize":37,"sourcePath":"Computer/Computer Networking/关闭连接.md","exportPath":"computer/computer-networking/关闭连接.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/computer-networking/多播.html":{"createdTime":1717430740971,"modifiedTime":1717774732405,"sourceSize":615,"sourcePath":"Computer/Computer Networking/多播.md","exportPath":"computer/computer-networking/多播.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/computer-networking/子网.html":{"createdTime":1717430741847,"modifiedTime":1716800921735,"sourceSize":837,"sourcePath":"Computer/Computer Networking/子网.md","exportPath":"computer/computer-networking/子网.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/computer-networking/广播.html":{"createdTime":1717430741749,"modifiedTime":1716881200325,"sourceSize":775,"sourcePath":"Computer/Computer Networking/广播.md","exportPath":"computer/computer-networking/广播.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/computer-networking/网络掩码.html":{"createdTime":1717430741713,"modifiedTime":1717774872429,"sourceSize":1317,"sourcePath":"Computer/Computer Networking/网络掩码.md","exportPath":"computer/computer-networking/网络掩码.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/cs61a/202204231534.html":{"createdTime":1717430741854,"modifiedTime":1698490415812,"sourceSize":686,"sourcePath":"Computer/CS61A/202204231534.md","exportPath":"computer/cs61a/202204231534.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/cs61a/generators.html":{"createdTime":1717430741466,"modifiedTime":1670228912000,"sourceSize":4382,"sourcePath":"Computer/CS61A/Generators.md","exportPath":"computer/cs61a/generators.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/cs61a/iterable-uses.html":{"createdTime":1717430741616,"modifiedTime":1659354474000,"sourceSize":1760,"sourcePath":"Computer/CS61A/Iterable Uses.md","exportPath":"computer/cs61a/iterable-uses.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/cs61a/pure-functions-&-non-pure-functions.html":{"createdTime":1717430741702,"modifiedTime":1659354269000,"sourceSize":571,"sourcePath":"Computer/CS61A/Pure functions & Non-pure functions.md","exportPath":"computer/cs61a/pure-functions-&-non-pure-functions.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/cs61a/trees-&-tree-mutation.html":{"createdTime":1717430741675,"modifiedTime":1669272470000,"sourceSize":3749,"sourcePath":"Computer/CS61A/Trees & Tree Mutation.md","exportPath":"computer/cs61a/trees-&-tree-mutation.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/data-structure/a-star.html":{"createdTime":1717430741899,"modifiedTime":1670291894000,"sourceSize":649,"sourcePath":"Computer/Data Structure/A star.md","exportPath":"computer/data-structure/a-star.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/data-structure/bellman-ford.html":{"createdTime":1717430741836,"modifiedTime":1677842128299,"sourceSize":442,"sourcePath":"Computer/Data Structure/Bellman-Ford.md","exportPath":"computer/data-structure/bellman-ford.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/data-structure/breadth-first-search.html":{"createdTime":1717430741669,"modifiedTime":1669538306000,"sourceSize":477,"sourcePath":"Computer/Data Structure/Breadth First Search.md","exportPath":"computer/data-structure/breadth-first-search.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/data-structure/cut-property.html":{"createdTime":1717430741701,"modifiedTime":1670225352000,"sourceSize":359,"sourcePath":"Computer/Data Structure/Cut Property.md","exportPath":"computer/data-structure/cut-property.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/data-structure/data-structure.html":{"createdTime":1717430741645,"modifiedTime":1677393158000,"sourceSize":175,"sourcePath":"Computer/Data Structure/Data Structure.md","exportPath":"computer/data-structure/data-structure.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/data-structure/depth-first-traversais.html":{"createdTime":1717430741233,"modifiedTime":1673229416000,"sourceSize":579,"sourcePath":"Computer/Data Structure/Depth First TraversaIs.md","exportPath":"computer/data-structure/depth-first-traversais.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/data-structure/depth-first-traversal.html":{"createdTime":1717430741720,"modifiedTime":1670291894000,"sourceSize":916,"sourcePath":"Computer/Data Structure/Depth-First Traversal.md","exportPath":"computer/data-structure/depth-first-traversal.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/data-structure/determain-graph-has-cycle.html":{"createdTime":1717430741193,"modifiedTime":1669965949000,"sourceSize":913,"sourcePath":"Computer/Data Structure/Determain graph has cycle.md","exportPath":"computer/data-structure/determain-graph-has-cycle.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/data-structure/dijkstra.html":{"createdTime":1717430741888,"modifiedTime":1674703046000,"sourceSize":1032,"sourcePath":"Computer/Data Structure/Dijkstra.md","exportPath":"computer/data-structure/dijkstra.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/data-structure/dynamic-programming.html":{"createdTime":1717430741884,"modifiedTime":1677380387000,"sourceSize":3158,"sourcePath":"Computer/Data Structure/dynamic programming.md","exportPath":"computer/data-structure/dynamic-programming.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/data-structure/graph.html":{"createdTime":1717430741108,"modifiedTime":1670291894000,"sourceSize":1147,"sourcePath":"Computer/Data Structure/Graph.md","exportPath":"computer/data-structure/graph.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/data-structure/graph-problems.html":{"createdTime":1717430740995,"modifiedTime":1670291894000,"sourceSize":1045,"sourcePath":"Computer/Data Structure/Graph Problems.md","exportPath":"computer/data-structure/graph-problems.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/data-structure/heap.html":{"createdTime":1717430741653,"modifiedTime":1669106332000,"sourceSize":107,"sourcePath":"Computer/Data Structure/Heap.md","exportPath":"computer/data-structure/heap.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/data-structure/kruskal's-algorithm.html":{"createdTime":1717430741167,"modifiedTime":1670231236000,"sourceSize":1038,"sourcePath":"Computer/Data Structure/Kruskal's Algorithm.md","exportPath":"computer/data-structure/kruskal's-algorithm.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/data-structure/minimum-spanning-trees.html":{"createdTime":1717430741034,"modifiedTime":1670231554000,"sourceSize":968,"sourcePath":"Computer/Data Structure/Minimum Spanning Trees.md","exportPath":"computer/data-structure/minimum-spanning-trees.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/data-structure/prim's-algorithm.html":{"createdTime":1717430741868,"modifiedTime":1670291894000,"sourceSize":2023,"sourcePath":"Computer/Data Structure/Prim's Algorithm.md","exportPath":"computer/data-structure/prim's-algorithm.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/data-structure/priority-queue.html":{"createdTime":1717430741045,"modifiedTime":1669956294000,"sourceSize":46,"sourcePath":"Computer/Data Structure/Priority Queue.md","exportPath":"computer/data-structure/priority-queue.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/data-structure/red-black-trees.html":{"createdTime":1717430741857,"modifiedTime":1669966262000,"sourceSize":882,"sourcePath":"Computer/Data Structure/Red Black Trees.md","exportPath":"computer/data-structure/red-black-trees.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/data-structure/shortest-paths.html":{"createdTime":1717430741606,"modifiedTime":1670291894000,"sourceSize":547,"sourcePath":"Computer/Data Structure/Shortest Paths.md","exportPath":"computer/data-structure/shortest-paths.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/data-structure/spanning-trees.html":{"createdTime":1717430741174,"modifiedTime":1670225336000,"sourceSize":644,"sourcePath":"Computer/Data Structure/Spanning Trees.md","exportPath":"computer/data-structure/spanning-trees.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/data-structure/tree-traversals.html":{"createdTime":1717430741660,"modifiedTime":1669431675000,"sourceSize":46,"sourcePath":"Computer/Data Structure/Tree Traversals.md","exportPath":"computer/data-structure/tree-traversals.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/data-structure/tries.html":{"createdTime":1717430741787,"modifiedTime":1672483138000,"sourceSize":330,"sourcePath":"Computer/Data Structure/Tries.md","exportPath":"computer/data-structure/tries.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/data-structure/when-to-use-dp.html":{"createdTime":1717430741861,"modifiedTime":1677380709000,"sourceSize":1190,"sourcePath":"Computer/Data Structure/When to use DP.md","exportPath":"computer/data-structure/when-to-use-dp.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/database/cross-join.html":{"createdTime":1717430741474,"modifiedTime":1715413775825,"sourceSize":345,"sourcePath":"Computer/Database/CROSS JOIN.md","exportPath":"computer/database/cross-join.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/database/database.html":{"createdTime":1717430741630,"modifiedTime":1715414125385,"sourceSize":675,"sourcePath":"Computer/Database/Database.md","exportPath":"computer/database/database.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/database/having-&-where.html":{"createdTime":1717430741837,"modifiedTime":1714460509356,"sourceSize":698,"sourcePath":"Computer/Database/Having & Where.md","exportPath":"computer/database/having-&-where.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/database/index-db.html":{"createdTime":1717430741541,"modifiedTime":1693673408497,"sourceSize":2768,"sourcePath":"Computer/Database/index db.md","exportPath":"computer/database/index-db.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/database/sql-常见错误.html":{"createdTime":1717430741114,"modifiedTime":1714380069142,"sourceSize":815,"sourcePath":"Computer/Database/SQL  常见错误.md","exportPath":"computer/database/sql-常见错误.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/database/views.html":{"createdTime":1717430741885,"modifiedTime":1714373674519,"sourceSize":374,"sourcePath":"Computer/Database/Views.md","exportPath":"computer/database/views.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/database/外联结（outer-join）.html":{"createdTime":1717430741674,"modifiedTime":1715413377951,"sourceSize":0,"sourcePath":"Computer/Database/外联结（OUTER JOIN）.md","exportPath":"computer/database/外联结（outer-join）.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/database/联结（join）.html":{"createdTime":1717430741040,"modifiedTime":1715134237809,"sourceSize":154,"sourcePath":"Computer/Database/联结（JOIN）.md","exportPath":"computer/database/联结（join）.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/database/集合运算.html":{"createdTime":1717430741172,"modifiedTime":1715413515550,"sourceSize":65,"sourcePath":"Computer/Database/集合运算.md","exportPath":"computer/database/集合运算.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/graphics/栅格化.html":{"createdTime":1717430740985,"modifiedTime":1667906898000,"sourceSize":422,"sourcePath":"Computer/Graphics/栅格化.md","exportPath":"computer/graphics/栅格化.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/graphics/栅格图像.html":{"createdTime":1717430741767,"modifiedTime":1667906950000,"sourceSize":582,"sourcePath":"Computer/Graphics/栅格图像.md","exportPath":"computer/graphics/栅格图像.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/graphics/矢量图像.html":{"createdTime":1717430741877,"modifiedTime":1667907002000,"sourceSize":743,"sourcePath":"Computer/Graphics/矢量图像.md","exportPath":"computer/graphics/矢量图像.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/graphics/矢量图形.html":{"createdTime":1717430741821,"modifiedTime":1667906862000,"sourceSize":658,"sourcePath":"Computer/Graphics/矢量图形.md","exportPath":"computer/graphics/矢量图形.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/programming/rust/attribute-like-macros.html":{"createdTime":1717430741070,"modifiedTime":1677489925000,"sourceSize":1204,"sourcePath":"Computer/Programming/Rust/Attribute-like macros.md","exportPath":"computer/programming/rust/attribute-like-macros.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/programming/rust/declarative-macro.html":{"createdTime":1717430741823,"modifiedTime":1677489244000,"sourceSize":2962,"sourcePath":"Computer/Programming/Rust/declarative macro.md","exportPath":"computer/programming/rust/declarative-macro.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/programming/rust/derive-macro.html":{"createdTime":1717430741768,"modifiedTime":1677489722000,"sourceSize":2637,"sourcePath":"Computer/Programming/Rust/derive Macro.md","exportPath":"computer/programming/rust/derive-macro.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/programming/rust/function-like-macros.html":{"createdTime":1717430741268,"modifiedTime":1677489939000,"sourceSize":1304,"sourcePath":"Computer/Programming/Rust/Function-like macros.md","exportPath":"computer/programming/rust/function-like-macros.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/programming/rust/lifetime-annotations-in-method-definitions.html":{"createdTime":1717430741750,"modifiedTime":1677591652000,"sourceSize":1503,"sourcePath":"Computer/Programming/Rust/Lifetime Annotations in Method Definitions.md","exportPath":"computer/programming/rust/lifetime-annotations-in-method-definitions.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/programming/rust/lifetime-elision.html":{"createdTime":1717430741865,"modifiedTime":1677591650000,"sourceSize":1691,"sourcePath":"Computer/Programming/Rust/Lifetime Elision.md","exportPath":"computer/programming/rust/lifetime-elision.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/programming/rust/litetime.html":{"createdTime":1717430741634,"modifiedTime":1677591798000,"sourceSize":2024,"sourcePath":"Computer/Programming/Rust/litetime.md","exportPath":"computer/programming/rust/litetime.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/programming/rust/procedural-macros.html":{"createdTime":1717430741669,"modifiedTime":1677842077443,"sourceSize":509,"sourcePath":"Computer/Programming/Rust/Procedural Macros.md","exportPath":"computer/programming/rust/procedural-macros.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/programming/rust/rust.html":{"createdTime":1717430740969,"modifiedTime":1677483722000,"sourceSize":0,"sourcePath":"Computer/Programming/Rust/Rust.md","exportPath":"computer/programming/rust/rust.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/programming/rust/rust-closures.html":{"createdTime":1717430741800,"modifiedTime":1677594176000,"sourceSize":2470,"sourcePath":"Computer/Programming/Rust/Rust Closures.md","exportPath":"computer/programming/rust/rust-closures.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/programming/rust/rust-oop.html":{"createdTime":1717430741751,"modifiedTime":1677401834000,"sourceSize":2569,"sourcePath":"Computer/Programming/Rust/Rust OOP.md","exportPath":"computer/programming/rust/rust-oop.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/programming/rust/rust-pattern-matching.html":{"createdTime":1717430741312,"modifiedTime":1677483408000,"sourceSize":3216,"sourcePath":"Computer/Programming/Rust/Rust Pattern Matching.md","exportPath":"computer/programming/rust/rust-pattern-matching.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/programming/rust/smart-point.html":{"createdTime":1717430741748,"modifiedTime":1680879790000,"sourceSize":1147,"sourcePath":"Computer/Programming/Rust/smart point.md","exportPath":"computer/programming/rust/smart-point.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/programming/rust/static-lifetime.html":{"createdTime":1717430741182,"modifiedTime":1677591794000,"sourceSize":996,"sourcePath":"Computer/Programming/Rust/Static Lifetime.md","exportPath":"computer/programming/rust/static-lifetime.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/programming/rust/unsafe-rust.html":{"createdTime":1717430741397,"modifiedTime":1677483882000,"sourceSize":647,"sourcePath":"Computer/Programming/Rust/unsafe rust.md","exportPath":"computer/programming/rust/unsafe-rust.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/programming/elixir.html":{"createdTime":1717430741019,"modifiedTime":1699252933420,"sourceSize":292,"sourcePath":"Computer/Programming/Elixir.md","exportPath":"computer/programming/elixir.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/web-applications/cascading-style-sheets.html":{"createdTime":1717430741819,"modifiedTime":1670335511000,"sourceSize":897,"sourcePath":"Computer/Web Applications/Cascading Style Sheets.md","exportPath":"computer/web-applications/cascading-style-sheets.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/web-applications/debugging-node-applications.html":{"createdTime":1717430741593,"modifiedTime":1670685521000,"sourceSize":864,"sourcePath":"Computer/Web Applications/Debugging Node applications.md","exportPath":"computer/web-applications/debugging-node-applications.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/web-applications/debugging-react-applications.html":{"createdTime":1717430741880,"modifiedTime":1670465815000,"sourceSize":1442,"sourcePath":"Computer/Web Applications/Debugging React applications.md","exportPath":"computer/web-applications/debugging-react-applications.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/web-applications/document-object-model.html":{"createdTime":1717430741046,"modifiedTime":1670335318000,"sourceSize":369,"sourcePath":"Computer/Web Applications/Document object Model.md","exportPath":"computer/web-applications/document-object-model.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/web-applications/graphql.html":{"createdTime":1717430740980,"modifiedTime":1670420965000,"sourceSize":2100,"sourcePath":"Computer/Web Applications/GraphQL.md","exportPath":"computer/web-applications/graphql.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/web-applications/http-get.html":{"createdTime":1717430741484,"modifiedTime":1670662168000,"sourceSize":5844,"sourcePath":"Computer/Web Applications/HTTP GET.md","exportPath":"computer/web-applications/http-get.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/web-applications/hypertext-markup-language.html":{"createdTime":1717430741469,"modifiedTime":1670311689000,"sourceSize":3138,"sourcePath":"Computer/Web Applications/HyperText Markup Language.md","exportPath":"computer/web-applications/hypertext-markup-language.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/web-applications/javascript.html":{"createdTime":1717430741887,"modifiedTime":1670823401000,"sourceSize":304,"sourcePath":"Computer/Web Applications/JavaScript.md","exportPath":"computer/web-applications/javascript.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/web-applications/javascript-async.html":{"createdTime":1717430740977,"modifiedTime":1732664748640,"sourceSize":2455,"sourcePath":"Computer/Web Applications/javascript-async.md","exportPath":"computer/web-applications/javascript-async.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/web-applications/mongodb.html":{"createdTime":1717430741023,"modifiedTime":1670725311000,"sourceSize":2072,"sourcePath":"Computer/Web Applications/MongoDB.md","exportPath":"computer/web-applications/mongodb.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/web-applications/node.js.html":{"createdTime":1717430741042,"modifiedTime":1670685530000,"sourceSize":577,"sourcePath":"Computer/Web Applications/Node.js.md","exportPath":"computer/web-applications/node.js.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/web-applications/promise.html":{"createdTime":1717430741711,"modifiedTime":1670823653000,"sourceSize":2414,"sourcePath":"Computer/Web Applications/Promise.md","exportPath":"computer/web-applications/promise.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/web-applications/react-hooks.html":{"createdTime":1717430741252,"modifiedTime":1670651721000,"sourceSize":2049,"sourcePath":"Computer/Web Applications/React Hooks.md","exportPath":"computer/web-applications/react-hooks.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/web-applications/react.js.html":{"createdTime":1717430741630,"modifiedTime":1670465890000,"sourceSize":48,"sourcePath":"Computer/Web Applications/React.js.md","exportPath":"computer/web-applications/react.js.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/web-applications/rest.html":{"createdTime":1717430741782,"modifiedTime":1670653282000,"sourceSize":3127,"sourcePath":"Computer/Web Applications/REST.md","exportPath":"computer/web-applications/rest.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/web-applications/server-side-session.html":{"createdTime":1717430741739,"modifiedTime":1671626563000,"sourceSize":544,"sourcePath":"Computer/Web Applications/server side session.md","exportPath":"computer/web-applications/server-side-session.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/web-applications/single-page-applications.html":{"createdTime":1717430741624,"modifiedTime":1670346249000,"sourceSize":218,"sourcePath":"Computer/Web Applications/Single page applications.md","exportPath":"computer/web-applications/single-page-applications.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/web-applications/spring-web.html":{"createdTime":1717430740984,"modifiedTime":1685290268797,"sourceSize":35,"sourcePath":"Computer/Web Applications/spring web.md","exportPath":"computer/web-applications/spring-web.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/web-applications/token-authentication.html":{"createdTime":1717430741326,"modifiedTime":1671121321000,"sourceSize":1151,"sourcePath":"Computer/Web Applications/Token authentication.md","exportPath":"computer/web-applications/token-authentication.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/web-applications/universal-resource-locator.html":{"createdTime":1717430741512,"modifiedTime":1670316109000,"sourceSize":2778,"sourcePath":"Computer/Web Applications/Universal Resource Locator.md","exportPath":"computer/web-applications/universal-resource-locator.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/web-applications/useeffect.html":{"createdTime":1717430741842,"modifiedTime":1670591687000,"sourceSize":979,"sourcePath":"Computer/Web Applications/useEffect.md","exportPath":"computer/web-applications/useeffect.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/web-applications/usestate.html":{"createdTime":1717430741480,"modifiedTime":1670464051000,"sourceSize":1108,"sourcePath":"Computer/Web Applications/useState.md","exportPath":"computer/web-applications/usestate.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/web-applications/web-applications.html":{"createdTime":1717430740976,"modifiedTime":1671031697000,"sourceSize":1499,"sourcePath":"Computer/Web Applications/Web Applications.md","exportPath":"computer/web-applications/web-applications.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/abi.html":{"createdTime":1717430741809,"modifiedTime":1706194235000,"sourceSize":0,"sourcePath":"Computer/ABI.md","exportPath":"computer/abi.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/bus.html":{"createdTime":1717430741509,"modifiedTime":1706111224000,"sourceSize":940,"sourcePath":"Computer/Bus.md","exportPath":"computer/bus.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/git.html":{"createdTime":1717430741251,"modifiedTime":1666198911000,"sourceSize":12,"sourcePath":"Computer/git.md","exportPath":"computer/git.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/git-sha1.html":{"createdTime":1717430741759,"modifiedTime":1666232969000,"sourceSize":372,"sourcePath":"Computer/git-sha1.md","exportPath":"computer/git-sha1.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/hashing.html":{"createdTime":1717430741745,"modifiedTime":1669956384000,"sourceSize":136,"sourcePath":"Computer/Hashing.md","exportPath":"computer/hashing.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/krita.html":{"createdTime":1717430740978,"modifiedTime":1667907026000,"sourceSize":235,"sourcePath":"Computer/Krita.md","exportPath":"computer/krita.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/linux-共享库.html":{"createdTime":1717430741791,"modifiedTime":1706194564000,"sourceSize":722,"sourcePath":"Computer/linux 共享库.md","exportPath":"computer/linux-共享库.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/logo.html":{"createdTime":1724053825571,"modifiedTime":1726109902091,"sourceSize":62,"sourcePath":"Computer/Logo.md","exportPath":"computer/logo.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/shell.html":{"createdTime":1717430741794,"modifiedTime":1652169244000,"sourceSize":395,"sourcePath":"Computer/Shell.md","exportPath":"computer/shell.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/thread-pool.html":{"createdTime":1717430741768,"modifiedTime":1677568580000,"sourceSize":223,"sourcePath":"Computer/thread pool.md","exportPath":"computer/thread-pool.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/字符.html":{"createdTime":1724053825566,"modifiedTime":1637769935000,"sourceSize":59,"sourcePath":"Computer/字符.md","exportPath":"computer/字符.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"computer/整数运算.html":{"createdTime":1717430741459,"modifiedTime":1701658041000,"sourceSize":27,"sourcePath":"Computer/整数运算.md","exportPath":"computer/整数运算.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"dev/django/django.html":{"createdTime":1717430741640,"modifiedTime":1713337178374,"sourceSize":60,"sourcePath":"Dev/Django/Django.md","exportPath":"dev/django/django.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"dev/django/django-分页.html":{"createdTime":1717430741073,"modifiedTime":1688630472000,"sourceSize":1827,"sourcePath":"Dev/Django/Django 分页.md","exportPath":"dev/django/django-分页.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"dev/django/django-初始化自带数据.html":{"createdTime":1717430741889,"modifiedTime":1689122400889,"sourceSize":1897,"sourcePath":"Dev/Django/Django 初始化自带数据.md","exportPath":"dev/django/django-初始化自带数据.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"dev/web/server-sent-events-(sse)-和-websockets.html":{"createdTime":1717430741648,"modifiedTime":1709542046258,"sourceSize":1832,"sourcePath":"Dev/web/Server-Sent Events (SSE) 和 WebSockets.md","exportPath":"dev/web/server-sent-events-(sse)-和-websockets.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"dev/web/zod.html":{"createdTime":1723369403290,"modifiedTime":1723369421825,"sourceSize":1433,"sourcePath":"Dev/web/zod.md","exportPath":"dev/web/zod.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"dev/grpc.html":{"createdTime":1717430741348,"modifiedTime":1704720335000,"sourceSize":338,"sourcePath":"Dev/grpc.md","exportPath":"dev/grpc.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"finance/ppp.html":{"createdTime":1732670039202,"modifiedTime":1732670463554,"sourceSize":1140,"sourcePath":"Finance/PPP.md","exportPath":"finance/ppp.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"finance/利差交易.html":{"createdTime":1731477684974,"modifiedTime":1732628878123,"sourceSize":3639,"sourcePath":"Finance/利差交易.md","exportPath":"finance/利差交易.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"finance/国际收支、双顺差与货币升值.html":{"createdTime":1731480861530,"modifiedTime":1732628878123,"sourceSize":3425,"sourcePath":"Finance/国际收支、双顺差与货币升值.md","exportPath":"finance/国际收支、双顺差与货币升值.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"finance/影响外汇价格的因素.html":{"createdTime":1731475006517,"modifiedTime":1732670039167,"sourceSize":1943,"sourcePath":"Finance/影响外汇价格的因素.md","exportPath":"finance/影响外汇价格的因素.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"finance/通货膨胀.html":{"createdTime":1732604911350,"modifiedTime":1732605413624,"sourceSize":767,"sourcePath":"Finance/通货膨胀.md","exportPath":"finance/通货膨胀.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"linux/android.html":{"createdTime":1724053825574,"modifiedTime":1637769935000,"sourceSize":101,"sourcePath":"Linux/android.md","exportPath":"linux/android.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"linux/arch.html":{"createdTime":1717430741612,"modifiedTime":1713901926196,"sourceSize":10,"sourcePath":"Linux/Arch.md","exportPath":"linux/arch.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"linux/docker.html":{"createdTime":1724053825575,"modifiedTime":1637769935000,"sourceSize":5305,"sourcePath":"Linux/docker.md","exportPath":"linux/docker.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"linux/git.html":{"createdTime":1724053825587,"modifiedTime":1637769935000,"sourceSize":1968,"sourcePath":"Linux/git.md","exportPath":"linux/git.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"linux/shell.html":{"createdTime":1724053825597,"modifiedTime":1637769935000,"sourceSize":227,"sourcePath":"Linux/shell.md","exportPath":"linux/shell.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"linux/zsh-disable-history.html":{"createdTime":1717430741039,"modifiedTime":1694775492531,"sourceSize":516,"sourcePath":"Linux/zsh disable history.md","exportPath":"linux/zsh-disable-history.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"linux/打包.html":{"createdTime":1717430741689,"modifiedTime":1713901943999,"sourceSize":111,"sourcePath":"Linux/打包.md","exportPath":"linux/打包.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"linux/添加用户.html":{"createdTime":1730085900183,"modifiedTime":1730085901348,"sourceSize":773,"sourcePath":"Linux/添加用户.md","exportPath":"linux/添加用户.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"linux/端口占用.html":{"createdTime":1725882445354,"modifiedTime":1725808566458,"sourceSize":994,"sourcePath":"Linux/端口占用.md","exportPath":"linux/端口占用.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"uncategorized/google-地区.html":{"createdTime":1732629236057,"modifiedTime":1732629236431,"sourceSize":141,"sourcePath":"Uncategorized/Google 地区.md","exportPath":"uncategorized/google-地区.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"uncategorized/telegram-avatar.html":{"createdTime":1732629236068,"modifiedTime":1732629236432,"sourceSize":411,"sourcePath":"Uncategorized/telegram avatar.md","exportPath":"uncategorized/telegram-avatar.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"uncategorized/zed-用-ollama.html":{"createdTime":1717430741695,"modifiedTime":1714070983913,"sourceSize":808,"sourcePath":"Uncategorized/zed 用 ollama.md","exportPath":"uncategorized/zed-用-ollama.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"uncategorized/什么是金丝雀安全声明？-cloudflare.html":{"createdTime":1717430741212,"modifiedTime":1732631394298,"sourceSize":356,"sourcePath":"Uncategorized/什么是金丝雀安全声明？ - Cloudflare.md","exportPath":"uncategorized/什么是金丝雀安全声明？-cloudflare.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"uncategorized/写作压力.html":{"createdTime":1732629236070,"modifiedTime":1732629236434,"sourceSize":331,"sourcePath":"Uncategorized/写作压力.md","exportPath":"uncategorized/写作压力.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"uncategorized/小鹤双拼-on-windows.html":{"createdTime":1732629290701,"modifiedTime":1732629369099,"sourceSize":270,"sourcePath":"Uncategorized/小鹤双拼 on windows.md","exportPath":"uncategorized/小鹤双拼-on-windows.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"uncategorized/清除-powershell-历史.html":{"createdTime":1732629325540,"modifiedTime":1732629369095,"sourceSize":57,"sourcePath":"Uncategorized/清除 Powershell 历史.md","exportPath":"uncategorized/清除-powershell-历史.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"翻墙/clash/index.html":{"createdTime":1732629236074,"modifiedTime":1732629236528,"sourceSize":21,"sourcePath":"翻墙/clash/index.md","exportPath":"翻墙/clash/index.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"翻墙/clash/dialer-proxy.html":{"createdTime":1732629236063,"modifiedTime":1732629236504,"sourceSize":153,"sourcePath":"翻墙/clash/dialer-proxy.md","exportPath":"翻墙/clash/dialer-proxy.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"翻墙/clash/warp-ip-range.html":{"createdTime":1732629236055,"modifiedTime":1732629236438,"sourceSize":106,"sourcePath":"翻墙/clash/warp ip range.md","exportPath":"翻墙/clash/warp-ip-range.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"翻墙/clash/使用-clash-meta-+-warp-增强使用机场时的隐私.html":{"createdTime":1732629236054,"modifiedTime":1732629236435,"sourceSize":955,"sourcePath":"翻墙/clash/使用 clash meta + Warp 增强使用机场时的隐私.md","exportPath":"翻墙/clash/使用-clash-meta-+-warp-增强使用机场时的隐私.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"翻墙/clash/链式代理.html":{"createdTime":1732629236058,"modifiedTime":1732629236502,"sourceSize":348,"sourcePath":"翻墙/clash/链式代理.md","exportPath":"翻墙/clash/链式代理.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"翻墙/warp.html":{"createdTime":1732629236056,"modifiedTime":1732629236498,"sourceSize":53,"sourcePath":"翻墙/WARP.md","exportPath":"翻墙/warp.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"index.html":{"createdTime":1732629236075,"modifiedTime":1732662794808,"sourceSize":532,"sourcePath":"index.md","exportPath":"index.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"site-lib/scripts/graph-wasm.wasm":{"createdTime":1733327772224,"modifiedTime":1732661832819.3103,"sourceSize":23655,"sourcePath":"","exportPath":"site-lib/scripts/graph-wasm.wasm","showInTree":false,"treeOrder":0,"backlinks":[],"type":"other","data":null},"site-lib/fonts/94f2f163d4b698242fef.otf":{"createdTime":1733329173771,"modifiedTime":1733329173771,"sourceSize":66800,"sourcePath":"","exportPath":"site-lib/fonts/94f2f163d4b698242fef.otf","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/72505e6a122c6acd5471.woff2":{"createdTime":1733329173771,"modifiedTime":1733329173771,"sourceSize":104232,"sourcePath":"","exportPath":"site-lib/fonts/72505e6a122c6acd5471.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/2d5198822ab091ce4305.woff2":{"createdTime":1733329173772,"modifiedTime":1733329173772,"sourceSize":104332,"sourcePath":"","exportPath":"site-lib/fonts/2d5198822ab091ce4305.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/c8ba52b05a9ef10f4758.woff2":{"createdTime":1733329173772,"modifiedTime":1733329173772,"sourceSize":98868,"sourcePath":"","exportPath":"site-lib/fonts/c8ba52b05a9ef10f4758.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/cb10ffd7684cd9836a05.woff2":{"createdTime":1733329173772,"modifiedTime":1733329173772,"sourceSize":106876,"sourcePath":"","exportPath":"site-lib/fonts/cb10ffd7684cd9836a05.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/b5f0f109bc88052d4000.woff2":{"createdTime":1733329173781,"modifiedTime":1733329173781,"sourceSize":105804,"sourcePath":"","exportPath":"site-lib/fonts/b5f0f109bc88052d4000.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/cbe0ae49c52c920fd563.woff2":{"createdTime":1733329173781,"modifiedTime":1733329173781,"sourceSize":106108,"sourcePath":"","exportPath":"site-lib/fonts/cbe0ae49c52c920fd563.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/535a6cf662596b3bd6a6.woff2":{"createdTime":1733329173782,"modifiedTime":1733329173782,"sourceSize":111708,"sourcePath":"","exportPath":"site-lib/fonts/535a6cf662596b3bd6a6.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/70cc7ff27245e82ad414.ttf":{"createdTime":1733329173783,"modifiedTime":1733329173783,"sourceSize":192740,"sourcePath":"","exportPath":"site-lib/fonts/70cc7ff27245e82ad414.ttf","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/454577c22304619db035.ttf":{"createdTime":1733329173783,"modifiedTime":1733329173783,"sourceSize":161376,"sourcePath":"","exportPath":"site-lib/fonts/454577c22304619db035.ttf","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/52ac8f3034507f1d9e53.ttf":{"createdTime":1733329173782,"modifiedTime":1733329173782,"sourceSize":191568,"sourcePath":"","exportPath":"site-lib/fonts/52ac8f3034507f1d9e53.ttf","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/05b618077343fbbd92b7.ttf":{"createdTime":1733329173783,"modifiedTime":1733329173783,"sourceSize":155288,"sourcePath":"","exportPath":"site-lib/fonts/05b618077343fbbd92b7.ttf","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/4bb6ac751d1c5478ff3a.woff2":{"createdTime":1733329173770,"modifiedTime":1733329173770,"sourceSize":7876,"sourcePath":"","exportPath":"site-lib/fonts/4bb6ac751d1c5478ff3a.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/media/874d8b8e340f75575caa.svg":{"createdTime":1733329173770,"modifiedTime":1733329173770,"sourceSize":317,"sourcePath":"","exportPath":"site-lib/media/874d8b8e340f75575caa.svg","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"site-lib/media/3d6c1bdc4d87cde4de67.svg":{"createdTime":1733329173771,"modifiedTime":1733329173771,"sourceSize":279,"sourcePath":"","exportPath":"site-lib/media/3d6c1bdc4d87cde4de67.svg","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"site-lib/fonts/mathjax_zero.woff":{"createdTime":1733329113083,"modifiedTime":1733329113083,"sourceSize":1368,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_zero.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_main-regular.woff":{"createdTime":1733329113084,"modifiedTime":1733329113084,"sourceSize":34160,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_main-regular.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_main-bold.woff":{"createdTime":1733329113087,"modifiedTime":1733329113087,"sourceSize":34464,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_main-bold.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_math-italic.woff":{"createdTime":1733329113087,"modifiedTime":1733329113087,"sourceSize":19360,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_math-italic.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_main-italic.woff":{"createdTime":1733329113087,"modifiedTime":1733329113087,"sourceSize":20832,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_main-italic.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_math-bolditalic.woff":{"createdTime":1733329113087,"modifiedTime":1733329113087,"sourceSize":19776,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_math-bolditalic.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_size1-regular.woff":{"createdTime":1733329113087,"modifiedTime":1733329113087,"sourceSize":5792,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_size1-regular.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_size2-regular.woff":{"createdTime":1733329113087,"modifiedTime":1733329113087,"sourceSize":5464,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_size2-regular.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_size3-regular.woff":{"createdTime":1733329113087,"modifiedTime":1733329113087,"sourceSize":3244,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_size3-regular.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_size4-regular.woff":{"createdTime":1733329113087,"modifiedTime":1733329113087,"sourceSize":5148,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_size4-regular.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_ams-regular.woff":{"createdTime":1733329113088,"modifiedTime":1733329113088,"sourceSize":40808,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_ams-regular.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_calligraphic-regular.woff":{"createdTime":1733329113087,"modifiedTime":1733329113087,"sourceSize":9600,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_calligraphic-regular.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_calligraphic-bold.woff":{"createdTime":1733329113088,"modifiedTime":1733329113088,"sourceSize":9908,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_calligraphic-bold.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_fraktur-regular.woff":{"createdTime":1733329113088,"modifiedTime":1733329113088,"sourceSize":21480,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_fraktur-regular.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_fraktur-bold.woff":{"createdTime":1733329113088,"modifiedTime":1733329113088,"sourceSize":22340,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_fraktur-bold.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_sansserif-regular.woff":{"createdTime":1733329113088,"modifiedTime":1733329113088,"sourceSize":12660,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_sansserif-regular.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_sansserif-bold.woff":{"createdTime":1733329113088,"modifiedTime":1733329113088,"sourceSize":15944,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_sansserif-bold.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_sansserif-italic.woff":{"createdTime":1733329113088,"modifiedTime":1733329113088,"sourceSize":14628,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_sansserif-italic.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_script-regular.woff":{"createdTime":1733329113088,"modifiedTime":1733329113088,"sourceSize":11852,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_script-regular.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_typewriter-regular.woff":{"createdTime":1733329113088,"modifiedTime":1733329113088,"sourceSize":17604,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_typewriter-regular.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_vector-regular.woff":{"createdTime":1733329113088,"modifiedTime":1733329113088,"sourceSize":1136,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_vector-regular.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/mathjax_vector-bold.woff":{"createdTime":1733329113088,"modifiedTime":1733329113088,"sourceSize":1116,"sourcePath":"","exportPath":"site-lib/fonts/mathjax_vector-bold.woff","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/html/file-tree-content.html":{"createdTime":1733329174824,"modifiedTime":1733329174824,"sourceSize":69346,"sourcePath":"","exportPath":"site-lib/html/file-tree-content.html","showInTree":false,"treeOrder":0,"backlinks":[],"type":"html","data":null},"site-lib/scripts/webpage.js":{"createdTime":1733327772622,"modifiedTime":1733327772622,"sourceSize":101494,"sourcePath":"","exportPath":"site-lib/scripts/webpage.js","showInTree":false,"treeOrder":0,"backlinks":[],"type":"script","data":null},"site-lib/scripts/graph-wasm.js":{"createdTime":1733327772622,"modifiedTime":1733327772622,"sourceSize":12885,"sourcePath":"","exportPath":"site-lib/scripts/graph-wasm.js","showInTree":false,"treeOrder":0,"backlinks":[],"type":"script","data":null},"site-lib/scripts/graph-render-worker.js":{"createdTime":1733327772622,"modifiedTime":1733327772622,"sourceSize":5681,"sourcePath":"","exportPath":"site-lib/scripts/graph-render-worker.js","showInTree":false,"treeOrder":0,"backlinks":[],"type":"script","data":null},"site-lib/media/favicon.png":{"createdTime":1733329173690,"modifiedTime":1733329173690,"sourceSize":1105,"sourcePath":"","exportPath":"site-lib/media/favicon.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"site-lib/styles/obsidian.css":{"createdTime":1733329173827,"modifiedTime":1733329173827,"sourceSize":155605,"sourcePath":"","exportPath":"site-lib/styles/obsidian.css","showInTree":false,"treeOrder":0,"backlinks":[],"type":"style","data":null},"site-lib/styles/global-variable-styles.css":{"createdTime":1733329173756,"modifiedTime":1733329173756,"sourceSize":366,"sourcePath":"","exportPath":"site-lib/styles/global-variable-styles.css","showInTree":false,"treeOrder":0,"backlinks":[],"type":"style","data":null},"site-lib/styles/main-styles.css":{"createdTime":1733327772640,"modifiedTime":1733327772640,"sourceSize":19129,"sourcePath":"","exportPath":"site-lib/styles/main-styles.css","showInTree":false,"treeOrder":0,"backlinks":[],"type":"style","data":null},"assets/2023-03-17_17-11.webp":{"createdTime":1717430741760,"modifiedTime":1679044309000,"sourceSize":39564,"sourcePath":"Assets/2023-03-17_17-11.webp","exportPath":"assets/2023-03-17_17-11.webp","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"assets/pasted-image-20240528170902.png":{"createdTime":1717430741560,"modifiedTime":1716887342219,"sourceSize":31050,"sourcePath":"Assets/Pasted image 20240528170902.png","exportPath":"assets/pasted-image-20240528170902.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"assets/2023-03-17_16-12.webp":{"createdTime":1717430741385,"modifiedTime":1679040801000,"sourceSize":3978,"sourcePath":"Assets/2023-03-17_16-12.webp","exportPath":"assets/2023-03-17_16-12.webp","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"assets/pasted-image-20240527170802.png":{"createdTime":1717430741535,"modifiedTime":1716800882386,"sourceSize":67294,"sourcePath":"Assets/Pasted image 20240527170802.png","exportPath":"assets/pasted-image-20240527170802.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"assets/image/hex-and-decimal-1701246586199.jpeg":{"createdTime":1717430741668,"modifiedTime":1701246586000,"sourceSize":20494,"sourcePath":"Assets/image/Hex and Decimal-1701246586199.jpeg","exportPath":"assets/image/hex-and-decimal-1701246586199.jpeg","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"assets/image/spring-web-1685289945837.jpeg":{"createdTime":1717430741756,"modifiedTime":1685289945943,"sourceSize":29414,"sourcePath":"Assets/image/spring web-1685289945837.jpeg","exportPath":"assets/image/spring-web-1685289945837.jpeg","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"assets/image/udp-1679050115511.jpeg":{"createdTime":1717430741481,"modifiedTime":1679050115000,"sourceSize":33384,"sourcePath":"Assets/image/udp-1679050115511.jpeg","exportPath":"assets/image/udp-1679050115511.jpeg","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"assets/image/udp-1679051130778.jpeg":{"createdTime":1717430741682,"modifiedTime":1679051130000,"sourceSize":55435,"sourcePath":"Assets/image/udp-1679051130778.jpeg","exportPath":"assets/image/udp-1679051130778.jpeg","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"assets/image/internet-protocol-1677847475053.jpeg":{"createdTime":1717430741709,"modifiedTime":1677847475453,"sourceSize":34308,"sourcePath":"Assets/image/Internet Protocol-1677847475053.jpeg","exportPath":"assets/image/internet-protocol-1677847475053.jpeg","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"assets/image/tun-tap-1678176253048.jpeg":{"createdTime":1717430741042,"modifiedTime":1678176253144,"sourceSize":36872,"sourcePath":"Assets/image/TUN TAP-1678176253048.jpeg","exportPath":"assets/image/tun-tap-1678176253048.jpeg","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"assets/image/arp-1678698919522.jpeg":{"createdTime":1717430741704,"modifiedTime":1678698919000,"sourceSize":58790,"sourcePath":"Assets/image/ARP-1678698919522.jpeg","exportPath":"assets/image/arp-1678698919522.jpeg","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"assets/image/cs144-lab1-1677946921891.jpeg":{"createdTime":1717430741530,"modifiedTime":1677946922500,"sourceSize":20770,"sourcePath":"Assets/image/CS144 lab1-1677946921891.jpeg","exportPath":"assets/image/cs144-lab1-1677946921891.jpeg","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"assets/image/encapsulation-(networking)-1677852705096.jpeg":{"createdTime":1717430741253,"modifiedTime":1677852705203,"sourceSize":11183,"sourcePath":"Assets/image/Encapsulation (networking)-1677852705096.jpeg","exportPath":"assets/image/encapsulation-(networking)-1677852705096.jpeg","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"assets/image/encapsulation-1677852825322.jpeg":{"createdTime":1717430741388,"modifiedTime":1677852825423,"sourceSize":25892,"sourcePath":"Assets/image/Encapsulation-1677852825322.jpeg","exportPath":"assets/image/encapsulation-1677852825322.jpeg","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"assets/image/encapsulation-1677853941070.jpeg":{"createdTime":1717430741735,"modifiedTime":1677853941225,"sourceSize":40747,"sourcePath":"Assets/image/Encapsulation-1677853941070.jpeg","exportPath":"assets/image/encapsulation-1677853941070.jpeg","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"assets/image/the-4-layer-internet-model-1677839765520.jpeg":{"createdTime":1717430741763,"modifiedTime":1677839765699,"sourceSize":45707,"sourcePath":"Assets/image/the 4 layer internet model-1677839765520.jpeg","exportPath":"assets/image/the-4-layer-internet-model-1677839765520.jpeg","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"assets/image/the-4-layer-internet-model-1677841182979.jpeg":{"createdTime":1717430741789,"modifiedTime":1677841183281,"sourceSize":40735,"sourcePath":"Assets/image/the 4 layer internet model-1677841182979.jpeg","exportPath":"assets/image/the-4-layer-internet-model-1677841182979.jpeg","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"assets/image/the-4-layer-internet-model-1677841972147.jpeg":{"createdTime":1717430741603,"modifiedTime":1677841972393,"sourceSize":33311,"sourcePath":"Assets/image/the 4 layer internet model-1677841972147.jpeg","exportPath":"assets/image/the-4-layer-internet-model-1677841972147.jpeg","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"site-lib/rss.xml":{"createdTime":1733329174885,"modifiedTime":1733329174885,"sourceSize":221755,"sourcePath":"","exportPath":"site-lib/rss.xml","showInTree":false,"treeOrder":0,"backlinks":[],"type":"other","data":null}},"sourceToTarget":{"Computer/Computer Architecture/Big Endian and Little Endian.md":"computer/computer-architecture/big-endian-and-little-endian.html","Computer/Computer Architecture/Computer Architecture (Machine Structures).md":"computer/computer-architecture/computer-architecture-(machine-structures).html","Computer/Computer Architecture/Hex and Decimal.md":"computer/computer-architecture/hex-and-decimal.html","Computer/Computer Architecture/整数表示.md":"computer/computer-architecture/整数表示.html","Computer/Computer Architecture/补码.md":"computer/computer-architecture/补码.html","Computer/Computer Networking/Anycast.md":"computer/computer-networking/anycast.html","Computer/Computer Networking/ARP.md":"computer/computer-networking/arp.html","Computer/Computer Networking/ARQ.md":"computer/computer-networking/arq.html","Computer/Computer Networking/bridge.md":"computer/computer-networking/bridge.html","Computer/Computer Networking/CIDR.md":"computer/computer-networking/cidr.html","Computer/Computer Networking/Computer Networking.md":"computer/computer-networking/computer-networking.html","Computer/Computer Networking/CS144.md":"computer/computer-networking/cs144.html","Computer/Computer Networking/cs144 lab0.md":"computer/computer-networking/cs144-lab0.html","Computer/Computer Networking/CS144 lab1.md":"computer/computer-networking/cs144-lab1.html","Computer/Computer Networking/Encapsulation.md":"computer/computer-networking/encapsulation.html","Computer/Computer Networking/ETag.md":"computer/computer-networking/etag.html","Computer/Computer Networking/Forwarding information base.md":"computer/computer-networking/forwarding-information-base.html","Computer/Computer Networking/ICE.md":"computer/computer-networking/ice.html","Computer/Computer Networking/Internet Protocol.md":"computer/computer-networking/internet-protocol.html","Computer/Computer Networking/IPsec.md":"computer/computer-networking/ipsec.html","Computer/Computer Networking/IPv4.md":"computer/computer-networking/ipv4.html","Computer/Computer Networking/Longest prefix match.md":"computer/computer-networking/longest-prefix-match.html","Computer/Computer Networking/MTU.md":"computer/computer-networking/mtu.html","Computer/Computer Networking/packet.md":"computer/computer-networking/packet.html","Computer/Computer Networking/Packet Switching.md":"computer/computer-networking/packet-switching.html","Computer/Computer Networking/PTR Record.md":"computer/computer-networking/ptr-record.html","Computer/Computer Networking/reliable byte stream.md":"computer/computer-networking/reliable-byte-stream.html","Computer/Computer Networking/TCP.md":"computer/computer-networking/tcp.html","Computer/Computer Networking/the 4 layer internet model.md":"computer/computer-networking/the-4-layer-internet-model.html","Computer/Computer Networking/TUN and TAP.md":"computer/computer-networking/tun-and-tap.html","Computer/Computer Networking/udp.md":"computer/computer-networking/udp.html","Computer/Computer Networking/underline in c++.md":"computer/computer-networking/underline-in-c++.html","Computer/Computer Networking/Window Sizes.md":"computer/computer-networking/window-sizes.html","Computer/Computer Networking/三次握手.md":"computer/computer-networking/三次握手.html","Computer/Computer Networking/关闭连接.md":"computer/computer-networking/关闭连接.html","Computer/Computer Networking/多播.md":"computer/computer-networking/多播.html","Computer/Computer Networking/子网.md":"computer/computer-networking/子网.html","Computer/Computer Networking/广播.md":"computer/computer-networking/广播.html","Computer/Computer Networking/网络掩码.md":"computer/computer-networking/网络掩码.html","Computer/CS61A/202204231534.md":"computer/cs61a/202204231534.html","Computer/CS61A/Generators.md":"computer/cs61a/generators.html","Computer/CS61A/Iterable Uses.md":"computer/cs61a/iterable-uses.html","Computer/CS61A/Pure functions & Non-pure functions.md":"computer/cs61a/pure-functions-&-non-pure-functions.html","Computer/CS61A/Trees & Tree Mutation.md":"computer/cs61a/trees-&-tree-mutation.html","Computer/Data Structure/A star.md":"computer/data-structure/a-star.html","Computer/Data Structure/Bellman-Ford.md":"computer/data-structure/bellman-ford.html","Computer/Data Structure/Breadth First Search.md":"computer/data-structure/breadth-first-search.html","Computer/Data Structure/Cut Property.md":"computer/data-structure/cut-property.html","Computer/Data Structure/Data Structure.md":"computer/data-structure/data-structure.html","Computer/Data Structure/Depth First TraversaIs.md":"computer/data-structure/depth-first-traversais.html","Computer/Data Structure/Depth-First Traversal.md":"computer/data-structure/depth-first-traversal.html","Computer/Data Structure/Determain graph has cycle.md":"computer/data-structure/determain-graph-has-cycle.html","Computer/Data Structure/Dijkstra.md":"computer/data-structure/dijkstra.html","Computer/Data Structure/dynamic programming.md":"computer/data-structure/dynamic-programming.html","Computer/Data Structure/Graph.md":"computer/data-structure/graph.html","Computer/Data Structure/Graph Problems.md":"computer/data-structure/graph-problems.html","Computer/Data Structure/Heap.md":"computer/data-structure/heap.html","Computer/Data Structure/Kruskal's Algorithm.md":"computer/data-structure/kruskal's-algorithm.html","Computer/Data Structure/Minimum Spanning Trees.md":"computer/data-structure/minimum-spanning-trees.html","Computer/Data Structure/Prim's Algorithm.md":"computer/data-structure/prim's-algorithm.html","Computer/Data Structure/Priority Queue.md":"computer/data-structure/priority-queue.html","Computer/Data Structure/Red Black Trees.md":"computer/data-structure/red-black-trees.html","Computer/Data Structure/Shortest Paths.md":"computer/data-structure/shortest-paths.html","Computer/Data Structure/Spanning Trees.md":"computer/data-structure/spanning-trees.html","Computer/Data Structure/Tree Traversals.md":"computer/data-structure/tree-traversals.html","Computer/Data Structure/Tries.md":"computer/data-structure/tries.html","Computer/Data Structure/When to use DP.md":"computer/data-structure/when-to-use-dp.html","Computer/Database/CROSS JOIN.md":"computer/database/cross-join.html","Computer/Database/Database.md":"computer/database/database.html","Computer/Database/Having & Where.md":"computer/database/having-&-where.html","Computer/Database/index db.md":"computer/database/index-db.html","Computer/Database/SQL  常见错误.md":"computer/database/sql-常见错误.html","Computer/Database/Views.md":"computer/database/views.html","Computer/Database/外联结（OUTER JOIN）.md":"computer/database/外联结（outer-join）.html","Computer/Database/联结（JOIN）.md":"computer/database/联结（join）.html","Computer/Database/集合运算.md":"computer/database/集合运算.html","Computer/Graphics/栅格化.md":"computer/graphics/栅格化.html","Computer/Graphics/栅格图像.md":"computer/graphics/栅格图像.html","Computer/Graphics/矢量图像.md":"computer/graphics/矢量图像.html","Computer/Graphics/矢量图形.md":"computer/graphics/矢量图形.html","Computer/Programming/Rust/Attribute-like macros.md":"computer/programming/rust/attribute-like-macros.html","Computer/Programming/Rust/declarative macro.md":"computer/programming/rust/declarative-macro.html","Computer/Programming/Rust/derive Macro.md":"computer/programming/rust/derive-macro.html","Computer/Programming/Rust/Function-like macros.md":"computer/programming/rust/function-like-macros.html","Computer/Programming/Rust/Lifetime Annotations in Method Definitions.md":"computer/programming/rust/lifetime-annotations-in-method-definitions.html","Computer/Programming/Rust/Lifetime Elision.md":"computer/programming/rust/lifetime-elision.html","Computer/Programming/Rust/litetime.md":"computer/programming/rust/litetime.html","Computer/Programming/Rust/Procedural Macros.md":"computer/programming/rust/procedural-macros.html","Computer/Programming/Rust/Rust.md":"computer/programming/rust/rust.html","Computer/Programming/Rust/Rust Closures.md":"computer/programming/rust/rust-closures.html","Computer/Programming/Rust/Rust OOP.md":"computer/programming/rust/rust-oop.html","Computer/Programming/Rust/Rust Pattern Matching.md":"computer/programming/rust/rust-pattern-matching.html","Computer/Programming/Rust/smart point.md":"computer/programming/rust/smart-point.html","Computer/Programming/Rust/Static Lifetime.md":"computer/programming/rust/static-lifetime.html","Computer/Programming/Rust/unsafe rust.md":"computer/programming/rust/unsafe-rust.html","Computer/Programming/Elixir.md":"computer/programming/elixir.html","Computer/Web Applications/Cascading Style Sheets.md":"computer/web-applications/cascading-style-sheets.html","Computer/Web Applications/Debugging Node applications.md":"computer/web-applications/debugging-node-applications.html","Computer/Web Applications/Debugging React applications.md":"computer/web-applications/debugging-react-applications.html","Computer/Web Applications/Document object Model.md":"computer/web-applications/document-object-model.html","Computer/Web Applications/GraphQL.md":"computer/web-applications/graphql.html","Computer/Web Applications/HTTP GET.md":"computer/web-applications/http-get.html","Computer/Web Applications/HyperText Markup Language.md":"computer/web-applications/hypertext-markup-language.html","Computer/Web Applications/JavaScript.md":"computer/web-applications/javascript.html","Computer/Web Applications/javascript-async.md":"computer/web-applications/javascript-async.html","Computer/Web Applications/MongoDB.md":"computer/web-applications/mongodb.html","Computer/Web Applications/Node.js.md":"computer/web-applications/node.js.html","Computer/Web Applications/Promise.md":"computer/web-applications/promise.html","Computer/Web Applications/React Hooks.md":"computer/web-applications/react-hooks.html","Computer/Web Applications/React.js.md":"computer/web-applications/react.js.html","Computer/Web Applications/REST.md":"computer/web-applications/rest.html","Computer/Web Applications/server side session.md":"computer/web-applications/server-side-session.html","Computer/Web Applications/Single page applications.md":"computer/web-applications/single-page-applications.html","Computer/Web Applications/spring web.md":"computer/web-applications/spring-web.html","Computer/Web Applications/Token authentication.md":"computer/web-applications/token-authentication.html","Computer/Web Applications/Universal Resource Locator.md":"computer/web-applications/universal-resource-locator.html","Computer/Web Applications/useEffect.md":"computer/web-applications/useeffect.html","Computer/Web Applications/useState.md":"computer/web-applications/usestate.html","Computer/Web Applications/Web Applications.md":"computer/web-applications/web-applications.html","Computer/ABI.md":"computer/abi.html","Computer/Bus.md":"computer/bus.html","Computer/git.md":"computer/git.html","Computer/git-sha1.md":"computer/git-sha1.html","Computer/Hashing.md":"computer/hashing.html","Computer/Krita.md":"computer/krita.html","Computer/linux 共享库.md":"computer/linux-共享库.html","Computer/Logo.md":"computer/logo.html","Computer/Shell.md":"computer/shell.html","Computer/thread pool.md":"computer/thread-pool.html","Computer/字符.md":"computer/字符.html","Computer/整数运算.md":"computer/整数运算.html","Dev/Django/Django.md":"dev/django/django.html","Dev/Django/Django 分页.md":"dev/django/django-分页.html","Dev/Django/Django 初始化自带数据.md":"dev/django/django-初始化自带数据.html","Dev/web/Server-Sent Events (SSE) 和 WebSockets.md":"dev/web/server-sent-events-(sse)-和-websockets.html","Dev/web/zod.md":"dev/web/zod.html","Dev/grpc.md":"dev/grpc.html","Finance/PPP.md":"finance/ppp.html","Finance/利差交易.md":"finance/利差交易.html","Finance/国际收支、双顺差与货币升值.md":"finance/国际收支、双顺差与货币升值.html","Finance/影响外汇价格的因素.md":"finance/影响外汇价格的因素.html","Finance/通货膨胀.md":"finance/通货膨胀.html","Linux/android.md":"linux/android.html","Linux/Arch.md":"linux/arch.html","Linux/docker.md":"linux/docker.html","Linux/git.md":"linux/git.html","Linux/shell.md":"linux/shell.html","Linux/zsh disable history.md":"linux/zsh-disable-history.html","Linux/打包.md":"linux/打包.html","Linux/添加用户.md":"linux/添加用户.html","Linux/端口占用.md":"linux/端口占用.html","Uncategorized/Google 地区.md":"uncategorized/google-地区.html","Uncategorized/telegram avatar.md":"uncategorized/telegram-avatar.html","Uncategorized/zed 用 ollama.md":"uncategorized/zed-用-ollama.html","Uncategorized/什么是金丝雀安全声明？ - Cloudflare.md":"uncategorized/什么是金丝雀安全声明？-cloudflare.html","Uncategorized/写作压力.md":"uncategorized/写作压力.html","Uncategorized/小鹤双拼 on windows.md":"uncategorized/小鹤双拼-on-windows.html","Uncategorized/清除 Powershell 历史.md":"uncategorized/清除-powershell-历史.html","翻墙/clash/index.md":"翻墙/clash/index.html","翻墙/clash/dialer-proxy.md":"翻墙/clash/dialer-proxy.html","翻墙/clash/warp ip range.md":"翻墙/clash/warp-ip-range.html","翻墙/clash/使用 clash meta + Warp 增强使用机场时的隐私.md":"翻墙/clash/使用-clash-meta-+-warp-增强使用机场时的隐私.html","翻墙/clash/链式代理.md":"翻墙/clash/链式代理.html","翻墙/WARP.md":"翻墙/warp.html","index.md":"index.html","":"site-lib/rss.xml","Assets/2023-03-17_17-11.webp":"assets/2023-03-17_17-11.webp","Assets/Pasted image 20240528170902.png":"assets/pasted-image-20240528170902.png","Assets/2023-03-17_16-12.webp":"assets/2023-03-17_16-12.webp","Assets/Pasted image 20240527170802.png":"assets/pasted-image-20240527170802.png","Assets/image/Hex and Decimal-1701246586199.jpeg":"assets/image/hex-and-decimal-1701246586199.jpeg","Assets/image/spring web-1685289945837.jpeg":"assets/image/spring-web-1685289945837.jpeg","Assets/image/udp-1679050115511.jpeg":"assets/image/udp-1679050115511.jpeg","Assets/image/udp-1679051130778.jpeg":"assets/image/udp-1679051130778.jpeg","Assets/image/Internet Protocol-1677847475053.jpeg":"assets/image/internet-protocol-1677847475053.jpeg","Assets/image/TUN TAP-1678176253048.jpeg":"assets/image/tun-tap-1678176253048.jpeg","Assets/image/ARP-1678698919522.jpeg":"assets/image/arp-1678698919522.jpeg","Assets/image/CS144 lab1-1677946921891.jpeg":"assets/image/cs144-lab1-1677946921891.jpeg","Assets/image/Encapsulation (networking)-1677852705096.jpeg":"assets/image/encapsulation-(networking)-1677852705096.jpeg","Assets/image/Encapsulation-1677852825322.jpeg":"assets/image/encapsulation-1677852825322.jpeg","Assets/image/Encapsulation-1677853941070.jpeg":"assets/image/encapsulation-1677853941070.jpeg","Assets/image/the 4 layer internet model-1677839765520.jpeg":"assets/image/the-4-layer-internet-model-1677839765520.jpeg","Assets/image/the 4 layer internet model-1677841182979.jpeg":"assets/image/the-4-layer-internet-model-1677841182979.jpeg","Assets/image/the 4 layer internet model-1677841972147.jpeg":"assets/image/the-4-layer-internet-model-1677841972147.jpeg"},"featureOptions":{"backlinks":{"featureId":"backlinks","enabled":true,"unavailable":false,"alwaysEnabled":false,"displayTitle":"Backlinks","featurePlacement":{"selector":".footer","type":"start","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""}},"tags":{"featureId":"tags","enabled":true,"unavailable":false,"alwaysEnabled":false,"displayTitle":"","featurePlacement":{"selector":".header .data-bar","type":"end","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"showInlineTags":true,"showFrontmatterTags":true,"info_showInlineTags":{"show":true,"name":"","description":"Show tags defined inside the document at the top of the page.","placeholder":""},"info_showFrontmatterTags":{"show":true,"name":"","description":"Show tags defined in the frontmatter of the document at the top of the page.","placeholder":""}},"alias":{"featureId":"aliases","enabled":true,"unavailable":false,"alwaysEnabled":false,"displayTitle":"","featurePlacement":{"selector":".header .data-bar","type":"start","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""}},"properties":{"featureId":"properties","enabled":true,"unavailable":false,"alwaysEnabled":false,"displayTitle":"Properties","featurePlacement":{"selector":".header","type":"start","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"info_hideProperties":{"show":true,"name":"","description":"A list of properties to hide from the properties view","placeholder":""}},"fileNavigation":{"featureId":"file-navigation","enabled":true,"unavailable":false,"alwaysEnabled":false,"displayTitle":"","featurePlacement":{"selector":"#left-sidebar-content","type":"end","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"info_includePath":{"show":false,"name":"","description":"","placeholder":""},"showCustomIcons":false,"showDefaultFolderIcons":false,"showDefaultFileIcons":false,"defaultFolderIcon":"lucide//folder","defaultFileIcon":"lucide//file","defaultMediaIcon":"lucide//file-image","exposeStartingPath":true,"info_showCustomIcons":{"show":true,"name":"","description":"Show custom icons for files and folders","placeholder":""},"info_showDefaultFolderIcons":{"show":true,"name":"","description":"Show a default icon of a folder for every folder in the tree","placeholder":""},"info_showDefaultFileIcons":{"show":true,"name":"","description":"Show a default icon of a file for every file in the tree","placeholder":""},"info_defaultFolderIcon":{"show":true,"name":"","description":"The icon to use for folders. Prefix with 'lucide//' to use a Lucide icon","placeholder":""},"info_defaultFileIcon":{"show":true,"name":"","description":"The icon to use for files. Prefix with 'lucide//' to use a Lucide icon","placeholder":""},"info_defaultMediaIcon":{"show":true,"name":"","description":"The icon to use for media files. Prefix with 'lucide//' to use a Lucide icon","placeholder":""},"info_exposeStartingPath":{"show":true,"name":"","description":"Whether or not to show the current file in the file tree when the page is first loaded","placeholder":""},"includePath":"site-lib/html/file-tree.html"},"search":{"featureId":"search","enabled":true,"unavailable":false,"alwaysEnabled":false,"displayTitle":"Search...","featurePlacement":{"selector":"#left-sidebar .topbar-content","type":"start","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""}},"outline":{"featureId":"outline","enabled":true,"unavailable":false,"alwaysEnabled":false,"displayTitle":"Outline","featurePlacement":{"selector":"#right-sidebar-content","type":"end","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"startCollapsed":false,"minCollapseDepth":0,"info_startCollapsed":{"show":true,"name":"","description":"Should the outline start collapsed?","placeholder":""},"info_minCollapseDepth":{"show":true,"name":"","description":"Only allow outline items to be collapsed if they are at least this many levels deep in the tree.","placeholder":"","dropdownOptions":{"1":1,"2":2,"No Collapse":100}}},"themeToggle":{"featureId":"theme-toggle","enabled":true,"unavailable":false,"alwaysEnabled":false,"displayTitle":"","featurePlacement":{"selector":"#right-sidebar .topbar-content","type":"start","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""}},"graphView":{"featureId":"graph-view","enabled":true,"unavailable":false,"alwaysEnabled":false,"displayTitle":"Graph View","featurePlacement":{"selector":"#right-sidebar-content","type":"start","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"showOrphanNodes":true,"showAttachments":false,"allowGlobalGraph":true,"allowExpand":true,"attractionForce":1,"linkLength":15,"repulsionForce":80,"centralForce":2,"edgePruning":100,"minNodeRadius":3,"maxNodeRadius":7,"info_showOrphanNodes":{"show":true,"name":"","description":"Show nodes that are not connected to any other nodes.","placeholder":""},"info_showAttachments":{"show":true,"name":"","description":"Show attachments like images and PDFs as nodes in the graph.","placeholder":""},"info_allowGlobalGraph":{"show":true,"name":"","description":"Allow the user to view the global graph of all nodes.","placeholder":""},"info_allowExpand":{"show":true,"name":"","description":"Allow the user to pop-out the graph view to take up the whole screen","placeholder":""},"info_attractionForce":{"show":true,"name":"","description":"How much should linked nodes attract each other? This will make the graph appear more clustered.","placeholder":""},"info_linkLength":{"show":true,"name":"","description":"How long should the links between nodes be? The shorter the links the more connected nodes will cluster together.","placeholder":""},"info_repulsionForce":{"show":true,"name":"","description":"How much should nodes repel each other? This will make disconnected parts more spread out.","placeholder":""},"info_centralForce":{"show":true,"name":"","description":"How much should nodes be attracted to the center? This will make the graph appear more dense and circular.","placeholder":""},"info_edgePruning":{"show":true,"name":"","description":"Edges with a length above this threshold will not be rendered, however they will still contribute to the simulation. This can help large tangled graphs look more organised. Hovering over a node will still display these links.","placeholder":""},"info_minNodeRadius":{"show":true,"name":"","description":"How small should the smallest nodes be? The smaller a node is the less it will attract other nodes.","placeholder":""},"info_maxNodeRadius":{"show":true,"name":"","description":"How large should the largest nodes be? Nodes are sized by how many links they have. The larger a node is the more it will attract other nodes. This can be used to create a good grouping around the most important nodes.","placeholder":""}},"sidebar":{"featureId":"sidebar","enabled":true,"unavailable":false,"alwaysEnabled":false,"allowResizing":true,"allowCollapsing":true,"rightDefaultWidth":"20em","leftDefaultWidth":"20em","info_allowResizing":{"show":true,"name":"","description":"Whether or not to allow the sidebars to be resized","placeholder":""},"info_allowCollapsing":{"show":true,"name":"","description":"Whether or not to allow the sidebars to be collapsed","placeholder":""},"info_rightDefaultWidth":{"show":true,"name":"","description":"The default width of the right sidebar","placeholder":""},"info_leftDefaultWidth":{"show":true,"name":"","description":"The default width of the left sidebar","placeholder":""}},"customHead":{"featureId":"custom-head","enabled":true,"unavailable":false,"alwaysEnabled":false,"displayTitle":"","featurePlacement":{"selector":"head","type":"end","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"info_includePath":{"show":false,"name":"","description":"","placeholder":""},"sourcePath":"","info_sourcePath":{"show":true,"name":"","description":"The local path to the source .html file which will be included.","placeholder":"","fileInputOptions":{"makeRelativeToVault":true,"browseButton":true}},"includePath":"site-lib/html/custom-head.html"},"document":{"featureId":"obsidian-document","enabled":true,"unavailable":false,"alwaysEnabled":true,"allowFoldingLists":true,"allowFoldingHeadings":true,"documentWidth":"40em","info_allowFoldingLists":{"show":true,"name":"","description":"Whether or not to allow lists to be folded","placeholder":""},"info_allowFoldingHeadings":{"show":true,"name":"","description":"Whether or not to allow headings to be folded","placeholder":""},"info_documentWidth":{"show":true,"name":"","description":"The width of the document","placeholder":""}},"rss":{"featureId":"obsidian-document","enabled":true,"unavailable":false,"alwaysEnabled":false,"siteUrl":"https://rinodg.pages.dev/","siteName":"icealtria's digital garden","authorName":"icealtria","info_siteUrl":{"show":true,"name":"","description":"The url that this site will be hosted at","placeholder":"https://example.com/mysite"},"info_siteName":{"show":true,"name":"","description":"The name of the vault / exported site","placeholder":""},"info_authorName":{"show":true,"name":"","description":"The name of the author of the site","placeholder":""}}},"modifiedTime":1733329173835,"siteName":"icealtria's digital garden","vaultName":"Notes","exportRoot":"","baseURL":"https://rinodg.pages.dev/","pluginVersion":"1.9.0-3b","themeName":"Default","bodyClasses":"publish css-settings-manager show-inline-title show-ribbon is-focused","hasFavicon":false}